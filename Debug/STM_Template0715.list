
STM_Template0715.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b10  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  08006cbc  08006cbc  00016cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fd8  08006fd8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006fd8  08006fd8  00016fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fe0  08006fe0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006fe0  08006fe0  00016fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fe8  08006fe8  00016fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00001308  20000060  20000060  00020060  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20001368  20001368  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001fafc  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003a8f  00000000  00000000  0003fbcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001410  00000000  00000000  00043660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000fb2  00000000  00000000  00044a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026d6c  00000000  00000000  00045a22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019026  00000000  00000000  0006c78e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e8ee6  00000000  00000000  000857b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005a24  00000000  00000000  0016e69c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  001740c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000060 	.word	0x20000060
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006ca4 	.word	0x08006ca4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000064 	.word	0x20000064
 80001e8:	08006ca4 	.word	0x08006ca4

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	0a5a      	lsrs	r2, r3, #9
 8000508:	490f      	ldr	r1, [pc, #60]	; (8000548 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800050a:	fba1 1202 	umull	r1, r2, r1, r2
 800050e:	09d2      	lsrs	r2, r2, #7
 8000510:	490e      	ldr	r1, [pc, #56]	; (800054c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000512:	fb01 f202 	mul.w	r2, r1, r2
 8000516:	1a9b      	subs	r3, r3, r2
 8000518:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	0a5b      	lsrs	r3, r3, #9
 8000520:	4a09      	ldr	r2, [pc, #36]	; (8000548 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000522:	fba2 2303 	umull	r2, r3, r2, r3
 8000526:	09db      	lsrs	r3, r3, #7
 8000528:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	68bb      	ldr	r3, [r7, #8]
 8000530:	441a      	add	r2, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	68fa      	ldr	r2, [r7, #12]
 800053a:	601a      	str	r2, [r3, #0]
}
 800053c:	bf00      	nop
 800053e:	3714      	adds	r7, #20
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	00044b83 	.word	0x00044b83
 800054c:	3b9aca00 	.word	0x3b9aca00

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000554:	f003 f93a 	bl	80037cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000558:	f000 f80e 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055c:	f000 f968 	bl	8000830 <MX_GPIO_Init>
  MX_ETH_Init();
 8000560:	f000 f874 	bl	800064c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000564:	f000 f90c 	bl	8000780 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000568:	f000 f934 	bl	80007d4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 800056c:	f000 f8bc 	bl	80006e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8000570:	f000 fc6e 	bl	8000e50 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000574:	e7fe      	b.n	8000574 <main+0x24>
	...

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	; 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	2230      	movs	r2, #48	; 0x30
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f006 fa39 	bl	80069fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	4b28      	ldr	r3, [pc, #160]	; (8000644 <SystemClock_Config+0xcc>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	4a27      	ldr	r2, [pc, #156]	; (8000644 <SystemClock_Config+0xcc>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	; 0x40
 80005ac:	4b25      	ldr	r3, [pc, #148]	; (8000644 <SystemClock_Config+0xcc>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b22      	ldr	r3, [pc, #136]	; (8000648 <SystemClock_Config+0xd0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a21      	ldr	r2, [pc, #132]	; (8000648 <SystemClock_Config+0xd0>)
 80005c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <SystemClock_Config+0xd0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d4:	2301      	movs	r3, #1
 80005d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005de:	2302      	movs	r3, #2
 80005e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005e8:	2304      	movs	r3, #4
 80005ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005ec:	23a8      	movs	r3, #168	; 0xa8
 80005ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f4:	2307      	movs	r3, #7
 80005f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 0320 	add.w	r3, r7, #32
 80005fc:	4618      	mov	r0, r3
 80005fe:	f004 f91d 	bl	800483c <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000608:	f000 f9c0 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060c:	230f      	movs	r3, #15
 800060e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000610:	2302      	movs	r3, #2
 8000612:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000618:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800061c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800061e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000622:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2105      	movs	r1, #5
 800062a:	4618      	mov	r0, r3
 800062c:	f004 fb7e 	bl	8004d2c <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000636:	f000 f9a9 	bl	800098c <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	3750      	adds	r7, #80	; 0x50
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <MX_ETH_Init+0x84>)
 8000652:	4a20      	ldr	r2, [pc, #128]	; (80006d4 <MX_ETH_Init+0x88>)
 8000654:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <MX_ETH_Init+0x8c>)
 8000658:	2200      	movs	r2, #0
 800065a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <MX_ETH_Init+0x8c>)
 800065e:	2280      	movs	r2, #128	; 0x80
 8000660:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <MX_ETH_Init+0x8c>)
 8000664:	22e1      	movs	r2, #225	; 0xe1
 8000666:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <MX_ETH_Init+0x8c>)
 800066a:	2200      	movs	r2, #0
 800066c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <MX_ETH_Init+0x8c>)
 8000670:	2200      	movs	r2, #0
 8000672:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_ETH_Init+0x8c>)
 8000676:	2200      	movs	r2, #0
 8000678:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800067a:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <MX_ETH_Init+0x84>)
 800067c:	4a16      	ldr	r2, [pc, #88]	; (80006d8 <MX_ETH_Init+0x8c>)
 800067e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000680:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_ETH_Init+0x84>)
 8000682:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000686:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_ETH_Init+0x84>)
 800068a:	4a14      	ldr	r2, [pc, #80]	; (80006dc <MX_ETH_Init+0x90>)
 800068c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <MX_ETH_Init+0x84>)
 8000690:	4a13      	ldr	r2, [pc, #76]	; (80006e0 <MX_ETH_Init+0x94>)
 8000692:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000694:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_ETH_Init+0x84>)
 8000696:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800069a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <MX_ETH_Init+0x84>)
 800069e:	f003 fac3 	bl	8003c28 <HAL_ETH_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006a8:	f000 f970 	bl	800098c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006ac:	2238      	movs	r2, #56	; 0x38
 80006ae:	2100      	movs	r1, #0
 80006b0:	480c      	ldr	r0, [pc, #48]	; (80006e4 <MX_ETH_Init+0x98>)
 80006b2:	f006 f9a4 	bl	80069fe <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_ETH_Init+0x98>)
 80006b8:	2221      	movs	r2, #33	; 0x21
 80006ba:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_ETH_Init+0x98>)
 80006be:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80006c2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <MX_ETH_Init+0x98>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200001f4 	.word	0x200001f4
 80006d4:	40028000 	.word	0x40028000
 80006d8:	2000083c 	.word	0x2000083c
 80006dc:	20000154 	.word	0x20000154
 80006e0:	200000b4 	.word	0x200000b4
 80006e4:	2000007c 	.word	0x2000007c

080006e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ee:	f107 0308 	add.w	r3, r7, #8
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006fc:	463b      	mov	r3, r7
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000704:	4b1d      	ldr	r3, [pc, #116]	; (800077c <MX_TIM2_Init+0x94>)
 8000706:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800070a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800070c:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_TIM2_Init+0x94>)
 800070e:	2253      	movs	r2, #83	; 0x53
 8000710:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_TIM2_Init+0x94>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_TIM2_Init+0x94>)
 800071a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800071e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000720:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_TIM2_Init+0x94>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_TIM2_Init+0x94>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800072c:	4813      	ldr	r0, [pc, #76]	; (800077c <MX_TIM2_Init+0x94>)
 800072e:	f004 fd1d 	bl	800516c <HAL_TIM_Base_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000738:	f000 f928 	bl	800098c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800073c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000740:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	4619      	mov	r1, r3
 8000748:	480c      	ldr	r0, [pc, #48]	; (800077c <MX_TIM2_Init+0x94>)
 800074a:	f004 fed7 	bl	80054fc <HAL_TIM_ConfigClockSource>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000754:	f000 f91a 	bl	800098c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000758:	2300      	movs	r3, #0
 800075a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000760:	463b      	mov	r3, r7
 8000762:	4619      	mov	r1, r3
 8000764:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_TIM2_Init+0x94>)
 8000766:	f005 f8f3 	bl	8005950 <HAL_TIMEx_MasterConfigSynchronization>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000770:	f000 f90c 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	3718      	adds	r7, #24
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200002a4 	.word	0x200002a4

08000780 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_USART3_UART_Init+0x4c>)
 8000786:	4a12      	ldr	r2, [pc, #72]	; (80007d0 <MX_USART3_UART_Init+0x50>)
 8000788:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MX_USART3_UART_Init+0x4c>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_USART3_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_USART3_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_USART3_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_USART3_UART_Init+0x4c>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_USART3_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_USART3_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_USART3_UART_Init+0x4c>)
 80007b8:	f005 f95a 	bl	8005a70 <HAL_UART_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007c2:	f000 f8e3 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200002ec 	.word	0x200002ec
 80007d0:	40004800 	.word	0x40004800

080007d4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e2:	2204      	movs	r2, #4
 80007e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e8:	2202      	movs	r2, #2
 80007ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f4:	2202      	movs	r2, #2
 80007f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080c:	2201      	movs	r2, #1
 800080e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000818:	f003 fef3 	bl	8004602 <HAL_PCD_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000822:	f000 f8b3 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000330 	.word	0x20000330

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08c      	sub	sp, #48	; 0x30
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
 800084a:	4b4c      	ldr	r3, [pc, #304]	; (800097c <MX_GPIO_Init+0x14c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a4b      	ldr	r2, [pc, #300]	; (800097c <MX_GPIO_Init+0x14c>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b49      	ldr	r3, [pc, #292]	; (800097c <MX_GPIO_Init+0x14c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	61bb      	str	r3, [r7, #24]
 8000860:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	4b45      	ldr	r3, [pc, #276]	; (800097c <MX_GPIO_Init+0x14c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a44      	ldr	r2, [pc, #272]	; (800097c <MX_GPIO_Init+0x14c>)
 800086c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b42      	ldr	r3, [pc, #264]	; (800097c <MX_GPIO_Init+0x14c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b3e      	ldr	r3, [pc, #248]	; (800097c <MX_GPIO_Init+0x14c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a3d      	ldr	r2, [pc, #244]	; (800097c <MX_GPIO_Init+0x14c>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b3b      	ldr	r3, [pc, #236]	; (800097c <MX_GPIO_Init+0x14c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b37      	ldr	r3, [pc, #220]	; (800097c <MX_GPIO_Init+0x14c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a36      	ldr	r2, [pc, #216]	; (800097c <MX_GPIO_Init+0x14c>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b34      	ldr	r3, [pc, #208]	; (800097c <MX_GPIO_Init+0x14c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	4b30      	ldr	r3, [pc, #192]	; (800097c <MX_GPIO_Init+0x14c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a2f      	ldr	r2, [pc, #188]	; (800097c <MX_GPIO_Init+0x14c>)
 80008c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b2d      	ldr	r3, [pc, #180]	; (800097c <MX_GPIO_Init+0x14c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b29      	ldr	r3, [pc, #164]	; (800097c <MX_GPIO_Init+0x14c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a28      	ldr	r2, [pc, #160]	; (800097c <MX_GPIO_Init+0x14c>)
 80008dc:	f043 0308 	orr.w	r3, r3, #8
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b26      	ldr	r3, [pc, #152]	; (800097c <MX_GPIO_Init+0x14c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0308 	and.w	r3, r3, #8
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80008f4:	4822      	ldr	r0, [pc, #136]	; (8000980 <MX_GPIO_Init+0x150>)
 80008f6:	f003 fe6b 	bl	80045d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2141      	movs	r1, #65	; 0x41
 80008fe:	4821      	ldr	r0, [pc, #132]	; (8000984 <MX_GPIO_Init+0x154>)
 8000900:	f003 fe66 	bl	80045d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000904:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800090a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	481b      	ldr	r0, [pc, #108]	; (8000988 <MX_GPIO_Init+0x158>)
 800091c:	f003 fcac 	bl	8004278 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000920:	f244 0381 	movw	r3, #16513	; 0x4081
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4811      	ldr	r0, [pc, #68]	; (8000980 <MX_GPIO_Init+0x150>)
 800093a:	f003 fc9d 	bl	8004278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|USB_PowerSwitchOn_Pin;
 800093e:	2341      	movs	r3, #65	; 0x41
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	480b      	ldr	r0, [pc, #44]	; (8000984 <MX_GPIO_Init+0x154>)
 8000956:	f003 fc8f 	bl	8004278 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800095a:	2380      	movs	r3, #128	; 0x80
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095e:	2300      	movs	r3, #0
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_GPIO_Init+0x154>)
 800096e:	f003 fc83 	bl	8004278 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000972:	bf00      	nop
 8000974:	3730      	adds	r7, #48	; 0x30
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800
 8000980:	40020400 	.word	0x40020400
 8000984:	40021800 	.word	0x40021800
 8000988:	40020800 	.word	0x40020800

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x8>
	...

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <HAL_MspInit+0x4c>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	4a0f      	ldr	r2, [pc, #60]	; (80009e4 <HAL_MspInit+0x4c>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <HAL_MspInit+0x4c>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <HAL_MspInit+0x4c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a08      	ldr	r2, [pc, #32]	; (80009e4 <HAL_MspInit+0x4c>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_MspInit+0x4c>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800

080009e8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08e      	sub	sp, #56	; 0x38
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a55      	ldr	r2, [pc, #340]	; (8000b5c <HAL_ETH_MspInit+0x174>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	f040 80a4 	bne.w	8000b54 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
 8000a10:	4b53      	ldr	r3, [pc, #332]	; (8000b60 <HAL_ETH_MspInit+0x178>)
 8000a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a14:	4a52      	ldr	r2, [pc, #328]	; (8000b60 <HAL_ETH_MspInit+0x178>)
 8000a16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1c:	4b50      	ldr	r3, [pc, #320]	; (8000b60 <HAL_ETH_MspInit+0x178>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a24:	623b      	str	r3, [r7, #32]
 8000a26:	6a3b      	ldr	r3, [r7, #32]
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
 8000a2c:	4b4c      	ldr	r3, [pc, #304]	; (8000b60 <HAL_ETH_MspInit+0x178>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a30:	4a4b      	ldr	r2, [pc, #300]	; (8000b60 <HAL_ETH_MspInit+0x178>)
 8000a32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a36:	6313      	str	r3, [r2, #48]	; 0x30
 8000a38:	4b49      	ldr	r3, [pc, #292]	; (8000b60 <HAL_ETH_MspInit+0x178>)
 8000a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a40:	61fb      	str	r3, [r7, #28]
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	2300      	movs	r3, #0
 8000a46:	61bb      	str	r3, [r7, #24]
 8000a48:	4b45      	ldr	r3, [pc, #276]	; (8000b60 <HAL_ETH_MspInit+0x178>)
 8000a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4c:	4a44      	ldr	r2, [pc, #272]	; (8000b60 <HAL_ETH_MspInit+0x178>)
 8000a4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a52:	6313      	str	r3, [r2, #48]	; 0x30
 8000a54:	4b42      	ldr	r3, [pc, #264]	; (8000b60 <HAL_ETH_MspInit+0x178>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a5c:	61bb      	str	r3, [r7, #24]
 8000a5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	4b3e      	ldr	r3, [pc, #248]	; (8000b60 <HAL_ETH_MspInit+0x178>)
 8000a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a68:	4a3d      	ldr	r2, [pc, #244]	; (8000b60 <HAL_ETH_MspInit+0x178>)
 8000a6a:	f043 0304 	orr.w	r3, r3, #4
 8000a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a70:	4b3b      	ldr	r3, [pc, #236]	; (8000b60 <HAL_ETH_MspInit+0x178>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a74:	f003 0304 	and.w	r3, r3, #4
 8000a78:	617b      	str	r3, [r7, #20]
 8000a7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	4b37      	ldr	r3, [pc, #220]	; (8000b60 <HAL_ETH_MspInit+0x178>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	4a36      	ldr	r2, [pc, #216]	; (8000b60 <HAL_ETH_MspInit+0x178>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8c:	4b34      	ldr	r3, [pc, #208]	; (8000b60 <HAL_ETH_MspInit+0x178>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	4b30      	ldr	r3, [pc, #192]	; (8000b60 <HAL_ETH_MspInit+0x178>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa0:	4a2f      	ldr	r2, [pc, #188]	; (8000b60 <HAL_ETH_MspInit+0x178>)
 8000aa2:	f043 0302 	orr.w	r3, r3, #2
 8000aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa8:	4b2d      	ldr	r3, [pc, #180]	; (8000b60 <HAL_ETH_MspInit+0x178>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	f003 0302 	and.w	r3, r3, #2
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	4b29      	ldr	r3, [pc, #164]	; (8000b60 <HAL_ETH_MspInit+0x178>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	4a28      	ldr	r2, [pc, #160]	; (8000b60 <HAL_ETH_MspInit+0x178>)
 8000abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac4:	4b26      	ldr	r3, [pc, #152]	; (8000b60 <HAL_ETH_MspInit+0x178>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ad0:	2332      	movs	r3, #50	; 0x32
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ae0:	230b      	movs	r3, #11
 8000ae2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae8:	4619      	mov	r1, r3
 8000aea:	481e      	ldr	r0, [pc, #120]	; (8000b64 <HAL_ETH_MspInit+0x17c>)
 8000aec:	f003 fbc4 	bl	8004278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000af0:	2386      	movs	r3, #134	; 0x86
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afc:	2303      	movs	r3, #3
 8000afe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b00:	230b      	movs	r3, #11
 8000b02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4817      	ldr	r0, [pc, #92]	; (8000b68 <HAL_ETH_MspInit+0x180>)
 8000b0c:	f003 fbb4 	bl	8004278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b22:	230b      	movs	r3, #11
 8000b24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	480f      	ldr	r0, [pc, #60]	; (8000b6c <HAL_ETH_MspInit+0x184>)
 8000b2e:	f003 fba3 	bl	8004278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b32:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b40:	2303      	movs	r3, #3
 8000b42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b44:	230b      	movs	r3, #11
 8000b46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4808      	ldr	r0, [pc, #32]	; (8000b70 <HAL_ETH_MspInit+0x188>)
 8000b50:	f003 fb92 	bl	8004278 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000b54:	bf00      	nop
 8000b56:	3738      	adds	r7, #56	; 0x38
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40028000 	.word	0x40028000
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020800 	.word	0x40020800
 8000b68:	40020000 	.word	0x40020000
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	40021800 	.word	0x40021800

08000b74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b84:	d115      	bne.n	8000bb2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <HAL_TIM_Base_MspInit+0x48>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	4a0b      	ldr	r2, [pc, #44]	; (8000bbc <HAL_TIM_Base_MspInit+0x48>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6413      	str	r3, [r2, #64]	; 0x40
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <HAL_TIM_Base_MspInit+0x48>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	201c      	movs	r0, #28
 8000ba8:	f002 ff81 	bl	8003aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bac:	201c      	movs	r0, #28
 8000bae:	f002 ff9a 	bl	8003ae6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800

08000bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a19      	ldr	r2, [pc, #100]	; (8000c44 <HAL_UART_MspInit+0x84>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d12c      	bne.n	8000c3c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <HAL_UART_MspInit+0x88>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	4a17      	ldr	r2, [pc, #92]	; (8000c48 <HAL_UART_MspInit+0x88>)
 8000bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <HAL_UART_MspInit+0x88>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <HAL_UART_MspInit+0x88>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a10      	ldr	r2, [pc, #64]	; (8000c48 <HAL_UART_MspInit+0x88>)
 8000c08:	f043 0308 	orr.w	r3, r3, #8
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <HAL_UART_MspInit+0x88>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0308 	and.w	r3, r3, #8
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c2c:	2307      	movs	r3, #7
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4619      	mov	r1, r3
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <HAL_UART_MspInit+0x8c>)
 8000c38:	f003 fb1e 	bl	8004278 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c3c:	bf00      	nop
 8000c3e:	3728      	adds	r7, #40	; 0x28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40004800 	.word	0x40004800
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020c00 	.word	0x40020c00

08000c50 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c70:	d13f      	bne.n	8000cf2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <HAL_PCD_MspInit+0xac>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a20      	ldr	r2, [pc, #128]	; (8000cfc <HAL_PCD_MspInit+0xac>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <HAL_PCD_MspInit+0xac>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c8e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ca0:	230a      	movs	r3, #10
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4815      	ldr	r0, [pc, #84]	; (8000d00 <HAL_PCD_MspInit+0xb0>)
 8000cac:	f003 fae4 	bl	8004278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	480e      	ldr	r0, [pc, #56]	; (8000d00 <HAL_PCD_MspInit+0xb0>)
 8000cc6:	f003 fad7 	bl	8004278 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <HAL_PCD_MspInit+0xac>)
 8000ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cce:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <HAL_PCD_MspInit+0xac>)
 8000cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd4:	6353      	str	r3, [r2, #52]	; 0x34
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_PCD_MspInit+0xac>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <HAL_PCD_MspInit+0xac>)
 8000ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce6:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <HAL_PCD_MspInit+0xac>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3728      	adds	r7, #40	; 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020000 	.word	0x40020000

08000d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <NMI_Handler+0x4>

08000d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <HardFault_Handler+0x4>

08000d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <MemManage_Handler+0x4>

08000d16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <BusFault_Handler+0x4>

08000d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <UsageFault_Handler+0x4>

08000d22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d50:	f002 fd8e 	bl	8003870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <TIM2_IRQHandler+0x10>)
 8000d5e:	f004 fac5 	bl	80052ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200002a4 	.word	0x200002a4

08000d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d74:	4a14      	ldr	r2, [pc, #80]	; (8000dc8 <_sbrk+0x5c>)
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <_sbrk+0x60>)
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d80:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d102      	bne.n	8000d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <_sbrk+0x64>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	; (8000dd4 <_sbrk+0x68>)
 8000d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d207      	bcs.n	8000dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d9c:	f005 fe38 	bl	8006a10 <__errno>
 8000da0:	4603      	mov	r3, r0
 8000da2:	220c      	movs	r2, #12
 8000da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
 8000daa:	e009      	b.n	8000dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000db2:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <_sbrk+0x64>)
 8000dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20030000 	.word	0x20030000
 8000dcc:	00000400 	.word	0x00000400
 8000dd0:	20000844 	.word	0x20000844
 8000dd4:	20001368 	.word	0x20001368

08000dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <SystemInit+0x20>)
 8000dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de2:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <SystemInit+0x20>)
 8000de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <HAL_TIM_PeriodElapsedCallback>:
#include "dc_motor.h"


int t_ms = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e0c:	d10a      	bne.n	8000e24 <HAL_TIM_PeriodElapsedCallback+0x28>
		t_ms++; //for debbugging
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	3301      	adds	r3, #1
 8000e14:	4a06      	ldr	r2, [pc, #24]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000e16:	6013      	str	r3, [r2, #0]
		speed.linear.x = 1;
 8000e18:	4906      	ldr	r1, [pc, #24]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000e1a:	f04f 0200 	mov.w	r2, #0
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e20:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	20000848 	.word	0x20000848
 8000e34:	20000858 	.word	0x20000858
 8000e38:	3ff00000 	.word	0x3ff00000

08000e3c <_Z9TIM_Startv>:

void TIM_Start(){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(&htim2);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <_Z9TIM_Startv+0x10>)
 8000e42:	f004 f9e3 	bl	800520c <HAL_TIM_Base_Start_IT>
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200002a4 	.word	0x200002a4

08000e50 <main_function>:

#include "mainpp.h"
#include "TIM_IT.h"
#include "ros_port.h"

void main_function(){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
    /* setup */
//    ros_setup();
    TIM_Start();
 8000e54:	f7ff fff2 	bl	8000e3c <_Z9TIM_Startv>

    while(1){
 8000e58:	e7fe      	b.n	8000e58 <main_function+0x8>

08000e5a <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4618      	mov	r0, r3
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <_ZN3ros3MsgC1Ev+0x1c>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	08006fc8 	.word	0x08006fc8

08000e9c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
      data()
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ffe8 	bl	8000e7c <_ZN3ros3MsgC1Ev>
 8000eac:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ffcf 	bl	8000e5a <_ZN3ros4TimeC1Ev>
    {
    }
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	08006fb0 	.word	0x08006fb0

08000ecc <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6859      	ldr	r1, [r3, #4]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	683a      	ldr	r2, [r7, #0]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	b2ca      	uxtb	r2, r1
 8000ee6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	0a19      	lsrs	r1, r3, #8
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	683a      	ldr	r2, [r7, #0]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	b2ca      	uxtb	r2, r1
 8000ef8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	0c19      	lsrs	r1, r3, #16
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	3302      	adds	r3, #2
 8000f04:	683a      	ldr	r2, [r7, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	b2ca      	uxtb	r2, r1
 8000f0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	0e19      	lsrs	r1, r3, #24
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	3303      	adds	r3, #3
 8000f16:	683a      	ldr	r2, [r7, #0]
 8000f18:	4413      	add	r3, r2
 8000f1a:	b2ca      	uxtb	r2, r1
 8000f1c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	3304      	adds	r3, #4
 8000f22:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6899      	ldr	r1, [r3, #8]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	683a      	ldr	r2, [r7, #0]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	b2ca      	uxtb	r2, r1
 8000f30:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	0a19      	lsrs	r1, r3, #8
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	683a      	ldr	r2, [r7, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	b2ca      	uxtb	r2, r1
 8000f42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	0c19      	lsrs	r1, r3, #16
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	3302      	adds	r3, #2
 8000f4e:	683a      	ldr	r2, [r7, #0]
 8000f50:	4413      	add	r3, r2
 8000f52:	b2ca      	uxtb	r2, r1
 8000f54:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	0e19      	lsrs	r1, r3, #24
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	3303      	adds	r3, #3
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	4413      	add	r3, r2
 8000f64:	b2ca      	uxtb	r2, r1
 8000f66:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	60fb      	str	r3, [r7, #12]
      return offset;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
    }
 8000f70:	4618      	mov	r0, r3
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	6839      	ldr	r1, [r7, #0]
 8000fa2:	440b      	add	r3, r1
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	021b      	lsls	r3, r3, #8
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	6839      	ldr	r1, [r7, #0]
 8000fb8:	440b      	add	r3, r1
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	041b      	lsls	r3, r3, #16
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685a      	ldr	r2, [r3, #4]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	3303      	adds	r3, #3
 8000fcc:	6839      	ldr	r1, [r7, #0]
 8000fce:	440b      	add	r3, r1
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	061b      	lsls	r3, r3, #24
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	689a      	ldr	r2, [r3, #8]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	6839      	ldr	r1, [r7, #0]
 8000ff8:	440b      	add	r3, r1
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	021b      	lsls	r3, r3, #8
 8000ffe:	431a      	orrs	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	3302      	adds	r3, #2
 800100c:	6839      	ldr	r1, [r7, #0]
 800100e:	440b      	add	r3, r1
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	041b      	lsls	r3, r3, #16
 8001014:	431a      	orrs	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	3303      	adds	r3, #3
 8001022:	6839      	ldr	r1, [r7, #0]
 8001024:	440b      	add	r3, r1
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	061b      	lsls	r3, r3, #24
 800102a:	431a      	orrs	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	3304      	adds	r3, #4
 8001034:	60fb      	str	r3, [r7, #12]
     return offset;
 8001036:	68fb      	ldr	r3, [r7, #12]
    }
 8001038:	4618      	mov	r0, r3
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	08006cbc 	.word	0x08006cbc

08001060 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	08006ccc 	.word	0x08006ccc

0800107c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fef8 	bl	8000e7c <_ZN3ros3MsgC1Ev>
 800108c:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a09      	ldr	r2, [pc, #36]	; (80010c0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800109c:	609a      	str	r2, [r3, #8]
      message_type(""),
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80010a2:	60da      	str	r2, [r3, #12]
      md5sum(""),
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80010a8:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	615a      	str	r2, [r3, #20]
    {
    }
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	08006f98 	.word	0x08006f98
 80010c0:	08006cf0 	.word	0x08006cf0

080010c4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	8899      	ldrh	r1, [r3, #4]
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	4413      	add	r3, r2
 80010dc:	b2ca      	uxtb	r2, r1
 80010de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	889b      	ldrh	r3, [r3, #4]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	b299      	uxth	r1, r3
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	3301      	adds	r3, #1
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	b2ca      	uxtb	r2, r1
 80010f2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	3302      	adds	r3, #2
 80010f8:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff f874 	bl	80001ec <strlen>
 8001104:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	4413      	add	r3, r2
 800110c:	69b9      	ldr	r1, [r7, #24]
 800110e:	4618      	mov	r0, r3
 8001110:	f001 fd84 	bl	8002c1c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	3304      	adds	r3, #4
 8001118:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	18d0      	adds	r0, r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4619      	mov	r1, r3
 8001128:	f005 fc9e 	bl	8006a68 <memcpy>
      offset += length_topic_name;
 800112c:	69fa      	ldr	r2, [r7, #28]
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	4413      	add	r3, r2
 8001132:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff f857 	bl	80001ec <strlen>
 800113e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	4413      	add	r3, r2
 8001146:	6979      	ldr	r1, [r7, #20]
 8001148:	4618      	mov	r0, r3
 800114a:	f001 fd67 	bl	8002c1c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3304      	adds	r3, #4
 8001152:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	18d0      	adds	r0, r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	4619      	mov	r1, r3
 8001162:	f005 fc81 	bl	8006a68 <memcpy>
      offset += length_message_type;
 8001166:	69fa      	ldr	r2, [r7, #28]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	4413      	add	r3, r2
 800116c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f83a 	bl	80001ec <strlen>
 8001178:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	4413      	add	r3, r2
 8001180:	6939      	ldr	r1, [r7, #16]
 8001182:	4618      	mov	r0, r3
 8001184:	f001 fd4a 	bl	8002c1c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	3304      	adds	r3, #4
 800118c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	18d0      	adds	r0, r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4619      	mov	r1, r3
 800119c:	f005 fc64 	bl	8006a68 <memcpy>
      offset += length_md5sum;
 80011a0:	69fa      	ldr	r2, [r7, #28]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4413      	add	r3, r2
 80011a6:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80011ae:	68f9      	ldr	r1, [r7, #12]
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	4413      	add	r3, r2
 80011b6:	b2ca      	uxtb	r2, r1
 80011b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	0a19      	lsrs	r1, r3, #8
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3301      	adds	r3, #1
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	4413      	add	r3, r2
 80011c6:	b2ca      	uxtb	r2, r1
 80011c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	0c19      	lsrs	r1, r3, #16
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3302      	adds	r3, #2
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	4413      	add	r3, r2
 80011d6:	b2ca      	uxtb	r2, r1
 80011d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	0e19      	lsrs	r1, r3, #24
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3303      	adds	r3, #3
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	4413      	add	r3, r2
 80011e6:	b2ca      	uxtb	r2, r1
 80011e8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3304      	adds	r3, #4
 80011ee:	61fb      	str	r3, [r7, #28]
      return offset;
 80011f0:	69fb      	ldr	r3, [r7, #28]
    }
 80011f2:	4618      	mov	r0, r3
 80011f4:	3720      	adds	r7, #32
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b08a      	sub	sp, #40	; 0x28
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	4413      	add	r3, r2
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	b29a      	uxth	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	889b      	ldrh	r3, [r3, #4]
 800121a:	b21a      	sxth	r2, r3
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	3301      	adds	r3, #1
 8001220:	6839      	ldr	r1, [r7, #0]
 8001222:	440b      	add	r3, r1
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	b21b      	sxth	r3, r3
 800122a:	4313      	orrs	r3, r2
 800122c:	b21b      	sxth	r3, r3
 800122e:	b29a      	uxth	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	3302      	adds	r3, #2
 8001238:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	441a      	add	r2, r3
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4611      	mov	r1, r2
 8001246:	4618      	mov	r0, r3
 8001248:	f001 fd07 	bl	8002c5a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	3304      	adds	r3, #4
 8001250:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
 8001256:	e00b      	b.n	8001270 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8001258:	683a      	ldr	r2, [r7, #0]
 800125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125c:	441a      	add	r2, r3
 800125e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001260:	3b01      	subs	r3, #1
 8001262:	6839      	ldr	r1, [r7, #0]
 8001264:	440b      	add	r3, r1
 8001266:	7812      	ldrb	r2, [r2, #0]
 8001268:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	3301      	adds	r3, #1
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	4413      	add	r3, r2
 8001276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001278:	429a      	cmp	r2, r3
 800127a:	d3ed      	bcc.n	8001258 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	4413      	add	r3, r2
 8001282:	3b01      	subs	r3, #1
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	4413      	add	r3, r2
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	3b01      	subs	r3, #1
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	441a      	add	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	4413      	add	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	441a      	add	r2, r3
 80012a6:	f107 0310 	add.w	r3, r7, #16
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f001 fcd4 	bl	8002c5a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	3304      	adds	r3, #4
 80012b6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	623b      	str	r3, [r7, #32]
 80012bc:	e00b      	b.n	80012d6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	6a3b      	ldr	r3, [r7, #32]
 80012c2:	441a      	add	r2, r3
 80012c4:	6a3b      	ldr	r3, [r7, #32]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	6839      	ldr	r1, [r7, #0]
 80012ca:	440b      	add	r3, r1
 80012cc:	7812      	ldrb	r2, [r2, #0]
 80012ce:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80012d0:	6a3b      	ldr	r3, [r7, #32]
 80012d2:	3301      	adds	r3, #1
 80012d4:	623b      	str	r3, [r7, #32]
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4413      	add	r3, r2
 80012dc:	6a3a      	ldr	r2, [r7, #32]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d3ed      	bcc.n	80012be <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4413      	add	r3, r2
 80012e8:	3b01      	subs	r3, #1
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	4413      	add	r3, r2
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	3b01      	subs	r3, #1
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	441a      	add	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	4413      	add	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	441a      	add	r2, r3
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f001 fca1 	bl	8002c5a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	3304      	adds	r3, #4
 800131c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	61fb      	str	r3, [r7, #28]
 8001322:	e00b      	b.n	800133c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	441a      	add	r2, r3
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3b01      	subs	r3, #1
 800132e:	6839      	ldr	r1, [r7, #0]
 8001330:	440b      	add	r3, r1
 8001332:	7812      	ldrb	r2, [r2, #0]
 8001334:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3301      	adds	r3, #1
 800133a:	61fb      	str	r3, [r7, #28]
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4413      	add	r3, r2
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	429a      	cmp	r2, r3
 8001346:	d3ed      	bcc.n	8001324 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4413      	add	r3, r2
 800134e:	3b01      	subs	r3, #1
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	4413      	add	r3, r2
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	3b01      	subs	r3, #1
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	441a      	add	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4413      	add	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	6839      	ldr	r1, [r7, #0]
 8001376:	440a      	add	r2, r1
 8001378:	7812      	ldrb	r2, [r2, #0]
 800137a:	4313      	orrs	r3, r2
 800137c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	3301      	adds	r3, #1
 8001384:	6839      	ldr	r1, [r7, #0]
 8001386:	440b      	add	r3, r1
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	021b      	lsls	r3, r3, #8
 800138c:	4313      	orrs	r3, r2
 800138e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001390:	68ba      	ldr	r2, [r7, #8]
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	3302      	adds	r3, #2
 8001396:	6839      	ldr	r1, [r7, #0]
 8001398:	440b      	add	r3, r1
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	041b      	lsls	r3, r3, #16
 800139e:	4313      	orrs	r3, r2
 80013a0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	3303      	adds	r3, #3
 80013a8:	6839      	ldr	r1, [r7, #0]
 80013aa:	440b      	add	r3, r1
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	061b      	lsls	r3, r3, #24
 80013b0:	4313      	orrs	r3, r2
 80013b2:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80013b4:	68ba      	ldr	r2, [r7, #8]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	3304      	adds	r3, #4
 80013be:	61bb      	str	r3, [r7, #24]
     return offset;
 80013c0:	69bb      	ldr	r3, [r7, #24]
    }
 80013c2:	4618      	mov	r0, r3
 80013c4:	3728      	adds	r7, #40	; 0x28
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	08006cf4 	.word	0x08006cf4

080013e8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	08006d10 	.word	0x08006d10

08001404 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fd34 	bl	8000e7c <_ZN3ros3MsgC1Ev>
 8001414:	4a06      	ldr	r2, [pc, #24]	; (8001430 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	601a      	str	r2, [r3, #0]
      level(0),
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	711a      	strb	r2, [r3, #4]
      msg("")
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a04      	ldr	r2, [pc, #16]	; (8001434 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001424:	609a      	str	r2, [r3, #8]
    {
    }
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4618      	mov	r0, r3
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	08006f80 	.word	0x08006f80
 8001434:	08006cf0 	.word	0x08006cf0

08001438 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	4413      	add	r3, r2
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	7912      	ldrb	r2, [r2, #4]
 8001450:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	3301      	adds	r3, #1
 8001456:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	4618      	mov	r0, r3
 800145e:	f7fe fec5 	bl	80001ec <strlen>
 8001462:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	4413      	add	r3, r2
 800146a:	68b9      	ldr	r1, [r7, #8]
 800146c:	4618      	mov	r0, r3
 800146e:	f001 fbd5 	bl	8002c1c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	3304      	adds	r3, #4
 8001476:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	18d0      	adds	r0, r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	4619      	mov	r1, r3
 8001486:	f005 faef 	bl	8006a68 <memcpy>
      offset += length_msg;
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	4413      	add	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]
      return offset;
 8001492:	68fb      	ldr	r3, [r7, #12]
    }
 8001494:	4618      	mov	r0, r3
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	781a      	ldrb	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	3301      	adds	r3, #1
 80014ba:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	441a      	add	r2, r3
 80014c2:	f107 030c 	add.w	r3, r7, #12
 80014c6:	4611      	mov	r1, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f001 fbc6 	bl	8002c5a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	3304      	adds	r3, #4
 80014d2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	e00b      	b.n	80014f2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	441a      	add	r2, r3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	6839      	ldr	r1, [r7, #0]
 80014e6:	440b      	add	r3, r1
 80014e8:	7812      	ldrb	r2, [r2, #0]
 80014ea:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	3301      	adds	r3, #1
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4413      	add	r3, r2
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d3ed      	bcc.n	80014da <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4413      	add	r3, r2
 8001504:	3b01      	subs	r3, #1
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	4413      	add	r3, r2
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	3b01      	subs	r3, #1
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	441a      	add	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4413      	add	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
     return offset;
 8001522:	693b      	ldr	r3, [r7, #16]
    }
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	08006d34 	.word	0x08006d34

08001548 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	08006d48 	.word	0x08006d48

08001564 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fc84 	bl	8000e7c <_ZN3ros3MsgC1Ev>
 8001574:	4a0c      	ldr	r2, [pc, #48]	; (80015a8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	601a      	str	r2, [r3, #0]
      ints_length(0), ints(NULL),
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
      floats_length(0), floats(NULL),
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	619a      	str	r2, [r3, #24]
      strings_length(0), strings(NULL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	61da      	str	r2, [r3, #28]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	08006f68 	.word	0x08006f68

080015ac <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08a      	sub	sp, #40	; 0x28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6859      	ldr	r1, [r3, #4]
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	b2ca      	uxtb	r2, r1
 80015c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	0a19      	lsrs	r1, r3, #8
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	3301      	adds	r3, #1
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	4413      	add	r3, r2
 80015d6:	b2ca      	uxtb	r2, r1
 80015d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	0c19      	lsrs	r1, r3, #16
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	3302      	adds	r3, #2
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	b2ca      	uxtb	r2, r1
 80015ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	0e19      	lsrs	r1, r3, #24
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	3303      	adds	r3, #3
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	4413      	add	r3, r2
 80015fa:	b2ca      	uxtb	r2, r1
 80015fc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	3304      	adds	r3, #4
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001604:	2300      	movs	r3, #0
 8001606:	623b      	str	r3, [r7, #32]
 8001608:	e02a      	b.n	8001660 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68da      	ldr	r2, [r3, #12]
 800160e:	6a3b      	ldr	r3, [r7, #32]
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001618:	6939      	ldr	r1, [r7, #16]
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	4413      	add	r3, r2
 8001620:	b2ca      	uxtb	r2, r1
 8001622:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	0a19      	lsrs	r1, r3, #8
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	3301      	adds	r3, #1
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	4413      	add	r3, r2
 8001630:	b2ca      	uxtb	r2, r1
 8001632:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	0c19      	lsrs	r1, r3, #16
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	3302      	adds	r3, #2
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	4413      	add	r3, r2
 8001640:	b2ca      	uxtb	r2, r1
 8001642:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	0e19      	lsrs	r1, r3, #24
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	3303      	adds	r3, #3
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	4413      	add	r3, r2
 8001650:	b2ca      	uxtb	r2, r1
 8001652:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	3304      	adds	r3, #4
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800165a:	6a3b      	ldr	r3, [r7, #32]
 800165c:	3301      	adds	r3, #1
 800165e:	623b      	str	r3, [r7, #32]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	6a3a      	ldr	r2, [r7, #32]
 8001666:	429a      	cmp	r2, r3
 8001668:	d3cf      	bcc.n	800160a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6919      	ldr	r1, [r3, #16]
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	4413      	add	r3, r2
 8001674:	b2ca      	uxtb	r2, r1
 8001676:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	0a19      	lsrs	r1, r3, #8
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	3301      	adds	r3, #1
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	4413      	add	r3, r2
 8001686:	b2ca      	uxtb	r2, r1
 8001688:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	0c19      	lsrs	r1, r3, #16
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	3302      	adds	r3, #2
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	4413      	add	r3, r2
 8001698:	b2ca      	uxtb	r2, r1
 800169a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	0e19      	lsrs	r1, r3, #24
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	3303      	adds	r3, #3
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	4413      	add	r3, r2
 80016aa:	b2ca      	uxtb	r2, r1
 80016ac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	3304      	adds	r3, #4
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
 80016b8:	e02a      	b.n	8001710 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699a      	ldr	r2, [r3, #24]
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80016c8:	68f9      	ldr	r1, [r7, #12]
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	b2ca      	uxtb	r2, r1
 80016d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	0a19      	lsrs	r1, r3, #8
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	3301      	adds	r3, #1
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	b2ca      	uxtb	r2, r1
 80016e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	0c19      	lsrs	r1, r3, #16
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	3302      	adds	r3, #2
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	b2ca      	uxtb	r2, r1
 80016f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	0e19      	lsrs	r1, r3, #24
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	3303      	adds	r3, #3
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	b2ca      	uxtb	r2, r1
 8001702:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	3304      	adds	r3, #4
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3301      	adds	r3, #1
 800170e:	61fb      	str	r3, [r7, #28]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	429a      	cmp	r2, r3
 8001718:	d3cf      	bcc.n	80016ba <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69d9      	ldr	r1, [r3, #28]
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	4413      	add	r3, r2
 8001724:	b2ca      	uxtb	r2, r1
 8001726:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	0a19      	lsrs	r1, r3, #8
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	3301      	adds	r3, #1
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	4413      	add	r3, r2
 8001736:	b2ca      	uxtb	r2, r1
 8001738:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	0c19      	lsrs	r1, r3, #16
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	3302      	adds	r3, #2
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	4413      	add	r3, r2
 8001748:	b2ca      	uxtb	r2, r1
 800174a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69db      	ldr	r3, [r3, #28]
 8001750:	0e19      	lsrs	r1, r3, #24
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	3303      	adds	r3, #3
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	4413      	add	r3, r2
 800175a:	b2ca      	uxtb	r2, r1
 800175c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	3304      	adds	r3, #4
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001764:	2300      	movs	r3, #0
 8001766:	61bb      	str	r3, [r7, #24]
 8001768:	e027      	b.n	80017ba <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fd38 	bl	80001ec <strlen>
 800177c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	4413      	add	r3, r2
 8001784:	6979      	ldr	r1, [r7, #20]
 8001786:	4618      	mov	r0, r3
 8001788:	f001 fa48 	bl	8002c1c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	3304      	adds	r3, #4
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	18d0      	adds	r0, r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	4619      	mov	r1, r3
 80017a8:	f005 f95e 	bl	8006a68 <memcpy>
      offset += length_stringsi;
 80017ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	4413      	add	r3, r2
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	3301      	adds	r3, #1
 80017b8:	61bb      	str	r3, [r7, #24]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d3d2      	bcc.n	800176a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80017c6:	4618      	mov	r0, r3
 80017c8:	3728      	adds	r7, #40	; 0x28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b08e      	sub	sp, #56	; 0x38
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80017dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	4413      	add	r3, r2
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80017e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e8:	3301      	adds	r3, #1
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	4413      	add	r3, r2
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	021b      	lsls	r3, r3, #8
 80017f2:	6a3a      	ldr	r2, [r7, #32]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80017f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017fa:	3302      	adds	r3, #2
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	041b      	lsls	r3, r3, #16
 8001804:	6a3a      	ldr	r2, [r7, #32]
 8001806:	4313      	orrs	r3, r2
 8001808:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800180a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800180c:	3303      	adds	r3, #3
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	4413      	add	r3, r2
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	061b      	lsls	r3, r3, #24
 8001816:	6a3a      	ldr	r2, [r7, #32]
 8001818:	4313      	orrs	r3, r2
 800181a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800181c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800181e:	3304      	adds	r3, #4
 8001820:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	6a3a      	ldr	r2, [r7, #32]
 8001828:	429a      	cmp	r2, r3
 800182a:	d90a      	bls.n	8001842 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	6a3b      	ldr	r3, [r7, #32]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4619      	mov	r1, r3
 8001836:	4610      	mov	r0, r2
 8001838:	f005 f8aa 	bl	8006990 <realloc>
 800183c:	4602      	mov	r2, r0
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a3a      	ldr	r2, [r7, #32]
 8001846:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001848:	2300      	movs	r3, #0
 800184a:	633b      	str	r3, [r7, #48]	; 0x30
 800184c:	e035      	b.n	80018ba <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001856:	6839      	ldr	r1, [r7, #0]
 8001858:	440a      	add	r2, r1
 800185a:	7812      	ldrb	r2, [r2, #0]
 800185c:	4313      	orrs	r3, r2
 800185e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001864:	3301      	adds	r3, #1
 8001866:	6839      	ldr	r1, [r7, #0]
 8001868:	440b      	add	r3, r1
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	021b      	lsls	r3, r3, #8
 800186e:	4313      	orrs	r3, r2
 8001870:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001876:	3302      	adds	r3, #2
 8001878:	6839      	ldr	r1, [r7, #0]
 800187a:	440b      	add	r3, r1
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	041b      	lsls	r3, r3, #16
 8001880:	4313      	orrs	r3, r2
 8001882:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001888:	3303      	adds	r3, #3
 800188a:	6839      	ldr	r1, [r7, #0]
 800188c:	440b      	add	r3, r1
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	061b      	lsls	r3, r3, #24
 8001892:	4313      	orrs	r3, r2
 8001894:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800189c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800189e:	3304      	adds	r3, #4
 80018a0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	3208      	adds	r2, #8
 80018b0:	6812      	ldr	r2, [r2, #0]
 80018b2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80018b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b6:	3301      	adds	r3, #1
 80018b8:	633b      	str	r3, [r7, #48]	; 0x30
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d3c4      	bcc.n	800184e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80018c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	4413      	add	r3, r2
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80018ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018d0:	3301      	adds	r3, #1
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	4413      	add	r3, r2
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	021b      	lsls	r3, r3, #8
 80018da:	69fa      	ldr	r2, [r7, #28]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80018e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e2:	3302      	adds	r3, #2
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	4413      	add	r3, r2
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	041b      	lsls	r3, r3, #16
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80018f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f4:	3303      	adds	r3, #3
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	4413      	add	r3, r2
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	061b      	lsls	r3, r3, #24
 80018fe:	69fa      	ldr	r2, [r7, #28]
 8001900:	4313      	orrs	r3, r2
 8001902:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001906:	3304      	adds	r3, #4
 8001908:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	69fa      	ldr	r2, [r7, #28]
 8001910:	429a      	cmp	r2, r3
 8001912:	d90a      	bls.n	800192a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	699a      	ldr	r2, [r3, #24]
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4619      	mov	r1, r3
 800191e:	4610      	mov	r0, r2
 8001920:	f005 f836 	bl	8006990 <realloc>
 8001924:	4602      	mov	r2, r0
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69fa      	ldr	r2, [r7, #28]
 800192e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001930:	2300      	movs	r3, #0
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001934:	e035      	b.n	80019a2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800193e:	6839      	ldr	r1, [r7, #0]
 8001940:	440a      	add	r2, r1
 8001942:	7812      	ldrb	r2, [r2, #0]
 8001944:	4313      	orrs	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800194c:	3301      	adds	r3, #1
 800194e:	6839      	ldr	r1, [r7, #0]
 8001950:	440b      	add	r3, r1
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	021b      	lsls	r3, r3, #8
 8001956:	4313      	orrs	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800195e:	3302      	adds	r3, #2
 8001960:	6839      	ldr	r1, [r7, #0]
 8001962:	440b      	add	r3, r1
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	041b      	lsls	r3, r3, #16
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001970:	3303      	adds	r3, #3
 8001972:	6839      	ldr	r1, [r7, #0]
 8001974:	440b      	add	r3, r1
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	061b      	lsls	r3, r3, #24
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001986:	3304      	adds	r3, #4
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	699a      	ldr	r2, [r3, #24]
 800198e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	3214      	adds	r2, #20
 8001998:	6812      	ldr	r2, [r2, #0]
 800199a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800199c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800199e:	3301      	adds	r3, #1
 80019a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d3c4      	bcc.n	8001936 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80019ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	4413      	add	r3, r2
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80019b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b8:	3301      	adds	r3, #1
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	4413      	add	r3, r2
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80019c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ca:	3302      	adds	r3, #2
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	4413      	add	r3, r2
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	041b      	lsls	r3, r3, #16
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80019da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019dc:	3303      	adds	r3, #3
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	4413      	add	r3, r2
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	061b      	lsls	r3, r3, #24
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80019ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ee:	3304      	adds	r3, #4
 80019f0:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d90a      	bls.n	8001a12 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4619      	mov	r1, r3
 8001a06:	4610      	mov	r0, r2
 8001a08:	f004 ffc2 	bl	8006990 <realloc>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001a18:	2300      	movs	r3, #0
 8001a1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a1c:	e03e      	b.n	8001a9c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	441a      	add	r2, r3
 8001a24:	f107 030c 	add.w	r3, r7, #12
 8001a28:	4611      	mov	r1, r2
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f001 f915 	bl	8002c5a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a32:	3304      	adds	r3, #4
 8001a34:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3a:	e00b      	b.n	8001a54 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	441a      	add	r2, r3
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	3b01      	subs	r3, #1
 8001a46:	6839      	ldr	r1, [r7, #0]
 8001a48:	440b      	add	r3, r1
 8001a4a:	7812      	ldrb	r2, [r2, #0]
 8001a4c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	3301      	adds	r3, #1
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
 8001a54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4413      	add	r3, r2
 8001a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d3ed      	bcc.n	8001a3c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001a60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4413      	add	r3, r2
 8001a66:	3b01      	subs	r3, #1
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a72:	3b01      	subs	r3, #1
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	441a      	add	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001a7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4413      	add	r3, r2
 8001a82:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	3220      	adds	r2, #32
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a98:	3301      	adds	r3, #1
 8001a9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d3bb      	bcc.n	8001a1e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8001aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3738      	adds	r7, #56	; 0x38
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001aba:	4618      	mov	r0, r3
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	08006ea4 	.word	0x08006ea4

08001acc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	08006d6c 	.word	0x08006d6c

08001ae8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	611a      	str	r2, [r3, #16]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
  }
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){ //change
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <_ZN13STM32HardwareC1Ev+0x34>)
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	200002ec 	.word	0x200002ec

08001b8c <_ZN13STM32Hardware4readEv>:

    void reset_rbuf(void){
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
    }

    int read(){
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001b94:	f04f 33ff 	mov.w	r3, #4294967295
 8001b98:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff ffc4 	bl	8001b2e <_ZN13STM32Hardware10getRdmaIndEv>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	429c      	cmp	r4, r3
 8001baa:	bf14      	ite	ne
 8001bac:	2301      	movne	r3, #1
 8001bae:	2300      	moveq	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d012      	beq.n	8001bdc <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001bbc:	1c59      	adds	r1, r3, #1
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	791b      	ldrb	r3, [r3, #4]
 8001bca:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001bd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
    }
 8001bde:	4618      	mov	r0, r3
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd90      	pop	{r4, r7, pc}
	...

08001be8 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b20      	cmp	r3, #32
 8001bfc:	d108      	bne.n	8001c10 <_ZN13STM32Hardware5flushEv+0x28>
 8001bfe:	4b28      	ldr	r3, [pc, #160]	; (8001ca0 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	f083 0301 	eor.w	r3, r3, #1
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <_ZN13STM32Hardware5flushEv+0x28>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <_ZN13STM32Hardware5flushEv+0x2a>
 8001c10:	2300      	movs	r3, #0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d03f      	beq.n	8001c96 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8001c16:	4b22      	ldr	r3, [pc, #136]	; (8001ca0 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d031      	beq.n	8001c90 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d20a      	bcs.n	8001c52 <_ZN13STM32Hardware5flushEv+0x6a>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	e006      	b.n	8001c60 <_ZN13STM32Hardware5flushEv+0x78>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001c6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	4413      	add	r3, r2
 8001c74:	89fa      	ldrh	r2, [r7, #14]
 8001c76:	4619      	mov	r1, r3
 8001c78:	f003 ff48 	bl	8005b0c <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001c82:	89fb      	ldrh	r3, [r7, #14]
 8001c84:	4413      	add	r3, r2
 8001c86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <_ZN13STM32Hardware5flushEv+0xb8>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	701a      	strb	r2, [r3, #0]
      }
    }
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	2000084c 	.word	0x2000084c

08001ca4 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
      int n = length;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cba:	bfa8      	it	ge
 8001cbc:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001cc0:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001cc8:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	bf28      	it	cs
 8001cd2:	4613      	movcs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001cdc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	68b9      	ldr	r1, [r7, #8]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f004 febd 	bl	8006a68 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d00b      	beq.n	8001d22 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	18d1      	adds	r1, r2, r3
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	f004 fea3 	bl	8006a68 <memcpy>
      }

      flush();
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f7ff ff60 	bl	8001be8 <_ZN13STM32Hardware5flushEv>
    }
 8001d28:	bf00      	nop
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	f001 fdae 	bl	8003898 <HAL_GetTick>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff f892 	bl	8000e7c <_ZN3ros3MsgC1Ev>
 8001d58:	4a0e      	ldr	r2, [pc, #56]	; (8001d94 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	601a      	str	r2, [r3, #0]
      x(0),
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	f04f 0300 	mov.w	r3, #0
 8001d76:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	08006f24 	.word	0x08006f24

08001d98 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001d98:	b480      	push	{r7}
 8001d9a:	b08b      	sub	sp, #44	; 0x2c
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001dac:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8001db0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001db4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001db6:	6838      	ldr	r0, [r7, #0]
 8001db8:	4401      	add	r1, r0
 8001dba:	b2d3      	uxtb	r3, r2
 8001dbc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8001dbe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	0a02      	lsrs	r2, r0, #8
 8001dcc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001dd0:	0a0b      	lsrs	r3, r1, #8
 8001dd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dd4:	3101      	adds	r1, #1
 8001dd6:	6838      	ldr	r0, [r7, #0]
 8001dd8:	4401      	add	r1, r0
 8001dda:	b2d3      	uxtb	r3, r2
 8001ddc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8001dde:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	f04f 0300 	mov.w	r3, #0
 8001dea:	0c02      	lsrs	r2, r0, #16
 8001dec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001df0:	0c0b      	lsrs	r3, r1, #16
 8001df2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001df4:	3102      	adds	r1, #2
 8001df6:	6838      	ldr	r0, [r7, #0]
 8001df8:	4401      	add	r1, r0
 8001dfa:	b2d3      	uxtb	r3, r2
 8001dfc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8001dfe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	0e02      	lsrs	r2, r0, #24
 8001e0c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e10:	0e0b      	lsrs	r3, r1, #24
 8001e12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e14:	3103      	adds	r1, #3
 8001e16:	6838      	ldr	r0, [r7, #0]
 8001e18:	4401      	add	r1, r0
 8001e1a:	b2d3      	uxtb	r3, r2
 8001e1c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8001e1e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	f04f 0300 	mov.w	r3, #0
 8001e2a:	000a      	movs	r2, r1
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e30:	3104      	adds	r1, #4
 8001e32:	6838      	ldr	r0, [r7, #0]
 8001e34:	4401      	add	r1, r0
 8001e36:	b2d3      	uxtb	r3, r2
 8001e38:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8001e3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	0a0a      	lsrs	r2, r1, #8
 8001e48:	2300      	movs	r3, #0
 8001e4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e4c:	3105      	adds	r1, #5
 8001e4e:	6838      	ldr	r0, [r7, #0]
 8001e50:	4401      	add	r1, r0
 8001e52:	b2d3      	uxtb	r3, r2
 8001e54:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8001e56:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	f04f 0300 	mov.w	r3, #0
 8001e62:	0c0a      	lsrs	r2, r1, #16
 8001e64:	2300      	movs	r3, #0
 8001e66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e68:	3106      	adds	r1, #6
 8001e6a:	6838      	ldr	r0, [r7, #0]
 8001e6c:	4401      	add	r1, r0
 8001e6e:	b2d3      	uxtb	r3, r2
 8001e70:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8001e72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	0e0a      	lsrs	r2, r1, #24
 8001e80:	2300      	movs	r3, #0
 8001e82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e84:	3107      	adds	r1, #7
 8001e86:	6838      	ldr	r0, [r7, #0]
 8001e88:	4401      	add	r1, r0
 8001e8a:	b2d3      	uxtb	r3, r2
 8001e8c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	3308      	adds	r3, #8
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e9a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8001e9e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ea2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ea4:	6838      	ldr	r0, [r7, #0]
 8001ea6:	4401      	add	r1, r0
 8001ea8:	b2d3      	uxtb	r3, r2
 8001eaa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8001eac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	f04f 0300 	mov.w	r3, #0
 8001eb8:	0a02      	lsrs	r2, r0, #8
 8001eba:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001ebe:	0a0b      	lsrs	r3, r1, #8
 8001ec0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ec2:	3101      	adds	r1, #1
 8001ec4:	6838      	ldr	r0, [r7, #0]
 8001ec6:	4401      	add	r1, r0
 8001ec8:	b2d3      	uxtb	r3, r2
 8001eca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8001ecc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	f04f 0300 	mov.w	r3, #0
 8001ed8:	0c02      	lsrs	r2, r0, #16
 8001eda:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001ede:	0c0b      	lsrs	r3, r1, #16
 8001ee0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ee2:	3102      	adds	r1, #2
 8001ee4:	6838      	ldr	r0, [r7, #0]
 8001ee6:	4401      	add	r1, r0
 8001ee8:	b2d3      	uxtb	r3, r2
 8001eea:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8001eec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	0e02      	lsrs	r2, r0, #24
 8001efa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001efe:	0e0b      	lsrs	r3, r1, #24
 8001f00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f02:	3103      	adds	r1, #3
 8001f04:	6838      	ldr	r0, [r7, #0]
 8001f06:	4401      	add	r1, r0
 8001f08:	b2d3      	uxtb	r3, r2
 8001f0a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8001f0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	f04f 0300 	mov.w	r3, #0
 8001f18:	000a      	movs	r2, r1
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f1e:	3104      	adds	r1, #4
 8001f20:	6838      	ldr	r0, [r7, #0]
 8001f22:	4401      	add	r1, r0
 8001f24:	b2d3      	uxtb	r3, r2
 8001f26:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8001f28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	f04f 0300 	mov.w	r3, #0
 8001f34:	0a0a      	lsrs	r2, r1, #8
 8001f36:	2300      	movs	r3, #0
 8001f38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f3a:	3105      	adds	r1, #5
 8001f3c:	6838      	ldr	r0, [r7, #0]
 8001f3e:	4401      	add	r1, r0
 8001f40:	b2d3      	uxtb	r3, r2
 8001f42:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8001f44:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	f04f 0300 	mov.w	r3, #0
 8001f50:	0c0a      	lsrs	r2, r1, #16
 8001f52:	2300      	movs	r3, #0
 8001f54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f56:	3106      	adds	r1, #6
 8001f58:	6838      	ldr	r0, [r7, #0]
 8001f5a:	4401      	add	r1, r0
 8001f5c:	b2d3      	uxtb	r3, r2
 8001f5e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8001f60:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	0e0a      	lsrs	r2, r1, #24
 8001f6e:	2300      	movs	r3, #0
 8001f70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f72:	3107      	adds	r1, #7
 8001f74:	6838      	ldr	r0, [r7, #0]
 8001f76:	4401      	add	r1, r0
 8001f78:	b2d3      	uxtb	r3, r2
 8001f7a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	3308      	adds	r3, #8
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001f88:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8001f8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f92:	6838      	ldr	r0, [r7, #0]
 8001f94:	4401      	add	r1, r0
 8001f96:	b2d3      	uxtb	r3, r2
 8001f98:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8001f9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	f04f 0300 	mov.w	r3, #0
 8001fa6:	0a02      	lsrs	r2, r0, #8
 8001fa8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001fac:	0a0b      	lsrs	r3, r1, #8
 8001fae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fb0:	3101      	adds	r1, #1
 8001fb2:	6838      	ldr	r0, [r7, #0]
 8001fb4:	4401      	add	r1, r0
 8001fb6:	b2d3      	uxtb	r3, r2
 8001fb8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8001fba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	f04f 0300 	mov.w	r3, #0
 8001fc6:	0c02      	lsrs	r2, r0, #16
 8001fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001fcc:	0c0b      	lsrs	r3, r1, #16
 8001fce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fd0:	3102      	adds	r1, #2
 8001fd2:	6838      	ldr	r0, [r7, #0]
 8001fd4:	4401      	add	r1, r0
 8001fd6:	b2d3      	uxtb	r3, r2
 8001fd8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8001fda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	f04f 0300 	mov.w	r3, #0
 8001fe6:	0e02      	lsrs	r2, r0, #24
 8001fe8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001fec:	0e0b      	lsrs	r3, r1, #24
 8001fee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ff0:	3103      	adds	r1, #3
 8001ff2:	6838      	ldr	r0, [r7, #0]
 8001ff4:	4401      	add	r1, r0
 8001ff6:	b2d3      	uxtb	r3, r2
 8001ff8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8001ffa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ffe:	f04f 0200 	mov.w	r2, #0
 8002002:	f04f 0300 	mov.w	r3, #0
 8002006:	000a      	movs	r2, r1
 8002008:	2300      	movs	r3, #0
 800200a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800200c:	3104      	adds	r1, #4
 800200e:	6838      	ldr	r0, [r7, #0]
 8002010:	4401      	add	r1, r0
 8002012:	b2d3      	uxtb	r3, r2
 8002014:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002016:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	f04f 0300 	mov.w	r3, #0
 8002022:	0a0a      	lsrs	r2, r1, #8
 8002024:	2300      	movs	r3, #0
 8002026:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002028:	3105      	adds	r1, #5
 800202a:	6838      	ldr	r0, [r7, #0]
 800202c:	4401      	add	r1, r0
 800202e:	b2d3      	uxtb	r3, r2
 8002030:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002032:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	f04f 0300 	mov.w	r3, #0
 800203e:	0c0a      	lsrs	r2, r1, #16
 8002040:	2300      	movs	r3, #0
 8002042:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002044:	3106      	adds	r1, #6
 8002046:	6838      	ldr	r0, [r7, #0]
 8002048:	4401      	add	r1, r0
 800204a:	b2d3      	uxtb	r3, r2
 800204c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800204e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	0e0a      	lsrs	r2, r1, #24
 800205c:	2300      	movs	r3, #0
 800205e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002060:	3107      	adds	r1, #7
 8002062:	6838      	ldr	r0, [r7, #0]
 8002064:	4401      	add	r1, r0
 8002066:	b2d3      	uxtb	r3, r2
 8002068:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	3308      	adds	r3, #8
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002072:	4618      	mov	r0, r3
 8002074:	372c      	adds	r7, #44	; 0x2c
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800207e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002082:	b0eb      	sub	sp, #428	; 0x1ac
 8002084:	af00      	add	r7, sp, #0
 8002086:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800208a:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80020a0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80020a4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80020a8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020ac:	4413      	add	r3, r2
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2200      	movs	r2, #0
 80020b4:	461c      	mov	r4, r3
 80020b6:	4615      	mov	r5, r2
 80020b8:	ea40 0804 	orr.w	r8, r0, r4
 80020bc:	ea41 0905 	orr.w	r9, r1, r5
 80020c0:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80020c4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80020c8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80020cc:	1c5a      	adds	r2, r3, #1
 80020ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80020d2:	4413      	add	r3, r2
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2200      	movs	r2, #0
 80020da:	469a      	mov	sl, r3
 80020dc:	4693      	mov	fp, r2
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80020ea:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80020ee:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80020f2:	ea40 0402 	orr.w	r4, r0, r2
 80020f6:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 80020fa:	430b      	orrs	r3, r1
 80020fc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002100:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002104:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002108:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800210c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002110:	1c9a      	adds	r2, r3, #2
 8002112:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002116:	4413      	add	r3, r2
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2200      	movs	r2, #0
 800211e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002122:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	f04f 0300 	mov.w	r3, #0
 800212e:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002132:	464c      	mov	r4, r9
 8002134:	0423      	lsls	r3, r4, #16
 8002136:	4644      	mov	r4, r8
 8002138:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800213c:	4644      	mov	r4, r8
 800213e:	0422      	lsls	r2, r4, #16
 8002140:	ea40 0402 	orr.w	r4, r0, r2
 8002144:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002148:	430b      	orrs	r3, r1
 800214a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800214e:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002152:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002156:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800215a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800215e:	1cda      	adds	r2, r3, #3
 8002160:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002164:	4413      	add	r3, r2
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2200      	movs	r2, #0
 800216c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002170:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002174:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002178:	4623      	mov	r3, r4
 800217a:	0a1b      	lsrs	r3, r3, #8
 800217c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002180:	4623      	mov	r3, r4
 8002182:	061b      	lsls	r3, r3, #24
 8002184:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002188:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 800218c:	4623      	mov	r3, r4
 800218e:	4303      	orrs	r3, r0
 8002190:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002194:	462b      	mov	r3, r5
 8002196:	430b      	orrs	r3, r1
 8002198:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800219c:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80021a0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80021a4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80021a8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80021ac:	1d1a      	adds	r2, r3, #4
 80021ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80021b2:	4413      	add	r3, r2
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2200      	movs	r2, #0
 80021ba:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80021be:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	f04f 0300 	mov.w	r3, #0
 80021ca:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80021ce:	0023      	movs	r3, r4
 80021d0:	2200      	movs	r2, #0
 80021d2:	ea40 0402 	orr.w	r4, r0, r2
 80021d6:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80021da:	430b      	orrs	r3, r1
 80021dc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80021e0:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80021e4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80021e8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80021ec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80021f0:	1d5a      	adds	r2, r3, #5
 80021f2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80021f6:	4413      	add	r3, r2
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2200      	movs	r2, #0
 80021fe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002202:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	f04f 0300 	mov.w	r3, #0
 800220e:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8002212:	0223      	lsls	r3, r4, #8
 8002214:	2200      	movs	r2, #0
 8002216:	ea40 0402 	orr.w	r4, r0, r2
 800221a:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800221e:	430b      	orrs	r3, r1
 8002220:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002224:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002228:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800222c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002230:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002234:	1d9a      	adds	r2, r3, #6
 8002236:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800223a:	4413      	add	r3, r2
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2200      	movs	r2, #0
 8002242:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002246:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002256:	0423      	lsls	r3, r4, #16
 8002258:	2200      	movs	r2, #0
 800225a:	ea40 0402 	orr.w	r4, r0, r2
 800225e:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002262:	430b      	orrs	r3, r1
 8002264:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002268:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800226c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002270:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002274:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002278:	1dda      	adds	r2, r3, #7
 800227a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800227e:	4413      	add	r3, r2
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2200      	movs	r2, #0
 8002286:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800228a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800229a:	0623      	lsls	r3, r4, #24
 800229c:	2200      	movs	r2, #0
 800229e:	ea40 0402 	orr.w	r4, r0, r2
 80022a2:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80022a6:	430b      	orrs	r3, r1
 80022a8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80022ac:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80022b0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 80022b4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80022b8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80022bc:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80022c0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80022c4:	3308      	adds	r3, #8
 80022c6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80022d6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80022da:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80022de:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80022e2:	4413      	add	r3, r2
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2200      	movs	r2, #0
 80022ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80022ee:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80022f2:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80022f6:	4623      	mov	r3, r4
 80022f8:	4303      	orrs	r3, r0
 80022fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80022fe:	462b      	mov	r3, r5
 8002300:	430b      	orrs	r3, r1
 8002302:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002306:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800230a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800230e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002312:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800231c:	4413      	add	r3, r2
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2200      	movs	r2, #0
 8002324:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002328:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002338:	464c      	mov	r4, r9
 800233a:	0223      	lsls	r3, r4, #8
 800233c:	4644      	mov	r4, r8
 800233e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002342:	4644      	mov	r4, r8
 8002344:	0222      	lsls	r2, r4, #8
 8002346:	ea40 0402 	orr.w	r4, r0, r2
 800234a:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800234e:	430b      	orrs	r3, r1
 8002350:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002354:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002358:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800235c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002360:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002364:	1c9a      	adds	r2, r3, #2
 8002366:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800236a:	4413      	add	r3, r2
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2200      	movs	r2, #0
 8002372:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002376:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	f04f 0300 	mov.w	r3, #0
 8002382:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002386:	464c      	mov	r4, r9
 8002388:	0423      	lsls	r3, r4, #16
 800238a:	4644      	mov	r4, r8
 800238c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002390:	4644      	mov	r4, r8
 8002392:	0422      	lsls	r2, r4, #16
 8002394:	ea40 0402 	orr.w	r4, r0, r2
 8002398:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 800239c:	430b      	orrs	r3, r1
 800239e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80023a2:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80023a6:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80023aa:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80023ae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80023b2:	1cda      	adds	r2, r3, #3
 80023b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80023b8:	4413      	add	r3, r2
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2200      	movs	r2, #0
 80023c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80023c4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80023c8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80023cc:	4623      	mov	r3, r4
 80023ce:	0a1b      	lsrs	r3, r3, #8
 80023d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80023d4:	4623      	mov	r3, r4
 80023d6:	061b      	lsls	r3, r3, #24
 80023d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80023dc:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80023e0:	4623      	mov	r3, r4
 80023e2:	4303      	orrs	r3, r0
 80023e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80023e8:	462b      	mov	r3, r5
 80023ea:	430b      	orrs	r3, r1
 80023ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80023f0:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80023f4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80023f8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80023fc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002400:	1d1a      	adds	r2, r3, #4
 8002402:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002406:	4413      	add	r3, r2
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2200      	movs	r2, #0
 800240e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002412:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002422:	0023      	movs	r3, r4
 8002424:	2200      	movs	r2, #0
 8002426:	ea40 0402 	orr.w	r4, r0, r2
 800242a:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800242e:	430b      	orrs	r3, r1
 8002430:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002434:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002438:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800243c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002440:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002444:	1d5a      	adds	r2, r3, #5
 8002446:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800244a:	4413      	add	r3, r2
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2200      	movs	r2, #0
 8002452:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002456:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800245a:	f04f 0200 	mov.w	r2, #0
 800245e:	f04f 0300 	mov.w	r3, #0
 8002462:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002466:	0223      	lsls	r3, r4, #8
 8002468:	2200      	movs	r2, #0
 800246a:	ea40 0402 	orr.w	r4, r0, r2
 800246e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002472:	430b      	orrs	r3, r1
 8002474:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002478:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800247c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002480:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002484:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002488:	1d9a      	adds	r2, r3, #6
 800248a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800248e:	4413      	add	r3, r2
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2200      	movs	r2, #0
 8002496:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800249a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80024aa:	0423      	lsls	r3, r4, #16
 80024ac:	2200      	movs	r2, #0
 80024ae:	ea40 0402 	orr.w	r4, r0, r2
 80024b2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80024b6:	430b      	orrs	r3, r1
 80024b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80024bc:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80024c0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80024c4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80024c8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80024cc:	1dda      	adds	r2, r3, #7
 80024ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80024d2:	4413      	add	r3, r2
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2200      	movs	r2, #0
 80024da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80024de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 80024ee:	0623      	lsls	r3, r4, #24
 80024f0:	2200      	movs	r2, #0
 80024f2:	ea40 0402 	orr.w	r4, r0, r2
 80024f6:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80024fa:	430b      	orrs	r3, r1
 80024fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002500:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002504:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002508:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800250c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002510:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002514:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002518:	3308      	adds	r3, #8
 800251a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 800251e:	f04f 0200 	mov.w	r2, #0
 8002522:	f04f 0300 	mov.w	r3, #0
 8002526:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800252a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800252e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002532:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002536:	4413      	add	r3, r2
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2200      	movs	r2, #0
 800253e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002542:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002546:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800254a:	4623      	mov	r3, r4
 800254c:	4303      	orrs	r3, r0
 800254e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002550:	462b      	mov	r3, r5
 8002552:	430b      	orrs	r3, r1
 8002554:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002556:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800255a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800255e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002562:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800256c:	4413      	add	r3, r2
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2200      	movs	r2, #0
 8002574:	673b      	str	r3, [r7, #112]	; 0x70
 8002576:	677a      	str	r2, [r7, #116]	; 0x74
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002584:	464c      	mov	r4, r9
 8002586:	0223      	lsls	r3, r4, #8
 8002588:	4644      	mov	r4, r8
 800258a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800258e:	4644      	mov	r4, r8
 8002590:	0222      	lsls	r2, r4, #8
 8002592:	ea40 0402 	orr.w	r4, r0, r2
 8002596:	66bc      	str	r4, [r7, #104]	; 0x68
 8002598:	430b      	orrs	r3, r1
 800259a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800259c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80025a0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80025a4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80025a8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025ac:	1c9a      	adds	r2, r3, #2
 80025ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025b2:	4413      	add	r3, r2
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2200      	movs	r2, #0
 80025ba:	663b      	str	r3, [r7, #96]	; 0x60
 80025bc:	667a      	str	r2, [r7, #100]	; 0x64
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80025ca:	464c      	mov	r4, r9
 80025cc:	0423      	lsls	r3, r4, #16
 80025ce:	4644      	mov	r4, r8
 80025d0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80025d4:	4644      	mov	r4, r8
 80025d6:	0422      	lsls	r2, r4, #16
 80025d8:	ea40 0402 	orr.w	r4, r0, r2
 80025dc:	65bc      	str	r4, [r7, #88]	; 0x58
 80025de:	430b      	orrs	r3, r1
 80025e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025e2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80025e6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80025ea:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80025ee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025f2:	1cda      	adds	r2, r3, #3
 80025f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025f8:	4413      	add	r3, r2
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2200      	movs	r2, #0
 8002600:	653b      	str	r3, [r7, #80]	; 0x50
 8002602:	657a      	str	r2, [r7, #84]	; 0x54
 8002604:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002608:	4623      	mov	r3, r4
 800260a:	0a1b      	lsrs	r3, r3, #8
 800260c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800260e:	4623      	mov	r3, r4
 8002610:	061b      	lsls	r3, r3, #24
 8002612:	64bb      	str	r3, [r7, #72]	; 0x48
 8002614:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002618:	4623      	mov	r3, r4
 800261a:	4303      	orrs	r3, r0
 800261c:	643b      	str	r3, [r7, #64]	; 0x40
 800261e:	462b      	mov	r3, r5
 8002620:	430b      	orrs	r3, r1
 8002622:	647b      	str	r3, [r7, #68]	; 0x44
 8002624:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002628:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800262c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002630:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002634:	1d1a      	adds	r2, r3, #4
 8002636:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800263a:	4413      	add	r3, r2
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2200      	movs	r2, #0
 8002642:	63bb      	str	r3, [r7, #56]	; 0x38
 8002644:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002650:	0023      	movs	r3, r4
 8002652:	2200      	movs	r2, #0
 8002654:	ea40 0402 	orr.w	r4, r0, r2
 8002658:	633c      	str	r4, [r7, #48]	; 0x30
 800265a:	430b      	orrs	r3, r1
 800265c:	637b      	str	r3, [r7, #52]	; 0x34
 800265e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002662:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002666:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800266a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800266e:	1d5a      	adds	r2, r3, #5
 8002670:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002674:	4413      	add	r3, r2
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2200      	movs	r2, #0
 800267c:	62bb      	str	r3, [r7, #40]	; 0x28
 800267e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	f04f 0300 	mov.w	r3, #0
 8002688:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800268a:	0223      	lsls	r3, r4, #8
 800268c:	2200      	movs	r2, #0
 800268e:	ea40 0402 	orr.w	r4, r0, r2
 8002692:	623c      	str	r4, [r7, #32]
 8002694:	430b      	orrs	r3, r1
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
 8002698:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800269c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80026a0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80026a4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026a8:	3306      	adds	r3, #6
 80026aa:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80026ae:	4413      	add	r3, r2
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2200      	movs	r2, #0
 80026b6:	61bb      	str	r3, [r7, #24]
 80026b8:	61fa      	str	r2, [r7, #28]
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	69bc      	ldr	r4, [r7, #24]
 80026c4:	0423      	lsls	r3, r4, #16
 80026c6:	2200      	movs	r2, #0
 80026c8:	ea40 0402 	orr.w	r4, r0, r2
 80026cc:	613c      	str	r4, [r7, #16]
 80026ce:	430b      	orrs	r3, r1
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80026d6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80026da:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80026de:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026e2:	3307      	adds	r3, #7
 80026e4:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80026e8:	4413      	add	r3, r2
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2200      	movs	r2, #0
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	60fa      	str	r2, [r7, #12]
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	68bc      	ldr	r4, [r7, #8]
 80026fe:	0623      	lsls	r3, r4, #24
 8002700:	2200      	movs	r2, #0
 8002702:	ea40 0402 	orr.w	r4, r0, r2
 8002706:	603c      	str	r4, [r7, #0]
 8002708:	430b      	orrs	r3, r1
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002710:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002714:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002718:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 800271c:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002720:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002724:	3308      	adds	r3, #8
 8002726:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 800272a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 800272e:	4618      	mov	r0, r3
 8002730:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002734:	46bd      	mov	sp, r7
 8002736:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800273a:	4770      	bx	lr

0800273c <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	4b03      	ldr	r3, [pc, #12]	; (8002754 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	08006d90 	.word	0x08006d90

08002758 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	4b03      	ldr	r3, [pc, #12]	; (8002770 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8002762:	4618      	mov	r0, r3
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	08006da8 	.word	0x08006da8

08002774 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fb7c 	bl	8000e7c <_ZN3ros3MsgC1Ev>
 8002784:	4a08      	ldr	r2, [pc, #32]	; (80027a8 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	601a      	str	r2, [r3, #0]
      linear(),
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3308      	adds	r3, #8
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff fada 	bl	8001d48 <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3328      	adds	r3, #40	; 0x28
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fad5 	bl	8001d48 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4618      	mov	r0, r3
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	08006f0c 	.word	0x08006f0c

080027ac <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f103 0008 	add.w	r0, r3, #8
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	4413      	add	r3, r2
 80027c6:	4619      	mov	r1, r3
 80027c8:	f7ff fae6 	bl	8001d98 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4413      	add	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	4413      	add	r3, r2
 80027e0:	4619      	mov	r1, r3
 80027e2:	f7ff fad9 	bl	8001d98 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80027e6:	4602      	mov	r2, r0
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4413      	add	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]
      return offset;
 80027ee:	68fb      	ldr	r3, [r7, #12]
    }
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f103 0008 	add.w	r0, r3, #8
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	4413      	add	r3, r2
 8002812:	4619      	mov	r1, r3
 8002814:	f7ff fc33 	bl	800207e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002818:	4602      	mov	r2, r0
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4413      	add	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	4413      	add	r3, r2
 800282c:	4619      	mov	r1, r3
 800282e:	f7ff fc26 	bl	800207e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002832:	4602      	mov	r2, r0
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4413      	add	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
     return offset;
 800283a:	68fb      	ldr	r3, [r7, #12]
    }
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	4b03      	ldr	r3, [pc, #12]	; (800285c <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	08006dcc 	.word	0x08006dcc

08002860 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	4b03      	ldr	r3, [pc, #12]	; (8002878 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	08006de0 	.word	0x08006de0

0800287c <_ZN8std_msgs5Int64C1Ev>:
  {
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
      data(0)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4618      	mov	r0, r3
 8002888:	f7fe faf8 	bl	8000e7c <_ZN3ros3MsgC1Ev>
 800288c:	4a07      	ldr	r2, [pc, #28]	; (80028ac <_ZN8std_msgs5Int64C1Ev+0x30>)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	08006ef4 	.word	0x08006ef4

080028b0 <_ZNK8std_msgs5Int649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80028c4:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80028c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028cc:	6979      	ldr	r1, [r7, #20]
 80028ce:	6838      	ldr	r0, [r7, #0]
 80028d0:	4401      	add	r1, r0
 80028d2:	b2d3      	uxtb	r3, r2
 80028d4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80028d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	0a02      	lsrs	r2, r0, #8
 80028e4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80028e8:	0a0b      	lsrs	r3, r1, #8
 80028ea:	6979      	ldr	r1, [r7, #20]
 80028ec:	3101      	adds	r1, #1
 80028ee:	6838      	ldr	r0, [r7, #0]
 80028f0:	4401      	add	r1, r0
 80028f2:	b2d3      	uxtb	r3, r2
 80028f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 80028f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	f04f 0300 	mov.w	r3, #0
 8002902:	0c02      	lsrs	r2, r0, #16
 8002904:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002908:	0c0b      	lsrs	r3, r1, #16
 800290a:	6979      	ldr	r1, [r7, #20]
 800290c:	3102      	adds	r1, #2
 800290e:	6838      	ldr	r0, [r7, #0]
 8002910:	4401      	add	r1, r0
 8002912:	b2d3      	uxtb	r3, r2
 8002914:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8002916:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	0e02      	lsrs	r2, r0, #24
 8002924:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002928:	0e0b      	lsrs	r3, r1, #24
 800292a:	6979      	ldr	r1, [r7, #20]
 800292c:	3103      	adds	r1, #3
 800292e:	6838      	ldr	r0, [r7, #0]
 8002930:	4401      	add	r1, r0
 8002932:	b2d3      	uxtb	r3, r2
 8002934:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 8002936:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	f04f 0300 	mov.w	r3, #0
 8002942:	000a      	movs	r2, r1
 8002944:	2300      	movs	r3, #0
 8002946:	6979      	ldr	r1, [r7, #20]
 8002948:	3104      	adds	r1, #4
 800294a:	6838      	ldr	r0, [r7, #0]
 800294c:	4401      	add	r1, r0
 800294e:	b2d3      	uxtb	r3, r2
 8002950:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 8002952:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	0a0a      	lsrs	r2, r1, #8
 8002960:	2300      	movs	r3, #0
 8002962:	6979      	ldr	r1, [r7, #20]
 8002964:	3105      	adds	r1, #5
 8002966:	6838      	ldr	r0, [r7, #0]
 8002968:	4401      	add	r1, r0
 800296a:	b2d3      	uxtb	r3, r2
 800296c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 800296e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	f04f 0300 	mov.w	r3, #0
 800297a:	0c0a      	lsrs	r2, r1, #16
 800297c:	2300      	movs	r3, #0
 800297e:	6979      	ldr	r1, [r7, #20]
 8002980:	3106      	adds	r1, #6
 8002982:	6838      	ldr	r0, [r7, #0]
 8002984:	4401      	add	r1, r0
 8002986:	b2d3      	uxtb	r3, r2
 8002988:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 800298a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	0e0a      	lsrs	r2, r1, #24
 8002998:	2300      	movs	r3, #0
 800299a:	6979      	ldr	r1, [r7, #20]
 800299c:	3107      	adds	r1, #7
 800299e:	6838      	ldr	r0, [r7, #0]
 80029a0:	4401      	add	r1, r0
 80029a2:	b2d3      	uxtb	r3, r2
 80029a4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	3308      	adds	r3, #8
 80029aa:	617b      	str	r3, [r7, #20]
      return offset;
 80029ac:	697b      	ldr	r3, [r7, #20]
    }
 80029ae:	4618      	mov	r0, r3
 80029b0:	371c      	adds	r7, #28
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <_ZN8std_msgs5Int6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80029ba:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80029be:	b0a3      	sub	sp, #140	; 0x8c
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6778      	str	r0, [r7, #116]	; 0x74
 80029c4:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80029d8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80029dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80029e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029e2:	4413      	add	r3, r2
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2200      	movs	r2, #0
 80029ea:	461c      	mov	r4, r3
 80029ec:	4615      	mov	r5, r2
 80029ee:	ea40 0804 	orr.w	r8, r0, r4
 80029f2:	ea41 0905 	orr.w	r9, r1, r5
 80029f6:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80029fa:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80029fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a02:	1c5a      	adds	r2, r3, #1
 8002a04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a06:	4413      	add	r3, r2
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	469a      	mov	sl, r3
 8002a10:	4693      	mov	fp, r2
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002a1e:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002a22:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002a26:	ea40 0402 	orr.w	r4, r0, r2
 8002a2a:	66bc      	str	r4, [r7, #104]	; 0x68
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a30:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002a34:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a38:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002a3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a40:	1c9a      	adds	r2, r3, #2
 8002a42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a44:	4413      	add	r3, r2
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	663b      	str	r3, [r7, #96]	; 0x60
 8002a4e:	667a      	str	r2, [r7, #100]	; 0x64
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a5c:	464c      	mov	r4, r9
 8002a5e:	0423      	lsls	r3, r4, #16
 8002a60:	4644      	mov	r4, r8
 8002a62:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002a66:	4644      	mov	r4, r8
 8002a68:	0422      	lsls	r2, r4, #16
 8002a6a:	ea40 0402 	orr.w	r4, r0, r2
 8002a6e:	65bc      	str	r4, [r7, #88]	; 0x58
 8002a70:	430b      	orrs	r3, r1
 8002a72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a74:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002a78:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a7c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002a80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a84:	1cda      	adds	r2, r3, #3
 8002a86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a88:	4413      	add	r3, r2
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2200      	movs	r2, #0
 8002a90:	653b      	str	r3, [r7, #80]	; 0x50
 8002a92:	657a      	str	r2, [r7, #84]	; 0x54
 8002a94:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002a98:	4623      	mov	r3, r4
 8002a9a:	0a1b      	lsrs	r3, r3, #8
 8002a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	061b      	lsls	r3, r3, #24
 8002aa2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002aa4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002aa8:	4623      	mov	r3, r4
 8002aaa:	4303      	orrs	r3, r0
 8002aac:	643b      	str	r3, [r7, #64]	; 0x40
 8002aae:	462b      	mov	r3, r5
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ab4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002ab8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002abc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002ac0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ac4:	1d1a      	adds	r2, r3, #4
 8002ac6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ac8:	4413      	add	r3, r2
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2200      	movs	r2, #0
 8002ad0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ad2:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002ade:	0023      	movs	r3, r4
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	ea40 0402 	orr.w	r4, r0, r2
 8002ae6:	633c      	str	r4, [r7, #48]	; 0x30
 8002ae8:	430b      	orrs	r3, r1
 8002aea:	637b      	str	r3, [r7, #52]	; 0x34
 8002aec:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002af0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002af4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002af8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002afc:	1d5a      	adds	r2, r3, #5
 8002afe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b00:	4413      	add	r3, r2
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2200      	movs	r2, #0
 8002b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002b16:	0223      	lsls	r3, r4, #8
 8002b18:	2200      	movs	r2, #0
 8002b1a:	ea40 0402 	orr.w	r4, r0, r2
 8002b1e:	623c      	str	r4, [r7, #32]
 8002b20:	430b      	orrs	r3, r1
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
 8002b24:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002b28:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002b2c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002b30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b34:	3306      	adds	r3, #6
 8002b36:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002b38:	4413      	add	r3, r2
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2200      	movs	r2, #0
 8002b40:	61bb      	str	r3, [r7, #24]
 8002b42:	61fa      	str	r2, [r7, #28]
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	f04f 0300 	mov.w	r3, #0
 8002b4c:	69bc      	ldr	r4, [r7, #24]
 8002b4e:	0423      	lsls	r3, r4, #16
 8002b50:	2200      	movs	r2, #0
 8002b52:	ea40 0402 	orr.w	r4, r0, r2
 8002b56:	613c      	str	r4, [r7, #16]
 8002b58:	430b      	orrs	r3, r1
 8002b5a:	617b      	str	r3, [r7, #20]
 8002b5c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002b60:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002b64:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002b68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b6c:	3307      	adds	r3, #7
 8002b6e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002b70:	4413      	add	r3, r2
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2200      	movs	r2, #0
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	60fa      	str	r2, [r7, #12]
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	68bc      	ldr	r4, [r7, #8]
 8002b86:	0623      	lsls	r3, r4, #24
 8002b88:	2200      	movs	r2, #0
 8002b8a:	ea40 0402 	orr.w	r4, r0, r2
 8002b8e:	603c      	str	r4, [r7, #0]
 8002b90:	430b      	orrs	r3, r1
 8002b92:	607b      	str	r3, [r7, #4]
 8002b94:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002b98:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      this->data = u_data.real;
 8002b9c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002ba0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002ba2:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 8002ba6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002baa:	3308      	adds	r3, #8
 8002bac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     return offset;
 8002bb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	378c      	adds	r7, #140	; 0x8c
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002bbe:	4770      	bx	lr

08002bc0 <_ZN8std_msgs5Int647getTypeEv>:

    const char * getType(){ return "std_msgs/Int64"; };
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	4b03      	ldr	r3, [pc, #12]	; (8002bd8 <_ZN8std_msgs5Int647getTypeEv+0x18>)
 8002bca:	4618      	mov	r0, r3
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	08006e04 	.word	0x08006e04

08002bdc <_ZN8std_msgs5Int646getMD5Ev>:
    const char * getMD5(){ return "34add168574510e6e17f5d23ecc077ef"; };
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	4b03      	ldr	r3, [pc, #12]	; (8002bf4 <_ZN8std_msgs5Int646getMD5Ev+0x18>)
 8002be6:	4618      	mov	r0, r3
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	08006e14 	.word	0x08006e14

08002bf8 <_Z12vel_callbackRKN8std_msgs5Int64E>:
ros::NodeHandle nh;
ros::Subscriber<std_msgs::Int64> sub("counting", vel_callback);
ros::Publisher pub_vel("/realspeed", &speed);

void vel_callback(const std_msgs::Int64 &msg)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
   count = msg.data;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c06:	4b04      	ldr	r3, [pc, #16]	; (8002c18 <_Z12vel_callbackRKN8std_msgs5Int64E+0x20>)
 8002c08:	601a      	str	r2, [r3, #0]
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	20000850 	.word	0x20000850

08002c1c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	e00c      	b.n	8002c46 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	fa22 f103 	lsr.w	r1, r2, r3
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	b2ca      	uxtb	r2, r1
 8002c3e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	3301      	adds	r3, #1
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d9ef      	bls.n	8002c2c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8002c4c:	bf00      	nop
 8002c4e:	bf00      	nop
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002c5a:	b480      	push	{r7}
 8002c5c:	b085      	sub	sp, #20
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	e010      	b.n	8002c92 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6839      	ldr	r1, [r7, #0]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	440a      	add	r2, r1
 8002c7a:	7812      	ldrb	r2, [r2, #0]
 8002c7c:	4611      	mov	r1, r2
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	00d2      	lsls	r2, r2, #3
 8002c82:	fa01 f202 	lsl.w	r2, r1, r2
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	d9eb      	bls.n	8002c70 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8002c98:	bf00      	nop
 8002c9a:	bf00      	nop
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
	...

08002ca8 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	4a04      	ldr	r2, [pc, #16]	; (8002cc4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	08006f54 	.word	0x08006f54

08002cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff ffe8 	bl	8002ca8 <_ZN3ros15NodeHandleBase_C1Ev>
 8002cd8:	4a3a      	ldr	r2, [pc, #232]	; (8002dc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fe ff36 	bl	8001b54 <_ZN13STM32HardwareC1Ev>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe fc34 	bl	8001564 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	e00a      	b.n	8002d18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x50>
      publishers[i] = 0;
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	2200      	movs	r2, #0
 8002d10:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	3301      	adds	r3, #1
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	2b18      	cmp	r3, #24
 8002d1c:	d9f1      	bls.n	8002d02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x3a>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002d1e:	2300      	movs	r3, #0
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	e009      	b.n	8002d38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x70>
      subscribers[i] = 0;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	3301      	adds	r3, #1
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	2b18      	cmp	r3, #24
 8002d3c:	d9f2      	bls.n	8002d24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5c>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	e009      	b.n	8002d58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x90>
      message_in[i] = 0;
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	4413      	add	r3, r2
 8002d4a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002d4e:	2200      	movs	r2, #0
 8002d50:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	3301      	adds	r3, #1
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d5e:	d3f1      	bcc.n	8002d44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7c>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002d60:	2300      	movs	r3, #0
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	e009      	b.n	8002d7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xb2>
      message_out[i] = 0;
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	3301      	adds	r3, #1
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d80:	d3f1      	bcc.n	8002d66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9e>

    req_param_resp.ints_length = 0;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	08006ee0 	.word	0x08006ee0

08002dc8 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	4a04      	ldr	r2, [pc, #16]	; (8002de4 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	08006f3c 	.word	0x08006f3c

08002de8 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
 8002df4:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff ffe5 	bl	8002dc8 <_ZN3ros11Subscriber_C1Ev>
 8002dfe:	4a0b      	ldr	r2, [pc, #44]	; (8002e2c <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei+0x44>)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	3310      	adds	r3, #16
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff fd37 	bl	800287c <_ZN8std_msgs5Int64C1Ev>
    cb_(cb),
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	621a      	str	r2, [r3, #32]
    endpoint_(endpoint)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	625a      	str	r2, [r3, #36]	; 0x24
  {
    topic_ = topic_name;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	609a      	str	r2, [r3, #8]
  };
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	08006ec8 	.word	0x08006ec8

08002e30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce()
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fe ff77 	bl	8001d30 <_ZN13STM32Hardware4timeEv>
 8002e42:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d903      	bls.n	8002e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
    {
      configured_ = false;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d009      	beq.n	8002e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
    {
      if (c_time > last_msg_timeout_time)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d903      	bls.n	8002e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d014      	beq.n	8002eb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3304      	adds	r3, #4
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fe ff50 	bl	8001d30 <_ZN13STM32Hardware4timeEv>
 8002e90:	4602      	mov	r2, r0
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	1ad2      	subs	r2, r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	bf8c      	ite	hi
 8002ea0:	2301      	movhi	r3, #1
 8002ea2:	2300      	movls	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
 8002eaa:	f06f 0301 	mvn.w	r3, #1
 8002eae:	e194      	b.n	80031da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
        }
      }
      int data = hardware_.read();
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fe fe69 	bl	8001b8c <_ZN13STM32Hardware4readEv>
 8002eba:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f2c0 8174 	blt.w	80031ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
        break;
      checksum_ += data;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	441a      	add	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002eda:	2b07      	cmp	r3, #7
 8002edc:	d11e      	bne.n	8002f1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
      {
        message_in[index_++] = data;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8002ee4:	1c59      	adds	r1, r3, #1
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	b2d1      	uxtb	r1, r2
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	460a      	mov	r2, r1
 8002ef6:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8002f00:	1e5a      	subs	r2, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1b4      	bne.n	8002e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2208      	movs	r2, #8
 8002f16:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002f1a:	e7af      	b.n	8002e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_FIRST_FF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d128      	bne.n	8002f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
      {
        if (data == 0xff)
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2bff      	cmp	r3, #255	; 0xff
 8002f2a:	d10d      	bne.n	8002f48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
        {
          mode_++;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002f32:	1c5a      	adds	r2, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f103 0214 	add.w	r2, r3, #20
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8002f46:	e799      	b.n	8002e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fe feef 	bl	8001d30 <_ZN13STM32Hardware4timeEv>
 8002f52:	4602      	mov	r2, r0
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	bf8c      	ite	hi
 8002f60:	2301      	movhi	r3, #1
 8002f62:	2300      	movls	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d088      	beq.n	8002e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8002f72:	f06f 0301 	mvn.w	r3, #1
 8002f76:	e130      	b.n	80031da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d118      	bne.n	8002fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
      {
        if (data == PROTOCOL_VER)
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2bfe      	cmp	r3, #254	; 0xfe
 8002f86:	d107      	bne.n	8002f98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
        {
          mode_++;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002f96:	e771      	b.n	8002e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f47f af68 	bne.w	8002e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f918 	bl	80031e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8002fb2:	e763      	b.n	8002e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d113      	bne.n	8002fe6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
      {
        bytes_ = data;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8002fe4:	e74a      	b.n	8002e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d110      	bne.n	8003012 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
      {
        bytes_ += data << 8;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	021b      	lsls	r3, r3, #8
 8002ffa:	441a      	add	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003008:	1c5a      	adds	r2, r3, #1
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003010:	e734      	b.n	8002e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003018:	2b04      	cmp	r3, #4
 800301a:	d116      	bne.n	800304a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
      {
        if ((checksum_ % 256) == 255)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003022:	425a      	negs	r2, r3
 8003024:	b2db      	uxtb	r3, r3
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	bf58      	it	pl
 800302a:	4253      	negpl	r3, r2
 800302c:	2bff      	cmp	r3, #255	; 0xff
 800302e:	d107      	bne.n	8003040 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003036:	1c5a      	adds	r2, r3, #1
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800303e:	e71d      	b.n	8002e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003048:	e718      	b.n	8002e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003050:	2b05      	cmp	r3, #5
 8003052:	d10f      	bne.n	8003074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
      {
        topic_ = data;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003072:	e703      	b.n	8002e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800307a:	2b06      	cmp	r3, #6
 800307c:	d117      	bne.n	80030ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
      {
        topic_ += data << 8;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	441a      	add	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2207      	movs	r2, #7
 8003094:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f47f aeec 	bne.w	8002e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2208      	movs	r2, #8
 80030a8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80030ac:	e6e6      	b.n	8002e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	f47f aee1 	bne.w	8002e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80030c8:	425a      	negs	r2, r3
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	bf58      	it	pl
 80030d0:	4253      	negpl	r3, r2
 80030d2:	2bff      	cmp	r3, #255	; 0xff
 80030d4:	f47f aed2 	bne.w	8002e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d110      	bne.n	8003104 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
          {
            requestSyncTime();
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f87d 	bl	80031e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f898 	bl	800321e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80030fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003102:	e06a      	b.n	80031da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          }
          else if (topic_ == TopicInfo::ID_TIME)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800310a:	2b0a      	cmp	r3, #10
 800310c:	d107      	bne.n	800311e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
          {
            syncTime(message_in);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003114:	4619      	mov	r1, r3
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f960 	bl	80033dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800311c:	e6ae      	b.n	8002e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003124:	2b06      	cmp	r3, #6
 8003126:	d10e      	bne.n	8003146 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
          {
            req_param_resp.deserialize(message_in);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f603 1214 	addw	r2, r3, #2324	; 0x914
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003134:	4619      	mov	r1, r3
 8003136:	4610      	mov	r0, r2
 8003138:	f7fe fb49 	bl	80017ce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003144:	e69a      	b.n	8002e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800314c:	2b0b      	cmp	r3, #11
 800314e:	d104      	bne.n	800315a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
          {
            configured_ = false;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003158:	e690      	b.n	8002e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else
          {
            if (subscribers[topic_ - 100])
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003160:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f202 2222 	addw	r2, r2, #546	; 0x222
 800316a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800316e:	2b00      	cmp	r3, #0
 8003170:	f43f ae84 	beq.w	8002e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800317a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003184:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800318e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80031a6:	4611      	mov	r1, r2
 80031a8:	4798      	blx	r3
    while (true)
 80031aa:	e667      	b.n	8002e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80031ac:	bf00      	nop
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00f      	beq.n	80031d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d906      	bls.n	80031d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
    {
      requestSyncTime();
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f809 	bl	80031e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    }

    return SPIN_OK;
 80031d8:	2300      	movs	r3, #0
  }
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:

  /********************************************************************
   * Time functions
   */

  void requestSyncTime()
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b086      	sub	sp, #24
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  {
    std_msgs::Time t;
 80031ea:	f107 030c 	add.w	r3, r7, #12
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fd fe54 	bl	8000e9c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f107 020c 	add.w	r2, r7, #12
 80031fe:	210a      	movs	r1, #10
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	4798      	blx	r3
    rt_time = hardware_.time();
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3304      	adds	r3, #4
 8003208:	4618      	mov	r0, r3
 800320a:	f7fe fd91 	bl	8001d30 <_ZN13STM32Hardware4timeEv>
 800320e:	4602      	mov	r2, r0
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8003216:	bf00      	nop
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800321e:	b590      	push	{r4, r7, lr}
 8003220:	b08b      	sub	sp, #44	; 0x2c
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003226:	f107 030c 	add.w	r3, r7, #12
 800322a:	4618      	mov	r0, r3
 800322c:	f7fd ff26 	bl	800107c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003230:	2300      	movs	r3, #0
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
 8003234:	e062      	b.n	80032fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d056      	beq.n	80032f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	b29b      	uxth	r3, r3
 800325a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	6859      	ldr	r1, [r3, #4]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3308      	adds	r3, #8
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4608      	mov	r0, r1
 8003296:	4798      	blx	r3
 8003298:	4603      	mov	r3, r0
 800329a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	6859      	ldr	r1, [r3, #4]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	330c      	adds	r3, #12
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4608      	mov	r0, r1
 80032c4:	4798      	blx	r3
 80032c6:	4603      	mov	r3, r0
 80032c8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80032ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032ce:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681c      	ldr	r4, [r3, #0]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fe fc16 	bl	8001b16 <_ZN3ros9Publisher15getEndpointTypeEv>
 80032ea:	4601      	mov	r1, r0
 80032ec:	f107 030c 	add.w	r3, r7, #12
 80032f0:	461a      	mov	r2, r3
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	3301      	adds	r3, #1
 80032fa:	627b      	str	r3, [r7, #36]	; 0x24
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	2b18      	cmp	r3, #24
 8003300:	dd99      	ble.n	8003236 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003302:	2300      	movs	r3, #0
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
 8003306:	e05e      	b.n	80033c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d053      	beq.n	80033c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800331c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	b29b      	uxth	r3, r3
 8003328:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800332e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800333e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003342:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800334a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800334e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	3308      	adds	r3, #8
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4608      	mov	r0, r1
 800335a:	4798      	blx	r3
 800335c:	4603      	mov	r3, r0
 800335e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003364:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003368:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003370:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	330c      	adds	r3, #12
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4608      	mov	r0, r1
 8003380:	4798      	blx	r3
 8003382:	4603      	mov	r3, r0
 8003384:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003386:	f44f 7300 	mov.w	r3, #512	; 0x200
 800338a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681c      	ldr	r4, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003396:	f202 2222 	addw	r2, r2, #546	; 0x222
 800339a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80033a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3304      	adds	r3, #4
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4608      	mov	r0, r1
 80033b2:	4798      	blx	r3
 80033b4:	4601      	mov	r1, r0
 80033b6:	f107 030c 	add.w	r3, r7, #12
 80033ba:	461a      	mov	r2, r3
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	3301      	adds	r3, #1
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	2b18      	cmp	r3, #24
 80033ca:	dd9d      	ble.n	8003308 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80033d4:	bf00      	nop
 80033d6:	372c      	adds	r7, #44	; 0x2c
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd90      	pop	{r4, r7, pc}

080033dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80033e6:	f107 0308 	add.w	r3, r7, #8
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fd fd56 	bl	8000e9c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3304      	adds	r3, #4
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fe fc9b 	bl	8001d30 <_ZN13STM32Hardware4timeEv>
 80033fa:	4602      	mov	r2, r0
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003406:	f107 0308 	add.w	r3, r7, #8
 800340a:	6839      	ldr	r1, [r7, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f7fd fdb5 	bl	8000f7c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	4915      	ldr	r1, [pc, #84]	; (800346c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003418:	fba1 1303 	umull	r1, r3, r1, r3
 800341c:	099b      	lsrs	r3, r3, #6
 800341e:	4413      	add	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003422:	6939      	ldr	r1, [r7, #16]
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	4b11      	ldr	r3, [pc, #68]	; (800346c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003428:	fba3 0302 	umull	r0, r3, r3, r2
 800342c:	099b      	lsrs	r3, r3, #6
 800342e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003432:	fb00 f303 	mul.w	r3, r0, r3
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	4a0d      	ldr	r2, [pc, #52]	; (8003470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800343a:	fb02 f303 	mul.w	r3, r2, r3
 800343e:	440b      	add	r3, r1
 8003440:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003442:	f107 0308 	add.w	r3, r7, #8
 8003446:	3304      	adds	r3, #4
 8003448:	4619      	mov	r1, r3
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f8a6 	bl	800359c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3304      	adds	r3, #4
 8003454:	4618      	mov	r0, r3
 8003456:	f7fe fc6b 	bl	8001d30 <_ZN13STM32Hardware4timeEv>
 800345a:	4602      	mov	r2, r0
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003462:	bf00      	nop
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	10624dd3 	.word	0x10624dd3
 8003470:	000f4240 	.word	0x000f4240

08003474 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b63      	cmp	r3, #99	; 0x63
 8003484:	dd09      	ble.n	800349a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800348c:	f083 0301 	eor.w	r3, r3, #1
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003496:	2300      	movs	r3, #0
 8003498:	e079      	b.n	800358e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	f202 6224 	addw	r2, r2, #1572	; 0x624
 80034a6:	3207      	adds	r2, #7
 80034a8:	4611      	mov	r1, r2
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	4798      	blx	r3
 80034ae:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	22ff      	movs	r2, #255	; 0xff
 80034b4:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	22fe      	movs	r2, #254	; 0xfe
 80034bc:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	0a1b      	lsrs	r3, r3, #8
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80034e6:	4413      	add	r3, r2
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	43db      	mvns	r3, r3
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	b21b      	sxth	r3, r3
 8003502:	121b      	asrs	r3, r3, #8
 8003504:	b21b      	sxth	r3, r3
 8003506:	b2da      	uxtb	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003512:	2305      	movs	r3, #5
 8003514:	61bb      	str	r3, [r7, #24]
 8003516:	e00c      	b.n	8003532 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	4413      	add	r3, r2
 800351e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	461a      	mov	r2, r3
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	4413      	add	r3, r2
 800352a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	3301      	adds	r3, #1
 8003530:	61bb      	str	r3, [r7, #24]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	3306      	adds	r3, #6
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	429a      	cmp	r2, r3
 800353a:	dded      	ble.n	8003518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	3307      	adds	r3, #7
 8003540:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	425a      	negs	r2, r3
 8003546:	b2db      	uxtb	r3, r3
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	bf58      	it	pl
 800354c:	4253      	negpl	r3, r2
 800354e:	b2da      	uxtb	r2, r3
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	1c59      	adds	r1, r3, #1
 8003554:	6179      	str	r1, [r7, #20]
 8003556:	43d2      	mvns	r2, r2
 8003558:	b2d1      	uxtb	r1, r2
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	4413      	add	r3, r2
 800355e:	460a      	mov	r2, r1
 8003560:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800356a:	dc0a      	bgt.n	8003582 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	1d18      	adds	r0, r3, #4
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	4619      	mov	r1, r3
 800357a:	f7fe fb93 	bl	8001ca4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	e005      	b.n	800358e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003582:	4905      	ldr	r1, [pc, #20]	; (8003598 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 f849 	bl	800361c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800358a:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800358e:	4618      	mov	r0, r3
 8003590:	3720      	adds	r7, #32
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	08006e38 	.word	0x08006e38

0800359c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3304      	adds	r3, #4
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7fe fbc0 	bl	8001d30 <_ZN13STM32Hardware4timeEv>
 80035b0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4915      	ldr	r1, [pc, #84]	; (8003610 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80035ba:	fba1 1303 	umull	r1, r3, r1, r3
 80035be:	099b      	lsrs	r3, r3, #6
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	1e5a      	subs	r2, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	6859      	ldr	r1, [r3, #4]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	4b0f      	ldr	r3, [pc, #60]	; (8003610 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80035d2:	fba3 0302 	umull	r0, r3, r3, r2
 80035d6:	099b      	lsrs	r3, r3, #6
 80035d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80035dc:	fb00 f303 	mul.w	r3, r0, r3
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	4a0c      	ldr	r2, [pc, #48]	; (8003614 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 80035e4:	fb02 f303 	mul.w	r3, r2, r3
 80035e8:	1aca      	subs	r2, r1, r3
 80035ea:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 80035ec:	4413      	add	r3, r2
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003600:	4619      	mov	r1, r3
 8003602:	4610      	mov	r0, r2
 8003604:	f7fc ff78 	bl	80004f8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003608:	bf00      	nop
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	10624dd3 	.word	0x10624dd3
 8003614:	000f4240 	.word	0x000f4240
 8003618:	3b9aca00 	.word	0x3b9aca00

0800361c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	2103      	movs	r1, #3
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f804 	bl	8003638 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003630:	bf00      	nop
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003638:	b580      	push	{r7, lr}
 800363a:	b088      	sub	sp, #32
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	460b      	mov	r3, r1
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003646:	f107 0314 	add.w	r3, r7, #20
 800364a:	4618      	mov	r0, r3
 800364c:	f7fd feda 	bl	8001404 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003650:	7afb      	ldrb	r3, [r7, #11]
 8003652:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f107 0214 	add.w	r2, r7, #20
 8003662:	2107      	movs	r1, #7
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	4798      	blx	r3
  }
 8003668:	bf00      	nop
 800366a:	3720      	adds	r7, #32
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <_Z41__static_initialization_and_destruction_0ii>:
void ros_pub(void)
{
//    speed.linear.x = rVx;
    //....
    pub_vel.publish(&speed);
}
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d116      	bne.n	80036ae <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003686:	4293      	cmp	r3, r2
 8003688:	d111      	bne.n	80036ae <_Z41__static_initialization_and_destruction_0ii+0x3e>
geometry_msgs::Twist speed; 
 800368a:	480b      	ldr	r0, [pc, #44]	; (80036b8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800368c:	f7ff f872 	bl	8002774 <_ZN13geometry_msgs5TwistC1Ev>
ros::NodeHandle nh;
 8003690:	480a      	ldr	r0, [pc, #40]	; (80036bc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003692:	f7ff fb19 	bl	8002cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<std_msgs::Int64> sub("counting", vel_callback);
 8003696:	2301      	movs	r3, #1
 8003698:	4a09      	ldr	r2, [pc, #36]	; (80036c0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800369a:	490a      	ldr	r1, [pc, #40]	; (80036c4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800369c:	480a      	ldr	r0, [pc, #40]	; (80036c8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800369e:	f7ff fba3 	bl	8002de8 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub_vel("/realspeed", &speed);
 80036a2:	2300      	movs	r3, #0
 80036a4:	4a04      	ldr	r2, [pc, #16]	; (80036b8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80036a6:	4909      	ldr	r1, [pc, #36]	; (80036cc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80036a8:	4809      	ldr	r0, [pc, #36]	; (80036d0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80036aa:	f7fe fa1d 	bl	8001ae8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 80036ae:	bf00      	nop
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	20000858 	.word	0x20000858
 80036bc:	200008a0 	.word	0x200008a0
 80036c0:	08002bf9 	.word	0x08002bf9
 80036c4:	08006e74 	.word	0x08006e74
 80036c8:	200011e0 	.word	0x200011e0
 80036cc:	08006e80 	.word	0x08006e80
 80036d0:	20001208 	.word	0x20001208

080036d4 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3310      	adds	r3, #16
 80036e2:	6839      	ldr	r1, [r7, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff f968 	bl	80029ba <_ZN8std_msgs5Int6411deserializeEPh>
    this->cb_(msg);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	3210      	adds	r2, #16
 80036f2:	4610      	mov	r0, r2
 80036f4:	4798      	blx	r3
  }
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <_ZN3ros10SubscriberIN8std_msgs5Int64EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  }
 800370a:	4618      	mov	r0, r3
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	3310      	adds	r3, #16
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff fa4c 	bl	8002bc0 <_ZN8std_msgs5Int647getTypeEv>
 8003728:	4603      	mov	r3, r0
  }
 800372a:	4618      	mov	r0, r3
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3310      	adds	r3, #16
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff fa4c 	bl	8002bdc <_ZN8std_msgs5Int646getMD5Ev>
 8003744:	4603      	mov	r3, r0
  }
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
    return configured_;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 800375c:	4618      	mov	r0, r3
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <_GLOBAL__sub_I_count>:
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
 800376c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003770:	2001      	movs	r0, #1
 8003772:	f7ff ff7d 	bl	8003670 <_Z41__static_initialization_and_destruction_0ii>
 8003776:	bd80      	pop	{r7, pc}

08003778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003778:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037b0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800377c:	480d      	ldr	r0, [pc, #52]	; (80037b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800377e:	490e      	ldr	r1, [pc, #56]	; (80037b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003780:	4a0e      	ldr	r2, [pc, #56]	; (80037bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003784:	e002      	b.n	800378c <LoopCopyDataInit>

08003786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800378a:	3304      	adds	r3, #4

0800378c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800378c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800378e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003790:	d3f9      	bcc.n	8003786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003792:	4a0b      	ldr	r2, [pc, #44]	; (80037c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003794:	4c0b      	ldr	r4, [pc, #44]	; (80037c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003798:	e001      	b.n	800379e <LoopFillZerobss>

0800379a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800379a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800379c:	3204      	adds	r2, #4

0800379e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800379e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037a0:	d3fb      	bcc.n	800379a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80037a2:	f7fd fb19 	bl	8000dd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037a6:	f003 f939 	bl	8006a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037aa:	f7fc fed1 	bl	8000550 <main>
  bx  lr    
 80037ae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80037b0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80037b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037b8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80037bc:	08006fec 	.word	0x08006fec
  ldr r2, =_sbss
 80037c0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80037c4:	20001368 	.word	0x20001368

080037c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037c8:	e7fe      	b.n	80037c8 <ADC_IRQHandler>
	...

080037cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037d0:	4b0e      	ldr	r3, [pc, #56]	; (800380c <HAL_Init+0x40>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a0d      	ldr	r2, [pc, #52]	; (800380c <HAL_Init+0x40>)
 80037d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037dc:	4b0b      	ldr	r3, [pc, #44]	; (800380c <HAL_Init+0x40>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a0a      	ldr	r2, [pc, #40]	; (800380c <HAL_Init+0x40>)
 80037e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037e8:	4b08      	ldr	r3, [pc, #32]	; (800380c <HAL_Init+0x40>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a07      	ldr	r2, [pc, #28]	; (800380c <HAL_Init+0x40>)
 80037ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037f4:	2003      	movs	r0, #3
 80037f6:	f000 f94f 	bl	8003a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037fa:	2000      	movs	r0, #0
 80037fc:	f000 f808 	bl	8003810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003800:	f7fd f8ca 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40023c00 	.word	0x40023c00

08003810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003818:	4b12      	ldr	r3, [pc, #72]	; (8003864 <HAL_InitTick+0x54>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	4b12      	ldr	r3, [pc, #72]	; (8003868 <HAL_InitTick+0x58>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	4619      	mov	r1, r3
 8003822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003826:	fbb3 f3f1 	udiv	r3, r3, r1
 800382a:	fbb2 f3f3 	udiv	r3, r2, r3
 800382e:	4618      	mov	r0, r3
 8003830:	f000 f967 	bl	8003b02 <HAL_SYSTICK_Config>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e00e      	b.n	800385c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b0f      	cmp	r3, #15
 8003842:	d80a      	bhi.n	800385a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003844:	2200      	movs	r2, #0
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	f04f 30ff 	mov.w	r0, #4294967295
 800384c:	f000 f92f 	bl	8003aae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003850:	4a06      	ldr	r2, [pc, #24]	; (800386c <HAL_InitTick+0x5c>)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	e000      	b.n	800385c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
}
 800385c:	4618      	mov	r0, r3
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	20000000 	.word	0x20000000
 8003868:	20000008 	.word	0x20000008
 800386c:	20000004 	.word	0x20000004

08003870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003874:	4b06      	ldr	r3, [pc, #24]	; (8003890 <HAL_IncTick+0x20>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	461a      	mov	r2, r3
 800387a:	4b06      	ldr	r3, [pc, #24]	; (8003894 <HAL_IncTick+0x24>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4413      	add	r3, r2
 8003880:	4a04      	ldr	r2, [pc, #16]	; (8003894 <HAL_IncTick+0x24>)
 8003882:	6013      	str	r3, [r2, #0]
}
 8003884:	bf00      	nop
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	20000008 	.word	0x20000008
 8003894:	2000121c 	.word	0x2000121c

08003898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  return uwTick;
 800389c:	4b03      	ldr	r3, [pc, #12]	; (80038ac <HAL_GetTick+0x14>)
 800389e:	681b      	ldr	r3, [r3, #0]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	2000121c 	.word	0x2000121c

080038b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038b8:	f7ff ffee 	bl	8003898 <HAL_GetTick>
 80038bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c8:	d005      	beq.n	80038d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038ca:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <HAL_Delay+0x44>)
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	461a      	mov	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4413      	add	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038d6:	bf00      	nop
 80038d8:	f7ff ffde 	bl	8003898 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d8f7      	bhi.n	80038d8 <HAL_Delay+0x28>
  {
  }
}
 80038e8:	bf00      	nop
 80038ea:	bf00      	nop
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20000008 	.word	0x20000008

080038f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003908:	4b0c      	ldr	r3, [pc, #48]	; (800393c <__NVIC_SetPriorityGrouping+0x44>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003914:	4013      	ands	r3, r2
 8003916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800392a:	4a04      	ldr	r2, [pc, #16]	; (800393c <__NVIC_SetPriorityGrouping+0x44>)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	60d3      	str	r3, [r2, #12]
}
 8003930:	bf00      	nop
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	e000ed00 	.word	0xe000ed00

08003940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003944:	4b04      	ldr	r3, [pc, #16]	; (8003958 <__NVIC_GetPriorityGrouping+0x18>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	0a1b      	lsrs	r3, r3, #8
 800394a:	f003 0307 	and.w	r3, r3, #7
}
 800394e:	4618      	mov	r0, r3
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	e000ed00 	.word	0xe000ed00

0800395c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396a:	2b00      	cmp	r3, #0
 800396c:	db0b      	blt.n	8003986 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800396e:	79fb      	ldrb	r3, [r7, #7]
 8003970:	f003 021f 	and.w	r2, r3, #31
 8003974:	4907      	ldr	r1, [pc, #28]	; (8003994 <__NVIC_EnableIRQ+0x38>)
 8003976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	2001      	movs	r0, #1
 800397e:	fa00 f202 	lsl.w	r2, r0, r2
 8003982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	e000e100 	.word	0xe000e100

08003998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	6039      	str	r1, [r7, #0]
 80039a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	db0a      	blt.n	80039c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	490c      	ldr	r1, [pc, #48]	; (80039e4 <__NVIC_SetPriority+0x4c>)
 80039b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b6:	0112      	lsls	r2, r2, #4
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	440b      	add	r3, r1
 80039bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039c0:	e00a      	b.n	80039d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	4908      	ldr	r1, [pc, #32]	; (80039e8 <__NVIC_SetPriority+0x50>)
 80039c8:	79fb      	ldrb	r3, [r7, #7]
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	3b04      	subs	r3, #4
 80039d0:	0112      	lsls	r2, r2, #4
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	440b      	add	r3, r1
 80039d6:	761a      	strb	r2, [r3, #24]
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	e000e100 	.word	0xe000e100
 80039e8:	e000ed00 	.word	0xe000ed00

080039ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b089      	sub	sp, #36	; 0x24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	f1c3 0307 	rsb	r3, r3, #7
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	bf28      	it	cs
 8003a0a:	2304      	movcs	r3, #4
 8003a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	3304      	adds	r3, #4
 8003a12:	2b06      	cmp	r3, #6
 8003a14:	d902      	bls.n	8003a1c <NVIC_EncodePriority+0x30>
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	3b03      	subs	r3, #3
 8003a1a:	e000      	b.n	8003a1e <NVIC_EncodePriority+0x32>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a20:	f04f 32ff 	mov.w	r2, #4294967295
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2a:	43da      	mvns	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	401a      	ands	r2, r3
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a34:	f04f 31ff 	mov.w	r1, #4294967295
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3e:	43d9      	mvns	r1, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a44:	4313      	orrs	r3, r2
         );
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3724      	adds	r7, #36	; 0x24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
	...

08003a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a64:	d301      	bcc.n	8003a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a66:	2301      	movs	r3, #1
 8003a68:	e00f      	b.n	8003a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a6a:	4a0a      	ldr	r2, [pc, #40]	; (8003a94 <SysTick_Config+0x40>)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a72:	210f      	movs	r1, #15
 8003a74:	f04f 30ff 	mov.w	r0, #4294967295
 8003a78:	f7ff ff8e 	bl	8003998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a7c:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <SysTick_Config+0x40>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a82:	4b04      	ldr	r3, [pc, #16]	; (8003a94 <SysTick_Config+0x40>)
 8003a84:	2207      	movs	r2, #7
 8003a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	e000e010 	.word	0xe000e010

08003a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7ff ff29 	bl	80038f8 <__NVIC_SetPriorityGrouping>
}
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b086      	sub	sp, #24
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	60b9      	str	r1, [r7, #8]
 8003ab8:	607a      	str	r2, [r7, #4]
 8003aba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ac0:	f7ff ff3e 	bl	8003940 <__NVIC_GetPriorityGrouping>
 8003ac4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	68b9      	ldr	r1, [r7, #8]
 8003aca:	6978      	ldr	r0, [r7, #20]
 8003acc:	f7ff ff8e 	bl	80039ec <NVIC_EncodePriority>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff ff5d 	bl	8003998 <__NVIC_SetPriority>
}
 8003ade:	bf00      	nop
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b082      	sub	sp, #8
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	4603      	mov	r3, r0
 8003aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff ff31 	bl	800395c <__NVIC_EnableIRQ>
}
 8003afa:	bf00      	nop
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b082      	sub	sp, #8
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff ffa2 	bl	8003a54 <SysTick_Config>
 8003b10:	4603      	mov	r3, r0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b086      	sub	sp, #24
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	60f8      	str	r0, [r7, #12]
 8003b22:	60b9      	str	r1, [r7, #8]
 8003b24:	607a      	str	r2, [r7, #4]
 8003b26:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b30:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <HAL_DMA_Start_IT+0x26>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e040      	b.n	8003bc2 <HAL_DMA_Start_IT+0xa8>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d12f      	bne.n	8003bb4 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	68b9      	ldr	r1, [r7, #8]
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 f82e 	bl	8003bca <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b72:	223f      	movs	r2, #63	; 0x3f
 8003b74:	409a      	lsls	r2, r3
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f042 0216 	orr.w	r2, r2, #22
 8003b88:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d007      	beq.n	8003ba2 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 0208 	orr.w	r2, r2, #8
 8003ba0:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f042 0201 	orr.w	r2, r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	e005      	b.n	8003bc0 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b085      	sub	sp, #20
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	60f8      	str	r0, [r7, #12]
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	607a      	str	r2, [r7, #4]
 8003bd6:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003be6:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b40      	cmp	r3, #64	; 0x40
 8003bf6:	d108      	bne.n	8003c0a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c08:	e007      	b.n	8003c1a <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	60da      	str	r2, [r3, #12]
}
 8003c1a:	bf00      	nop
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
	...

08003c28 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e06c      	b.n	8003d14 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d106      	bne.n	8003c52 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2223      	movs	r2, #35	; 0x23
 8003c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7fc fecb 	bl	80009e8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c52:	2300      	movs	r3, #0
 8003c54:	60bb      	str	r3, [r7, #8]
 8003c56:	4b31      	ldr	r3, [pc, #196]	; (8003d1c <HAL_ETH_Init+0xf4>)
 8003c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5a:	4a30      	ldr	r2, [pc, #192]	; (8003d1c <HAL_ETH_Init+0xf4>)
 8003c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c60:	6453      	str	r3, [r2, #68]	; 0x44
 8003c62:	4b2e      	ldr	r3, [pc, #184]	; (8003d1c <HAL_ETH_Init+0xf4>)
 8003c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c6a:	60bb      	str	r3, [r7, #8]
 8003c6c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003c6e:	4b2c      	ldr	r3, [pc, #176]	; (8003d20 <HAL_ETH_Init+0xf8>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	4a2b      	ldr	r2, [pc, #172]	; (8003d20 <HAL_ETH_Init+0xf8>)
 8003c74:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c78:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003c7a:	4b29      	ldr	r3, [pc, #164]	; (8003d20 <HAL_ETH_Init+0xf8>)
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	4927      	ldr	r1, [pc, #156]	; (8003d20 <HAL_ETH_Init+0xf8>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003c88:	4b25      	ldr	r3, [pc, #148]	; (8003d20 <HAL_ETH_Init+0xf8>)
 8003c8a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6812      	ldr	r2, [r2, #0]
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ca2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ca4:	f7ff fdf8 	bl	8003898 <HAL_GetTick>
 8003ca8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003caa:	e011      	b.n	8003cd0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003cac:	f7ff fdf4 	bl	8003898 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003cba:	d909      	bls.n	8003cd0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2204      	movs	r2, #4
 8003cc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	22e0      	movs	r2, #224	; 0xe0
 8003cc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e021      	b.n	8003d14 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1e4      	bne.n	8003cac <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f958 	bl	8003f98 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f9ff 	bl	80040ec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 fa55 	bl	800419e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f9bd 	bl	800407c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2210      	movs	r2, #16
 8003d0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	40013800 	.word	0x40013800

08003d24 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	4b51      	ldr	r3, [pc, #324]	; (8003e80 <ETH_SetMACConfig+0x15c>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	7c1b      	ldrb	r3, [r3, #16]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d102      	bne.n	8003d4c <ETH_SetMACConfig+0x28>
 8003d46:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003d4a:	e000      	b.n	8003d4e <ETH_SetMACConfig+0x2a>
 8003d4c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	7c5b      	ldrb	r3, [r3, #17]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d102      	bne.n	8003d5c <ETH_SetMACConfig+0x38>
 8003d56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d5a:	e000      	b.n	8003d5e <ETH_SetMACConfig+0x3a>
 8003d5c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003d5e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003d64:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	7fdb      	ldrb	r3, [r3, #31]
 8003d6a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003d6c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003d72:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	7f92      	ldrb	r2, [r2, #30]
 8003d78:	2a00      	cmp	r2, #0
 8003d7a:	d102      	bne.n	8003d82 <ETH_SetMACConfig+0x5e>
 8003d7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d80:	e000      	b.n	8003d84 <ETH_SetMACConfig+0x60>
 8003d82:	2200      	movs	r2, #0
                        macconf->Speed |
 8003d84:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	7f1b      	ldrb	r3, [r3, #28]
 8003d8a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003d8c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003d92:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	791b      	ldrb	r3, [r3, #4]
 8003d98:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003d9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003da2:	2a00      	cmp	r2, #0
 8003da4:	d102      	bne.n	8003dac <ETH_SetMACConfig+0x88>
 8003da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003daa:	e000      	b.n	8003dae <ETH_SetMACConfig+0x8a>
 8003dac:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003dae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	7bdb      	ldrb	r3, [r3, #15]
 8003db4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003db6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003dbc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dc4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dde:	2001      	movs	r0, #1
 8003de0:	f7ff fd66 	bl	80038b0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e02:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003e0a:	2a00      	cmp	r2, #0
 8003e0c:	d101      	bne.n	8003e12 <ETH_SetMACConfig+0xee>
 8003e0e:	2280      	movs	r2, #128	; 0x80
 8003e10:	e000      	b.n	8003e14 <ETH_SetMACConfig+0xf0>
 8003e12:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003e14:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003e1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003e22:	2a01      	cmp	r2, #1
 8003e24:	d101      	bne.n	8003e2a <ETH_SetMACConfig+0x106>
 8003e26:	2208      	movs	r2, #8
 8003e28:	e000      	b.n	8003e2c <ETH_SetMACConfig+0x108>
 8003e2a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003e2c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003e34:	2a01      	cmp	r2, #1
 8003e36:	d101      	bne.n	8003e3c <ETH_SetMACConfig+0x118>
 8003e38:	2204      	movs	r2, #4
 8003e3a:	e000      	b.n	8003e3e <ETH_SetMACConfig+0x11a>
 8003e3c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003e3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003e46:	2a01      	cmp	r2, #1
 8003e48:	d101      	bne.n	8003e4e <ETH_SetMACConfig+0x12a>
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	e000      	b.n	8003e50 <ETH_SetMACConfig+0x12c>
 8003e4e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003e50:	4313      	orrs	r3, r2
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e68:	2001      	movs	r0, #1
 8003e6a:	f7ff fd21 	bl	80038b0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	619a      	str	r2, [r3, #24]
}
 8003e76:	bf00      	nop
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	ff20810f 	.word	0xff20810f

08003e84 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	4b3d      	ldr	r3, [pc, #244]	; (8003f94 <ETH_SetDMAConfig+0x110>)
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	7b1b      	ldrb	r3, [r3, #12]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d102      	bne.n	8003eb0 <ETH_SetDMAConfig+0x2c>
 8003eaa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003eae:	e000      	b.n	8003eb2 <ETH_SetDMAConfig+0x2e>
 8003eb0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	7b5b      	ldrb	r3, [r3, #13]
 8003eb6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003eb8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	7f52      	ldrb	r2, [r2, #29]
 8003ebe:	2a00      	cmp	r2, #0
 8003ec0:	d102      	bne.n	8003ec8 <ETH_SetDMAConfig+0x44>
 8003ec2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ec6:	e000      	b.n	8003eca <ETH_SetDMAConfig+0x46>
 8003ec8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003eca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	7b9b      	ldrb	r3, [r3, #14]
 8003ed0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003ed2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003ed8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	7f1b      	ldrb	r3, [r3, #28]
 8003ede:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003ee0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	7f9b      	ldrb	r3, [r3, #30]
 8003ee6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003ee8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003eee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ef6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f08:	461a      	mov	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f1a:	2001      	movs	r0, #1
 8003f1c:	f7ff fcc8 	bl	80038b0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f28:	461a      	mov	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	791b      	ldrb	r3, [r3, #4]
 8003f32:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003f38:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003f3e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003f44:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f4c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003f4e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f54:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003f56:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003f5c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6812      	ldr	r2, [r2, #0]
 8003f62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f6a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f78:	2001      	movs	r0, #1
 8003f7a:	f7ff fc99 	bl	80038b0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f86:	461a      	mov	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6013      	str	r3, [r2, #0]
}
 8003f8c:	bf00      	nop
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	f8de3f23 	.word	0xf8de3f23

08003f98 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b0a6      	sub	sp, #152	; 0x98
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003fac:	2300      	movs	r3, #0
 8003fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003ffa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ffe:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004000:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004004:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004006:	2300      	movs	r3, #0
 8004008:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800400c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004010:	4619      	mov	r1, r3
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7ff fe86 	bl	8003d24 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004018:	2301      	movs	r3, #1
 800401a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800401c:	2301      	movs	r3, #1
 800401e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004020:	2301      	movs	r3, #1
 8004022:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004026:	2301      	movs	r3, #1
 8004028:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800402a:	2300      	movs	r3, #0
 800402c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800402e:	2300      	movs	r3, #0
 8004030:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004034:	2300      	movs	r3, #0
 8004036:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800403a:	2300      	movs	r3, #0
 800403c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800403e:	2301      	movs	r3, #1
 8004040:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004044:	2301      	movs	r3, #1
 8004046:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004048:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800404c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800404e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004052:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004054:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004058:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800405a:	2301      	movs	r3, #1
 800405c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004060:	2300      	movs	r3, #0
 8004062:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004064:	2300      	movs	r3, #0
 8004066:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004068:	f107 0308 	add.w	r3, r7, #8
 800406c:	4619      	mov	r1, r3
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7ff ff08 	bl	8003e84 <ETH_SetDMAConfig>
}
 8004074:	bf00      	nop
 8004076:	3798      	adds	r7, #152	; 0x98
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3305      	adds	r3, #5
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	021b      	lsls	r3, r3, #8
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	3204      	adds	r2, #4
 8004094:	7812      	ldrb	r2, [r2, #0]
 8004096:	4313      	orrs	r3, r2
 8004098:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	4b11      	ldr	r3, [pc, #68]	; (80040e4 <ETH_MACAddressConfig+0x68>)
 800409e:	4413      	add	r3, r2
 80040a0:	461a      	mov	r2, r3
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	3303      	adds	r3, #3
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	061a      	lsls	r2, r3, #24
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3302      	adds	r3, #2
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	041b      	lsls	r3, r3, #16
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3301      	adds	r3, #1
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	021b      	lsls	r3, r3, #8
 80040c0:	4313      	orrs	r3, r2
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	7812      	ldrb	r2, [r2, #0]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <ETH_MACAddressConfig+0x6c>)
 80040ce:	4413      	add	r3, r2
 80040d0:	461a      	mov	r2, r3
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	6013      	str	r3, [r2, #0]
}
 80040d6:	bf00      	nop
 80040d8:	371c      	adds	r7, #28
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	40028040 	.word	0x40028040
 80040e8:	40028044 	.word	0x40028044

080040ec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80040f4:	2300      	movs	r3, #0
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	e03e      	b.n	8004178 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68d9      	ldr	r1, [r3, #12]
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	440b      	add	r3, r1
 800410a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2200      	movs	r2, #0
 8004116:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2200      	movs	r2, #0
 800411c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2200      	movs	r2, #0
 8004122:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004124:	68b9      	ldr	r1, [r7, #8]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	3206      	adds	r2, #6
 800412c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d80c      	bhi.n	800415c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68d9      	ldr	r1, [r3, #12]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	4613      	mov	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	440b      	add	r3, r1
 8004154:	461a      	mov	r2, r3
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	60da      	str	r2, [r3, #12]
 800415a:	e004      	b.n	8004166 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	461a      	mov	r2, r3
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	3301      	adds	r3, #1
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2b03      	cmp	r3, #3
 800417c:	d9bd      	bls.n	80040fa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004190:	611a      	str	r2, [r3, #16]
}
 8004192:	bf00      	nop
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800419e:	b480      	push	{r7}
 80041a0:	b085      	sub	sp, #20
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80041a6:	2300      	movs	r3, #0
 80041a8:	60fb      	str	r3, [r7, #12]
 80041aa:	e046      	b.n	800423a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6919      	ldr	r1, [r3, #16]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	4613      	mov	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	440b      	add	r3, r1
 80041bc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2200      	movs	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2200      	movs	r2, #0
 80041c8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	2200      	movs	r2, #0
 80041ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2200      	movs	r2, #0
 80041d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2200      	movs	r2, #0
 80041da:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2200      	movs	r2, #0
 80041e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80041e8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80041f0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80041fe:	68b9      	ldr	r1, [r7, #8]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	3212      	adds	r2, #18
 8004206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2b02      	cmp	r3, #2
 800420e:	d80c      	bhi.n	800422a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6919      	ldr	r1, [r3, #16]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	440b      	add	r3, r1
 8004222:	461a      	mov	r2, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	60da      	str	r2, [r3, #12]
 8004228:	e004      	b.n	8004234 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	461a      	mov	r2, r3
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	3301      	adds	r3, #1
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2b03      	cmp	r3, #3
 800423e:	d9b5      	bls.n	80041ac <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691a      	ldr	r2, [r3, #16]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800426a:	60da      	str	r2, [r3, #12]
}
 800426c:	bf00      	nop
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004278:	b480      	push	{r7}
 800427a:	b089      	sub	sp, #36	; 0x24
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004282:	2300      	movs	r3, #0
 8004284:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004286:	2300      	movs	r3, #0
 8004288:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800428a:	2300      	movs	r3, #0
 800428c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800428e:	2300      	movs	r3, #0
 8004290:	61fb      	str	r3, [r7, #28]
 8004292:	e177      	b.n	8004584 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004294:	2201      	movs	r2, #1
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	4013      	ands	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	f040 8166 	bne.w	800457e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d005      	beq.n	80042ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d130      	bne.n	800432c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	2203      	movs	r2, #3
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	43db      	mvns	r3, r3
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	4013      	ands	r3, r2
 80042e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	fa02 f303 	lsl.w	r3, r2, r3
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004300:	2201      	movs	r2, #1
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	fa02 f303 	lsl.w	r3, r2, r3
 8004308:	43db      	mvns	r3, r3
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	4013      	ands	r3, r2
 800430e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	091b      	lsrs	r3, r3, #4
 8004316:	f003 0201 	and.w	r2, r3, #1
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	4313      	orrs	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 0303 	and.w	r3, r3, #3
 8004334:	2b03      	cmp	r3, #3
 8004336:	d017      	beq.n	8004368 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	2203      	movs	r2, #3
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	43db      	mvns	r3, r3
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	4013      	ands	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	4313      	orrs	r3, r2
 8004360:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f003 0303 	and.w	r3, r3, #3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d123      	bne.n	80043bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	08da      	lsrs	r2, r3, #3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3208      	adds	r2, #8
 800437c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004380:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	f003 0307 	and.w	r3, r3, #7
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	220f      	movs	r2, #15
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	43db      	mvns	r3, r3
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	4013      	ands	r3, r2
 8004396:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	08da      	lsrs	r2, r3, #3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3208      	adds	r2, #8
 80043b6:	69b9      	ldr	r1, [r7, #24]
 80043b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	2203      	movs	r2, #3
 80043c8:	fa02 f303 	lsl.w	r3, r2, r3
 80043cc:	43db      	mvns	r3, r3
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	4013      	ands	r3, r2
 80043d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f003 0203 	and.w	r2, r3, #3
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	fa02 f303 	lsl.w	r3, r2, r3
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 80c0 	beq.w	800457e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043fe:	2300      	movs	r3, #0
 8004400:	60fb      	str	r3, [r7, #12]
 8004402:	4b66      	ldr	r3, [pc, #408]	; (800459c <HAL_GPIO_Init+0x324>)
 8004404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004406:	4a65      	ldr	r2, [pc, #404]	; (800459c <HAL_GPIO_Init+0x324>)
 8004408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800440c:	6453      	str	r3, [r2, #68]	; 0x44
 800440e:	4b63      	ldr	r3, [pc, #396]	; (800459c <HAL_GPIO_Init+0x324>)
 8004410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800441a:	4a61      	ldr	r2, [pc, #388]	; (80045a0 <HAL_GPIO_Init+0x328>)
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	089b      	lsrs	r3, r3, #2
 8004420:	3302      	adds	r3, #2
 8004422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004426:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	220f      	movs	r2, #15
 8004432:	fa02 f303 	lsl.w	r3, r2, r3
 8004436:	43db      	mvns	r3, r3
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	4013      	ands	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a58      	ldr	r2, [pc, #352]	; (80045a4 <HAL_GPIO_Init+0x32c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d037      	beq.n	80044b6 <HAL_GPIO_Init+0x23e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a57      	ldr	r2, [pc, #348]	; (80045a8 <HAL_GPIO_Init+0x330>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d031      	beq.n	80044b2 <HAL_GPIO_Init+0x23a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a56      	ldr	r2, [pc, #344]	; (80045ac <HAL_GPIO_Init+0x334>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d02b      	beq.n	80044ae <HAL_GPIO_Init+0x236>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a55      	ldr	r2, [pc, #340]	; (80045b0 <HAL_GPIO_Init+0x338>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d025      	beq.n	80044aa <HAL_GPIO_Init+0x232>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a54      	ldr	r2, [pc, #336]	; (80045b4 <HAL_GPIO_Init+0x33c>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d01f      	beq.n	80044a6 <HAL_GPIO_Init+0x22e>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a53      	ldr	r2, [pc, #332]	; (80045b8 <HAL_GPIO_Init+0x340>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d019      	beq.n	80044a2 <HAL_GPIO_Init+0x22a>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a52      	ldr	r2, [pc, #328]	; (80045bc <HAL_GPIO_Init+0x344>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d013      	beq.n	800449e <HAL_GPIO_Init+0x226>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a51      	ldr	r2, [pc, #324]	; (80045c0 <HAL_GPIO_Init+0x348>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d00d      	beq.n	800449a <HAL_GPIO_Init+0x222>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a50      	ldr	r2, [pc, #320]	; (80045c4 <HAL_GPIO_Init+0x34c>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d007      	beq.n	8004496 <HAL_GPIO_Init+0x21e>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a4f      	ldr	r2, [pc, #316]	; (80045c8 <HAL_GPIO_Init+0x350>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d101      	bne.n	8004492 <HAL_GPIO_Init+0x21a>
 800448e:	2309      	movs	r3, #9
 8004490:	e012      	b.n	80044b8 <HAL_GPIO_Init+0x240>
 8004492:	230a      	movs	r3, #10
 8004494:	e010      	b.n	80044b8 <HAL_GPIO_Init+0x240>
 8004496:	2308      	movs	r3, #8
 8004498:	e00e      	b.n	80044b8 <HAL_GPIO_Init+0x240>
 800449a:	2307      	movs	r3, #7
 800449c:	e00c      	b.n	80044b8 <HAL_GPIO_Init+0x240>
 800449e:	2306      	movs	r3, #6
 80044a0:	e00a      	b.n	80044b8 <HAL_GPIO_Init+0x240>
 80044a2:	2305      	movs	r3, #5
 80044a4:	e008      	b.n	80044b8 <HAL_GPIO_Init+0x240>
 80044a6:	2304      	movs	r3, #4
 80044a8:	e006      	b.n	80044b8 <HAL_GPIO_Init+0x240>
 80044aa:	2303      	movs	r3, #3
 80044ac:	e004      	b.n	80044b8 <HAL_GPIO_Init+0x240>
 80044ae:	2302      	movs	r3, #2
 80044b0:	e002      	b.n	80044b8 <HAL_GPIO_Init+0x240>
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <HAL_GPIO_Init+0x240>
 80044b6:	2300      	movs	r3, #0
 80044b8:	69fa      	ldr	r2, [r7, #28]
 80044ba:	f002 0203 	and.w	r2, r2, #3
 80044be:	0092      	lsls	r2, r2, #2
 80044c0:	4093      	lsls	r3, r2
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044c8:	4935      	ldr	r1, [pc, #212]	; (80045a0 <HAL_GPIO_Init+0x328>)
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	089b      	lsrs	r3, r3, #2
 80044ce:	3302      	adds	r3, #2
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044d6:	4b3d      	ldr	r3, [pc, #244]	; (80045cc <HAL_GPIO_Init+0x354>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	43db      	mvns	r3, r3
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	4013      	ands	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044fa:	4a34      	ldr	r2, [pc, #208]	; (80045cc <HAL_GPIO_Init+0x354>)
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004500:	4b32      	ldr	r3, [pc, #200]	; (80045cc <HAL_GPIO_Init+0x354>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	43db      	mvns	r3, r3
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	4013      	ands	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	4313      	orrs	r3, r2
 8004522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004524:	4a29      	ldr	r2, [pc, #164]	; (80045cc <HAL_GPIO_Init+0x354>)
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800452a:	4b28      	ldr	r3, [pc, #160]	; (80045cc <HAL_GPIO_Init+0x354>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	43db      	mvns	r3, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4013      	ands	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	4313      	orrs	r3, r2
 800454c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800454e:	4a1f      	ldr	r2, [pc, #124]	; (80045cc <HAL_GPIO_Init+0x354>)
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004554:	4b1d      	ldr	r3, [pc, #116]	; (80045cc <HAL_GPIO_Init+0x354>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	43db      	mvns	r3, r3
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	4013      	ands	r3, r2
 8004562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	4313      	orrs	r3, r2
 8004576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004578:	4a14      	ldr	r2, [pc, #80]	; (80045cc <HAL_GPIO_Init+0x354>)
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	3301      	adds	r3, #1
 8004582:	61fb      	str	r3, [r7, #28]
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	2b0f      	cmp	r3, #15
 8004588:	f67f ae84 	bls.w	8004294 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800458c:	bf00      	nop
 800458e:	bf00      	nop
 8004590:	3724      	adds	r7, #36	; 0x24
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	40023800 	.word	0x40023800
 80045a0:	40013800 	.word	0x40013800
 80045a4:	40020000 	.word	0x40020000
 80045a8:	40020400 	.word	0x40020400
 80045ac:	40020800 	.word	0x40020800
 80045b0:	40020c00 	.word	0x40020c00
 80045b4:	40021000 	.word	0x40021000
 80045b8:	40021400 	.word	0x40021400
 80045bc:	40021800 	.word	0x40021800
 80045c0:	40021c00 	.word	0x40021c00
 80045c4:	40022000 	.word	0x40022000
 80045c8:	40022400 	.word	0x40022400
 80045cc:	40013c00 	.word	0x40013c00

080045d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	460b      	mov	r3, r1
 80045da:	807b      	strh	r3, [r7, #2]
 80045dc:	4613      	mov	r3, r2
 80045de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045e0:	787b      	ldrb	r3, [r7, #1]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045e6:	887a      	ldrh	r2, [r7, #2]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045ec:	e003      	b.n	80045f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045ee:	887b      	ldrh	r3, [r7, #2]
 80045f0:	041a      	lsls	r2, r3, #16
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	619a      	str	r2, [r3, #24]
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004602:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004604:	b08f      	sub	sp, #60	; 0x3c
 8004606:	af0a      	add	r7, sp, #40	; 0x28
 8004608:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e10f      	b.n	8004834 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fc fb0e 	bl	8000c50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2203      	movs	r2, #3
 8004638:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004644:	2b00      	cmp	r3, #0
 8004646:	d102      	bne.n	800464e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f001 fefb 	bl	800644e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	603b      	str	r3, [r7, #0]
 800465e:	687e      	ldr	r6, [r7, #4]
 8004660:	466d      	mov	r5, sp
 8004662:	f106 0410 	add.w	r4, r6, #16
 8004666:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004668:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800466a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800466c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800466e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004672:	e885 0003 	stmia.w	r5, {r0, r1}
 8004676:	1d33      	adds	r3, r6, #4
 8004678:	cb0e      	ldmia	r3, {r1, r2, r3}
 800467a:	6838      	ldr	r0, [r7, #0]
 800467c:	f001 fe86 	bl	800638c <USB_CoreInit>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d005      	beq.n	8004692 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2202      	movs	r2, #2
 800468a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e0d0      	b.n	8004834 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2100      	movs	r1, #0
 8004698:	4618      	mov	r0, r3
 800469a:	f001 fee9 	bl	8006470 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800469e:	2300      	movs	r3, #0
 80046a0:	73fb      	strb	r3, [r7, #15]
 80046a2:	e04a      	b.n	800473a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80046a4:	7bfa      	ldrb	r2, [r7, #15]
 80046a6:	6879      	ldr	r1, [r7, #4]
 80046a8:	4613      	mov	r3, r2
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	333d      	adds	r3, #61	; 0x3d
 80046b4:	2201      	movs	r2, #1
 80046b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80046b8:	7bfa      	ldrb	r2, [r7, #15]
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	4613      	mov	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	333c      	adds	r3, #60	; 0x3c
 80046c8:	7bfa      	ldrb	r2, [r7, #15]
 80046ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80046cc:	7bfa      	ldrb	r2, [r7, #15]
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
 80046d0:	b298      	uxth	r0, r3
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	4613      	mov	r3, r2
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	4413      	add	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	440b      	add	r3, r1
 80046de:	3344      	adds	r3, #68	; 0x44
 80046e0:	4602      	mov	r2, r0
 80046e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80046e4:	7bfa      	ldrb	r2, [r7, #15]
 80046e6:	6879      	ldr	r1, [r7, #4]
 80046e8:	4613      	mov	r3, r2
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	4413      	add	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	440b      	add	r3, r1
 80046f2:	3340      	adds	r3, #64	; 0x40
 80046f4:	2200      	movs	r2, #0
 80046f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80046f8:	7bfa      	ldrb	r2, [r7, #15]
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	4613      	mov	r3, r2
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	4413      	add	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	3348      	adds	r3, #72	; 0x48
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800470c:	7bfa      	ldrb	r2, [r7, #15]
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	4613      	mov	r3, r2
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	4413      	add	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	440b      	add	r3, r1
 800471a:	334c      	adds	r3, #76	; 0x4c
 800471c:	2200      	movs	r2, #0
 800471e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004720:	7bfa      	ldrb	r2, [r7, #15]
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	4613      	mov	r3, r2
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	4413      	add	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	3354      	adds	r3, #84	; 0x54
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004734:	7bfb      	ldrb	r3, [r7, #15]
 8004736:	3301      	adds	r3, #1
 8004738:	73fb      	strb	r3, [r7, #15]
 800473a:	7bfa      	ldrb	r2, [r7, #15]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	429a      	cmp	r2, r3
 8004742:	d3af      	bcc.n	80046a4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004744:	2300      	movs	r3, #0
 8004746:	73fb      	strb	r3, [r7, #15]
 8004748:	e044      	b.n	80047d4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800474a:	7bfa      	ldrb	r2, [r7, #15]
 800474c:	6879      	ldr	r1, [r7, #4]
 800474e:	4613      	mov	r3, r2
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	4413      	add	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	440b      	add	r3, r1
 8004758:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800475c:	2200      	movs	r2, #0
 800475e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004760:	7bfa      	ldrb	r2, [r7, #15]
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	4613      	mov	r3, r2
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	4413      	add	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	440b      	add	r3, r1
 800476e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004772:	7bfa      	ldrb	r2, [r7, #15]
 8004774:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004776:	7bfa      	ldrb	r2, [r7, #15]
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	4613      	mov	r3, r2
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	4413      	add	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	440b      	add	r3, r1
 8004784:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004788:	2200      	movs	r2, #0
 800478a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800478c:	7bfa      	ldrb	r2, [r7, #15]
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	4613      	mov	r3, r2
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	4413      	add	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	440b      	add	r3, r1
 800479a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800479e:	2200      	movs	r2, #0
 80047a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80047a2:	7bfa      	ldrb	r2, [r7, #15]
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	4613      	mov	r3, r2
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	4413      	add	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	440b      	add	r3, r1
 80047b0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80047b8:	7bfa      	ldrb	r2, [r7, #15]
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	4613      	mov	r3, r2
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	4413      	add	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	440b      	add	r3, r1
 80047c6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80047ca:	2200      	movs	r2, #0
 80047cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047ce:	7bfb      	ldrb	r3, [r7, #15]
 80047d0:	3301      	adds	r3, #1
 80047d2:	73fb      	strb	r3, [r7, #15]
 80047d4:	7bfa      	ldrb	r2, [r7, #15]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d3b5      	bcc.n	800474a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	687e      	ldr	r6, [r7, #4]
 80047e6:	466d      	mov	r5, sp
 80047e8:	f106 0410 	add.w	r4, r6, #16
 80047ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80047fc:	1d33      	adds	r3, r6, #4
 80047fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004800:	6838      	ldr	r0, [r7, #0]
 8004802:	f001 fe81 	bl	8006508 <USB_DevInit>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d005      	beq.n	8004818 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e00d      	b.n	8004834 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4618      	mov	r0, r3
 800482e:	f002 f84c 	bl	80068ca <USB_DevDisconnect>

  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800483c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e267      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d075      	beq.n	8004946 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800485a:	4b88      	ldr	r3, [pc, #544]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 030c 	and.w	r3, r3, #12
 8004862:	2b04      	cmp	r3, #4
 8004864:	d00c      	beq.n	8004880 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004866:	4b85      	ldr	r3, [pc, #532]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800486e:	2b08      	cmp	r3, #8
 8004870:	d112      	bne.n	8004898 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004872:	4b82      	ldr	r3, [pc, #520]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800487a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800487e:	d10b      	bne.n	8004898 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004880:	4b7e      	ldr	r3, [pc, #504]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d05b      	beq.n	8004944 <HAL_RCC_OscConfig+0x108>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d157      	bne.n	8004944 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e242      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a0:	d106      	bne.n	80048b0 <HAL_RCC_OscConfig+0x74>
 80048a2:	4b76      	ldr	r3, [pc, #472]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a75      	ldr	r2, [pc, #468]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	e01d      	b.n	80048ec <HAL_RCC_OscConfig+0xb0>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048b8:	d10c      	bne.n	80048d4 <HAL_RCC_OscConfig+0x98>
 80048ba:	4b70      	ldr	r3, [pc, #448]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a6f      	ldr	r2, [pc, #444]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048c4:	6013      	str	r3, [r2, #0]
 80048c6:	4b6d      	ldr	r3, [pc, #436]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a6c      	ldr	r2, [pc, #432]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d0:	6013      	str	r3, [r2, #0]
 80048d2:	e00b      	b.n	80048ec <HAL_RCC_OscConfig+0xb0>
 80048d4:	4b69      	ldr	r3, [pc, #420]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a68      	ldr	r2, [pc, #416]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048de:	6013      	str	r3, [r2, #0]
 80048e0:	4b66      	ldr	r3, [pc, #408]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a65      	ldr	r2, [pc, #404]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d013      	beq.n	800491c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f4:	f7fe ffd0 	bl	8003898 <HAL_GetTick>
 80048f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048fc:	f7fe ffcc 	bl	8003898 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b64      	cmp	r3, #100	; 0x64
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e207      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490e:	4b5b      	ldr	r3, [pc, #364]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d0f0      	beq.n	80048fc <HAL_RCC_OscConfig+0xc0>
 800491a:	e014      	b.n	8004946 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491c:	f7fe ffbc 	bl	8003898 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004924:	f7fe ffb8 	bl	8003898 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b64      	cmp	r3, #100	; 0x64
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e1f3      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004936:	4b51      	ldr	r3, [pc, #324]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1f0      	bne.n	8004924 <HAL_RCC_OscConfig+0xe8>
 8004942:	e000      	b.n	8004946 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d063      	beq.n	8004a1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004952:	4b4a      	ldr	r3, [pc, #296]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 030c 	and.w	r3, r3, #12
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00b      	beq.n	8004976 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800495e:	4b47      	ldr	r3, [pc, #284]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004966:	2b08      	cmp	r3, #8
 8004968:	d11c      	bne.n	80049a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800496a:	4b44      	ldr	r3, [pc, #272]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d116      	bne.n	80049a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004976:	4b41      	ldr	r3, [pc, #260]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d005      	beq.n	800498e <HAL_RCC_OscConfig+0x152>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d001      	beq.n	800498e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e1c7      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800498e:	4b3b      	ldr	r3, [pc, #236]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	4937      	ldr	r1, [pc, #220]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049a2:	e03a      	b.n	8004a1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d020      	beq.n	80049ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049ac:	4b34      	ldr	r3, [pc, #208]	; (8004a80 <HAL_RCC_OscConfig+0x244>)
 80049ae:	2201      	movs	r2, #1
 80049b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b2:	f7fe ff71 	bl	8003898 <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049b8:	e008      	b.n	80049cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049ba:	f7fe ff6d 	bl	8003898 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e1a8      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049cc:	4b2b      	ldr	r3, [pc, #172]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0f0      	beq.n	80049ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049d8:	4b28      	ldr	r3, [pc, #160]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	4925      	ldr	r1, [pc, #148]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	600b      	str	r3, [r1, #0]
 80049ec:	e015      	b.n	8004a1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049ee:	4b24      	ldr	r3, [pc, #144]	; (8004a80 <HAL_RCC_OscConfig+0x244>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f4:	f7fe ff50 	bl	8003898 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049fc:	f7fe ff4c 	bl	8003898 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e187      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a0e:	4b1b      	ldr	r3, [pc, #108]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1f0      	bne.n	80049fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d036      	beq.n	8004a94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d016      	beq.n	8004a5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a2e:	4b15      	ldr	r3, [pc, #84]	; (8004a84 <HAL_RCC_OscConfig+0x248>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a34:	f7fe ff30 	bl	8003898 <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a3c:	f7fe ff2c 	bl	8003898 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e167      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a4e:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0f0      	beq.n	8004a3c <HAL_RCC_OscConfig+0x200>
 8004a5a:	e01b      	b.n	8004a94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a5c:	4b09      	ldr	r3, [pc, #36]	; (8004a84 <HAL_RCC_OscConfig+0x248>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a62:	f7fe ff19 	bl	8003898 <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a68:	e00e      	b.n	8004a88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a6a:	f7fe ff15 	bl	8003898 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d907      	bls.n	8004a88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e150      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	42470000 	.word	0x42470000
 8004a84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a88:	4b88      	ldr	r3, [pc, #544]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1ea      	bne.n	8004a6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0304 	and.w	r3, r3, #4
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 8097 	beq.w	8004bd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aa6:	4b81      	ldr	r3, [pc, #516]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10f      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60bb      	str	r3, [r7, #8]
 8004ab6:	4b7d      	ldr	r3, [pc, #500]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	4a7c      	ldr	r2, [pc, #496]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ac2:	4b7a      	ldr	r3, [pc, #488]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aca:	60bb      	str	r3, [r7, #8]
 8004acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad2:	4b77      	ldr	r3, [pc, #476]	; (8004cb0 <HAL_RCC_OscConfig+0x474>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d118      	bne.n	8004b10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ade:	4b74      	ldr	r3, [pc, #464]	; (8004cb0 <HAL_RCC_OscConfig+0x474>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a73      	ldr	r2, [pc, #460]	; (8004cb0 <HAL_RCC_OscConfig+0x474>)
 8004ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aea:	f7fe fed5 	bl	8003898 <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004af2:	f7fe fed1 	bl	8003898 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e10c      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b04:	4b6a      	ldr	r3, [pc, #424]	; (8004cb0 <HAL_RCC_OscConfig+0x474>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0f0      	beq.n	8004af2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d106      	bne.n	8004b26 <HAL_RCC_OscConfig+0x2ea>
 8004b18:	4b64      	ldr	r3, [pc, #400]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1c:	4a63      	ldr	r2, [pc, #396]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b1e:	f043 0301 	orr.w	r3, r3, #1
 8004b22:	6713      	str	r3, [r2, #112]	; 0x70
 8004b24:	e01c      	b.n	8004b60 <HAL_RCC_OscConfig+0x324>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	2b05      	cmp	r3, #5
 8004b2c:	d10c      	bne.n	8004b48 <HAL_RCC_OscConfig+0x30c>
 8004b2e:	4b5f      	ldr	r3, [pc, #380]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b32:	4a5e      	ldr	r2, [pc, #376]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b34:	f043 0304 	orr.w	r3, r3, #4
 8004b38:	6713      	str	r3, [r2, #112]	; 0x70
 8004b3a:	4b5c      	ldr	r3, [pc, #368]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3e:	4a5b      	ldr	r2, [pc, #364]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b40:	f043 0301 	orr.w	r3, r3, #1
 8004b44:	6713      	str	r3, [r2, #112]	; 0x70
 8004b46:	e00b      	b.n	8004b60 <HAL_RCC_OscConfig+0x324>
 8004b48:	4b58      	ldr	r3, [pc, #352]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4c:	4a57      	ldr	r2, [pc, #348]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b4e:	f023 0301 	bic.w	r3, r3, #1
 8004b52:	6713      	str	r3, [r2, #112]	; 0x70
 8004b54:	4b55      	ldr	r3, [pc, #340]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b58:	4a54      	ldr	r2, [pc, #336]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b5a:	f023 0304 	bic.w	r3, r3, #4
 8004b5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d015      	beq.n	8004b94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b68:	f7fe fe96 	bl	8003898 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b6e:	e00a      	b.n	8004b86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b70:	f7fe fe92 	bl	8003898 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e0cb      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b86:	4b49      	ldr	r3, [pc, #292]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0ee      	beq.n	8004b70 <HAL_RCC_OscConfig+0x334>
 8004b92:	e014      	b.n	8004bbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b94:	f7fe fe80 	bl	8003898 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b9a:	e00a      	b.n	8004bb2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b9c:	f7fe fe7c 	bl	8003898 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e0b5      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bb2:	4b3e      	ldr	r3, [pc, #248]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1ee      	bne.n	8004b9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bbe:	7dfb      	ldrb	r3, [r7, #23]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d105      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bc4:	4b39      	ldr	r3, [pc, #228]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc8:	4a38      	ldr	r2, [pc, #224]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 80a1 	beq.w	8004d1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bda:	4b34      	ldr	r3, [pc, #208]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 030c 	and.w	r3, r3, #12
 8004be2:	2b08      	cmp	r3, #8
 8004be4:	d05c      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d141      	bne.n	8004c72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bee:	4b31      	ldr	r3, [pc, #196]	; (8004cb4 <HAL_RCC_OscConfig+0x478>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf4:	f7fe fe50 	bl	8003898 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bfc:	f7fe fe4c 	bl	8003898 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e087      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c0e:	4b27      	ldr	r3, [pc, #156]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1f0      	bne.n	8004bfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	69da      	ldr	r2, [r3, #28]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	019b      	lsls	r3, r3, #6
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c30:	085b      	lsrs	r3, r3, #1
 8004c32:	3b01      	subs	r3, #1
 8004c34:	041b      	lsls	r3, r3, #16
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	061b      	lsls	r3, r3, #24
 8004c3e:	491b      	ldr	r1, [pc, #108]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c44:	4b1b      	ldr	r3, [pc, #108]	; (8004cb4 <HAL_RCC_OscConfig+0x478>)
 8004c46:	2201      	movs	r2, #1
 8004c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4a:	f7fe fe25 	bl	8003898 <HAL_GetTick>
 8004c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c50:	e008      	b.n	8004c64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c52:	f7fe fe21 	bl	8003898 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e05c      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c64:	4b11      	ldr	r3, [pc, #68]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0f0      	beq.n	8004c52 <HAL_RCC_OscConfig+0x416>
 8004c70:	e054      	b.n	8004d1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c72:	4b10      	ldr	r3, [pc, #64]	; (8004cb4 <HAL_RCC_OscConfig+0x478>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c78:	f7fe fe0e 	bl	8003898 <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c80:	f7fe fe0a 	bl	8003898 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e045      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c92:	4b06      	ldr	r3, [pc, #24]	; (8004cac <HAL_RCC_OscConfig+0x470>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1f0      	bne.n	8004c80 <HAL_RCC_OscConfig+0x444>
 8004c9e:	e03d      	b.n	8004d1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d107      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e038      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	40007000 	.word	0x40007000
 8004cb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cb8:	4b1b      	ldr	r3, [pc, #108]	; (8004d28 <HAL_RCC_OscConfig+0x4ec>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d028      	beq.n	8004d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d121      	bne.n	8004d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d11a      	bne.n	8004d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ce8:	4013      	ands	r3, r2
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d111      	bne.n	8004d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfe:	085b      	lsrs	r3, r3, #1
 8004d00:	3b01      	subs	r3, #1
 8004d02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d107      	bne.n	8004d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d001      	beq.n	8004d1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e000      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3718      	adds	r7, #24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	40023800 	.word	0x40023800

08004d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e0cc      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d40:	4b68      	ldr	r3, [pc, #416]	; (8004ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 030f 	and.w	r3, r3, #15
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d90c      	bls.n	8004d68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d4e:	4b65      	ldr	r3, [pc, #404]	; (8004ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d56:	4b63      	ldr	r3, [pc, #396]	; (8004ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d001      	beq.n	8004d68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e0b8      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d020      	beq.n	8004db6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d005      	beq.n	8004d8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d80:	4b59      	ldr	r3, [pc, #356]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	4a58      	ldr	r2, [pc, #352]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0308 	and.w	r3, r3, #8
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d005      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d98:	4b53      	ldr	r3, [pc, #332]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	4a52      	ldr	r2, [pc, #328]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004da2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004da4:	4b50      	ldr	r3, [pc, #320]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	494d      	ldr	r1, [pc, #308]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d044      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d107      	bne.n	8004dda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dca:	4b47      	ldr	r3, [pc, #284]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d119      	bne.n	8004e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e07f      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d003      	beq.n	8004dea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d107      	bne.n	8004dfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dea:	4b3f      	ldr	r3, [pc, #252]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d109      	bne.n	8004e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e06f      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dfa:	4b3b      	ldr	r3, [pc, #236]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e067      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e0a:	4b37      	ldr	r3, [pc, #220]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f023 0203 	bic.w	r2, r3, #3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	4934      	ldr	r1, [pc, #208]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e1c:	f7fe fd3c 	bl	8003898 <HAL_GetTick>
 8004e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e22:	e00a      	b.n	8004e3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e24:	f7fe fd38 	bl	8003898 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e04f      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e3a:	4b2b      	ldr	r3, [pc, #172]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 020c 	and.w	r2, r3, #12
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d1eb      	bne.n	8004e24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e4c:	4b25      	ldr	r3, [pc, #148]	; (8004ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 030f 	and.w	r3, r3, #15
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d20c      	bcs.n	8004e74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e5a:	4b22      	ldr	r3, [pc, #136]	; (8004ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e62:	4b20      	ldr	r3, [pc, #128]	; (8004ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 030f 	and.w	r3, r3, #15
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d001      	beq.n	8004e74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e032      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0304 	and.w	r3, r3, #4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d008      	beq.n	8004e92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e80:	4b19      	ldr	r3, [pc, #100]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	4916      	ldr	r1, [pc, #88]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0308 	and.w	r3, r3, #8
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d009      	beq.n	8004eb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e9e:	4b12      	ldr	r3, [pc, #72]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	490e      	ldr	r1, [pc, #56]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004eb2:	f000 f821 	bl	8004ef8 <HAL_RCC_GetSysClockFreq>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	4b0b      	ldr	r3, [pc, #44]	; (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	091b      	lsrs	r3, r3, #4
 8004ebe:	f003 030f 	and.w	r3, r3, #15
 8004ec2:	490a      	ldr	r1, [pc, #40]	; (8004eec <HAL_RCC_ClockConfig+0x1c0>)
 8004ec4:	5ccb      	ldrb	r3, [r1, r3]
 8004ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eca:	4a09      	ldr	r2, [pc, #36]	; (8004ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ece:	4b09      	ldr	r3, [pc, #36]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fe fc9c 	bl	8003810 <HAL_InitTick>

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40023c00 	.word	0x40023c00
 8004ee8:	40023800 	.word	0x40023800
 8004eec:	08006e8c 	.word	0x08006e8c
 8004ef0:	20000000 	.word	0x20000000
 8004ef4:	20000004 	.word	0x20000004

08004ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004efc:	b094      	sub	sp, #80	; 0x50
 8004efe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	647b      	str	r3, [r7, #68]	; 0x44
 8004f04:	2300      	movs	r3, #0
 8004f06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f08:	2300      	movs	r3, #0
 8004f0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f10:	4b79      	ldr	r3, [pc, #484]	; (80050f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f003 030c 	and.w	r3, r3, #12
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d00d      	beq.n	8004f38 <HAL_RCC_GetSysClockFreq+0x40>
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	f200 80e1 	bhi.w	80050e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d002      	beq.n	8004f2c <HAL_RCC_GetSysClockFreq+0x34>
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d003      	beq.n	8004f32 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f2a:	e0db      	b.n	80050e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f2c:	4b73      	ldr	r3, [pc, #460]	; (80050fc <HAL_RCC_GetSysClockFreq+0x204>)
 8004f2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004f30:	e0db      	b.n	80050ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f32:	4b73      	ldr	r3, [pc, #460]	; (8005100 <HAL_RCC_GetSysClockFreq+0x208>)
 8004f34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f36:	e0d8      	b.n	80050ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f38:	4b6f      	ldr	r3, [pc, #444]	; (80050f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f42:	4b6d      	ldr	r3, [pc, #436]	; (80050f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d063      	beq.n	8005016 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f4e:	4b6a      	ldr	r3, [pc, #424]	; (80050f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	099b      	lsrs	r3, r3, #6
 8004f54:	2200      	movs	r2, #0
 8004f56:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f60:	633b      	str	r3, [r7, #48]	; 0x30
 8004f62:	2300      	movs	r3, #0
 8004f64:	637b      	str	r3, [r7, #52]	; 0x34
 8004f66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004f6a:	4622      	mov	r2, r4
 8004f6c:	462b      	mov	r3, r5
 8004f6e:	f04f 0000 	mov.w	r0, #0
 8004f72:	f04f 0100 	mov.w	r1, #0
 8004f76:	0159      	lsls	r1, r3, #5
 8004f78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f7c:	0150      	lsls	r0, r2, #5
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	4621      	mov	r1, r4
 8004f84:	1a51      	subs	r1, r2, r1
 8004f86:	6139      	str	r1, [r7, #16]
 8004f88:	4629      	mov	r1, r5
 8004f8a:	eb63 0301 	sbc.w	r3, r3, r1
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	f04f 0200 	mov.w	r2, #0
 8004f94:	f04f 0300 	mov.w	r3, #0
 8004f98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f9c:	4659      	mov	r1, fp
 8004f9e:	018b      	lsls	r3, r1, #6
 8004fa0:	4651      	mov	r1, sl
 8004fa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004fa6:	4651      	mov	r1, sl
 8004fa8:	018a      	lsls	r2, r1, #6
 8004faa:	4651      	mov	r1, sl
 8004fac:	ebb2 0801 	subs.w	r8, r2, r1
 8004fb0:	4659      	mov	r1, fp
 8004fb2:	eb63 0901 	sbc.w	r9, r3, r1
 8004fb6:	f04f 0200 	mov.w	r2, #0
 8004fba:	f04f 0300 	mov.w	r3, #0
 8004fbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fca:	4690      	mov	r8, r2
 8004fcc:	4699      	mov	r9, r3
 8004fce:	4623      	mov	r3, r4
 8004fd0:	eb18 0303 	adds.w	r3, r8, r3
 8004fd4:	60bb      	str	r3, [r7, #8]
 8004fd6:	462b      	mov	r3, r5
 8004fd8:	eb49 0303 	adc.w	r3, r9, r3
 8004fdc:	60fb      	str	r3, [r7, #12]
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	f04f 0300 	mov.w	r3, #0
 8004fe6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004fea:	4629      	mov	r1, r5
 8004fec:	024b      	lsls	r3, r1, #9
 8004fee:	4621      	mov	r1, r4
 8004ff0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ff4:	4621      	mov	r1, r4
 8004ff6:	024a      	lsls	r2, r1, #9
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ffe:	2200      	movs	r2, #0
 8005000:	62bb      	str	r3, [r7, #40]	; 0x28
 8005002:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005004:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005008:	f7fb f8f8 	bl	80001fc <__aeabi_uldivmod>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4613      	mov	r3, r2
 8005012:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005014:	e058      	b.n	80050c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005016:	4b38      	ldr	r3, [pc, #224]	; (80050f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	099b      	lsrs	r3, r3, #6
 800501c:	2200      	movs	r2, #0
 800501e:	4618      	mov	r0, r3
 8005020:	4611      	mov	r1, r2
 8005022:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005026:	623b      	str	r3, [r7, #32]
 8005028:	2300      	movs	r3, #0
 800502a:	627b      	str	r3, [r7, #36]	; 0x24
 800502c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005030:	4642      	mov	r2, r8
 8005032:	464b      	mov	r3, r9
 8005034:	f04f 0000 	mov.w	r0, #0
 8005038:	f04f 0100 	mov.w	r1, #0
 800503c:	0159      	lsls	r1, r3, #5
 800503e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005042:	0150      	lsls	r0, r2, #5
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	4641      	mov	r1, r8
 800504a:	ebb2 0a01 	subs.w	sl, r2, r1
 800504e:	4649      	mov	r1, r9
 8005050:	eb63 0b01 	sbc.w	fp, r3, r1
 8005054:	f04f 0200 	mov.w	r2, #0
 8005058:	f04f 0300 	mov.w	r3, #0
 800505c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005060:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005064:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005068:	ebb2 040a 	subs.w	r4, r2, sl
 800506c:	eb63 050b 	sbc.w	r5, r3, fp
 8005070:	f04f 0200 	mov.w	r2, #0
 8005074:	f04f 0300 	mov.w	r3, #0
 8005078:	00eb      	lsls	r3, r5, #3
 800507a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800507e:	00e2      	lsls	r2, r4, #3
 8005080:	4614      	mov	r4, r2
 8005082:	461d      	mov	r5, r3
 8005084:	4643      	mov	r3, r8
 8005086:	18e3      	adds	r3, r4, r3
 8005088:	603b      	str	r3, [r7, #0]
 800508a:	464b      	mov	r3, r9
 800508c:	eb45 0303 	adc.w	r3, r5, r3
 8005090:	607b      	str	r3, [r7, #4]
 8005092:	f04f 0200 	mov.w	r2, #0
 8005096:	f04f 0300 	mov.w	r3, #0
 800509a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800509e:	4629      	mov	r1, r5
 80050a0:	028b      	lsls	r3, r1, #10
 80050a2:	4621      	mov	r1, r4
 80050a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050a8:	4621      	mov	r1, r4
 80050aa:	028a      	lsls	r2, r1, #10
 80050ac:	4610      	mov	r0, r2
 80050ae:	4619      	mov	r1, r3
 80050b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050b2:	2200      	movs	r2, #0
 80050b4:	61bb      	str	r3, [r7, #24]
 80050b6:	61fa      	str	r2, [r7, #28]
 80050b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050bc:	f7fb f89e 	bl	80001fc <__aeabi_uldivmod>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	4613      	mov	r3, r2
 80050c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050c8:	4b0b      	ldr	r3, [pc, #44]	; (80050f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	0c1b      	lsrs	r3, r3, #16
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	3301      	adds	r3, #1
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80050d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050e2:	e002      	b.n	80050ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050e4:	4b05      	ldr	r3, [pc, #20]	; (80050fc <HAL_RCC_GetSysClockFreq+0x204>)
 80050e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3750      	adds	r7, #80	; 0x50
 80050f0:	46bd      	mov	sp, r7
 80050f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050f6:	bf00      	nop
 80050f8:	40023800 	.word	0x40023800
 80050fc:	00f42400 	.word	0x00f42400
 8005100:	007a1200 	.word	0x007a1200

08005104 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005108:	4b03      	ldr	r3, [pc, #12]	; (8005118 <HAL_RCC_GetHCLKFreq+0x14>)
 800510a:	681b      	ldr	r3, [r3, #0]
}
 800510c:	4618      	mov	r0, r3
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	20000000 	.word	0x20000000

0800511c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005120:	f7ff fff0 	bl	8005104 <HAL_RCC_GetHCLKFreq>
 8005124:	4602      	mov	r2, r0
 8005126:	4b05      	ldr	r3, [pc, #20]	; (800513c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	0a9b      	lsrs	r3, r3, #10
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	4903      	ldr	r1, [pc, #12]	; (8005140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005132:	5ccb      	ldrb	r3, [r1, r3]
 8005134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005138:	4618      	mov	r0, r3
 800513a:	bd80      	pop	{r7, pc}
 800513c:	40023800 	.word	0x40023800
 8005140:	08006e9c 	.word	0x08006e9c

08005144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005148:	f7ff ffdc 	bl	8005104 <HAL_RCC_GetHCLKFreq>
 800514c:	4602      	mov	r2, r0
 800514e:	4b05      	ldr	r3, [pc, #20]	; (8005164 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	0b5b      	lsrs	r3, r3, #13
 8005154:	f003 0307 	and.w	r3, r3, #7
 8005158:	4903      	ldr	r1, [pc, #12]	; (8005168 <HAL_RCC_GetPCLK2Freq+0x24>)
 800515a:	5ccb      	ldrb	r3, [r1, r3]
 800515c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005160:	4618      	mov	r0, r3
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40023800 	.word	0x40023800
 8005168:	08006e9c 	.word	0x08006e9c

0800516c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e041      	b.n	8005202 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d106      	bne.n	8005198 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fb fcee 	bl	8000b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3304      	adds	r3, #4
 80051a8:	4619      	mov	r1, r3
 80051aa:	4610      	mov	r0, r2
 80051ac:	f000 fa96 	bl	80056dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
	...

0800520c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b01      	cmp	r3, #1
 800521e:	d001      	beq.n	8005224 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e04e      	b.n	80052c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0201 	orr.w	r2, r2, #1
 800523a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a23      	ldr	r2, [pc, #140]	; (80052d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d022      	beq.n	800528c <HAL_TIM_Base_Start_IT+0x80>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800524e:	d01d      	beq.n	800528c <HAL_TIM_Base_Start_IT+0x80>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a1f      	ldr	r2, [pc, #124]	; (80052d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d018      	beq.n	800528c <HAL_TIM_Base_Start_IT+0x80>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a1e      	ldr	r2, [pc, #120]	; (80052d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d013      	beq.n	800528c <HAL_TIM_Base_Start_IT+0x80>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a1c      	ldr	r2, [pc, #112]	; (80052dc <HAL_TIM_Base_Start_IT+0xd0>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d00e      	beq.n	800528c <HAL_TIM_Base_Start_IT+0x80>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a1b      	ldr	r2, [pc, #108]	; (80052e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d009      	beq.n	800528c <HAL_TIM_Base_Start_IT+0x80>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a19      	ldr	r2, [pc, #100]	; (80052e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d004      	beq.n	800528c <HAL_TIM_Base_Start_IT+0x80>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a18      	ldr	r2, [pc, #96]	; (80052e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d111      	bne.n	80052b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f003 0307 	and.w	r3, r3, #7
 8005296:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2b06      	cmp	r3, #6
 800529c:	d010      	beq.n	80052c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f042 0201 	orr.w	r2, r2, #1
 80052ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ae:	e007      	b.n	80052c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0201 	orr.w	r2, r2, #1
 80052be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	40010000 	.word	0x40010000
 80052d4:	40000400 	.word	0x40000400
 80052d8:	40000800 	.word	0x40000800
 80052dc:	40000c00 	.word	0x40000c00
 80052e0:	40010400 	.word	0x40010400
 80052e4:	40014000 	.word	0x40014000
 80052e8:	40001800 	.word	0x40001800

080052ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d122      	bne.n	8005348 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b02      	cmp	r3, #2
 800530e:	d11b      	bne.n	8005348 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f06f 0202 	mvn.w	r2, #2
 8005318:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f9b5 	bl	800569e <HAL_TIM_IC_CaptureCallback>
 8005334:	e005      	b.n	8005342 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f9a7 	bl	800568a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f9b8 	bl	80056b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	f003 0304 	and.w	r3, r3, #4
 8005352:	2b04      	cmp	r3, #4
 8005354:	d122      	bne.n	800539c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b04      	cmp	r3, #4
 8005362:	d11b      	bne.n	800539c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f06f 0204 	mvn.w	r2, #4
 800536c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2202      	movs	r2, #2
 8005372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f98b 	bl	800569e <HAL_TIM_IC_CaptureCallback>
 8005388:	e005      	b.n	8005396 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f97d 	bl	800568a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f98e 	bl	80056b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	2b08      	cmp	r3, #8
 80053a8:	d122      	bne.n	80053f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f003 0308 	and.w	r3, r3, #8
 80053b4:	2b08      	cmp	r3, #8
 80053b6:	d11b      	bne.n	80053f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f06f 0208 	mvn.w	r2, #8
 80053c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2204      	movs	r2, #4
 80053c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f961 	bl	800569e <HAL_TIM_IC_CaptureCallback>
 80053dc:	e005      	b.n	80053ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f953 	bl	800568a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f964 	bl	80056b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f003 0310 	and.w	r3, r3, #16
 80053fa:	2b10      	cmp	r3, #16
 80053fc:	d122      	bne.n	8005444 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f003 0310 	and.w	r3, r3, #16
 8005408:	2b10      	cmp	r3, #16
 800540a:	d11b      	bne.n	8005444 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f06f 0210 	mvn.w	r2, #16
 8005414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2208      	movs	r2, #8
 800541a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f937 	bl	800569e <HAL_TIM_IC_CaptureCallback>
 8005430:	e005      	b.n	800543e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f929 	bl	800568a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f93a 	bl	80056b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b01      	cmp	r3, #1
 8005450:	d10e      	bne.n	8005470 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b01      	cmp	r3, #1
 800545e:	d107      	bne.n	8005470 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f06f 0201 	mvn.w	r2, #1
 8005468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7fb fcc6 	bl	8000dfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547a:	2b80      	cmp	r3, #128	; 0x80
 800547c:	d10e      	bne.n	800549c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005488:	2b80      	cmp	r3, #128	; 0x80
 800548a:	d107      	bne.n	800549c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fae0 	bl	8005a5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a6:	2b40      	cmp	r3, #64	; 0x40
 80054a8:	d10e      	bne.n	80054c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b4:	2b40      	cmp	r3, #64	; 0x40
 80054b6:	d107      	bne.n	80054c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f8ff 	bl	80056c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f003 0320 	and.w	r3, r3, #32
 80054d2:	2b20      	cmp	r3, #32
 80054d4:	d10e      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f003 0320 	and.w	r3, r3, #32
 80054e0:	2b20      	cmp	r3, #32
 80054e2:	d107      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f06f 0220 	mvn.w	r2, #32
 80054ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 faaa 	bl	8005a48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054f4:	bf00      	nop
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005506:	2300      	movs	r3, #0
 8005508:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_TIM_ConfigClockSource+0x1c>
 8005514:	2302      	movs	r3, #2
 8005516:	e0b4      	b.n	8005682 <HAL_TIM_ConfigClockSource+0x186>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800553e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005550:	d03e      	beq.n	80055d0 <HAL_TIM_ConfigClockSource+0xd4>
 8005552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005556:	f200 8087 	bhi.w	8005668 <HAL_TIM_ConfigClockSource+0x16c>
 800555a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800555e:	f000 8086 	beq.w	800566e <HAL_TIM_ConfigClockSource+0x172>
 8005562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005566:	d87f      	bhi.n	8005668 <HAL_TIM_ConfigClockSource+0x16c>
 8005568:	2b70      	cmp	r3, #112	; 0x70
 800556a:	d01a      	beq.n	80055a2 <HAL_TIM_ConfigClockSource+0xa6>
 800556c:	2b70      	cmp	r3, #112	; 0x70
 800556e:	d87b      	bhi.n	8005668 <HAL_TIM_ConfigClockSource+0x16c>
 8005570:	2b60      	cmp	r3, #96	; 0x60
 8005572:	d050      	beq.n	8005616 <HAL_TIM_ConfigClockSource+0x11a>
 8005574:	2b60      	cmp	r3, #96	; 0x60
 8005576:	d877      	bhi.n	8005668 <HAL_TIM_ConfigClockSource+0x16c>
 8005578:	2b50      	cmp	r3, #80	; 0x50
 800557a:	d03c      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0xfa>
 800557c:	2b50      	cmp	r3, #80	; 0x50
 800557e:	d873      	bhi.n	8005668 <HAL_TIM_ConfigClockSource+0x16c>
 8005580:	2b40      	cmp	r3, #64	; 0x40
 8005582:	d058      	beq.n	8005636 <HAL_TIM_ConfigClockSource+0x13a>
 8005584:	2b40      	cmp	r3, #64	; 0x40
 8005586:	d86f      	bhi.n	8005668 <HAL_TIM_ConfigClockSource+0x16c>
 8005588:	2b30      	cmp	r3, #48	; 0x30
 800558a:	d064      	beq.n	8005656 <HAL_TIM_ConfigClockSource+0x15a>
 800558c:	2b30      	cmp	r3, #48	; 0x30
 800558e:	d86b      	bhi.n	8005668 <HAL_TIM_ConfigClockSource+0x16c>
 8005590:	2b20      	cmp	r3, #32
 8005592:	d060      	beq.n	8005656 <HAL_TIM_ConfigClockSource+0x15a>
 8005594:	2b20      	cmp	r3, #32
 8005596:	d867      	bhi.n	8005668 <HAL_TIM_ConfigClockSource+0x16c>
 8005598:	2b00      	cmp	r3, #0
 800559a:	d05c      	beq.n	8005656 <HAL_TIM_ConfigClockSource+0x15a>
 800559c:	2b10      	cmp	r3, #16
 800559e:	d05a      	beq.n	8005656 <HAL_TIM_ConfigClockSource+0x15a>
 80055a0:	e062      	b.n	8005668 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6818      	ldr	r0, [r3, #0]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	6899      	ldr	r1, [r3, #8]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	f000 f9ad 	bl	8005910 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	609a      	str	r2, [r3, #8]
      break;
 80055ce:	e04f      	b.n	8005670 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6818      	ldr	r0, [r3, #0]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	6899      	ldr	r1, [r3, #8]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f000 f996 	bl	8005910 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	689a      	ldr	r2, [r3, #8]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055f2:	609a      	str	r2, [r3, #8]
      break;
 80055f4:	e03c      	b.n	8005670 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6818      	ldr	r0, [r3, #0]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	6859      	ldr	r1, [r3, #4]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	461a      	mov	r2, r3
 8005604:	f000 f90a 	bl	800581c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2150      	movs	r1, #80	; 0x50
 800560e:	4618      	mov	r0, r3
 8005610:	f000 f963 	bl	80058da <TIM_ITRx_SetConfig>
      break;
 8005614:	e02c      	b.n	8005670 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6818      	ldr	r0, [r3, #0]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	6859      	ldr	r1, [r3, #4]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	461a      	mov	r2, r3
 8005624:	f000 f929 	bl	800587a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2160      	movs	r1, #96	; 0x60
 800562e:	4618      	mov	r0, r3
 8005630:	f000 f953 	bl	80058da <TIM_ITRx_SetConfig>
      break;
 8005634:	e01c      	b.n	8005670 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6818      	ldr	r0, [r3, #0]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	6859      	ldr	r1, [r3, #4]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	461a      	mov	r2, r3
 8005644:	f000 f8ea 	bl	800581c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2140      	movs	r1, #64	; 0x40
 800564e:	4618      	mov	r0, r3
 8005650:	f000 f943 	bl	80058da <TIM_ITRx_SetConfig>
      break;
 8005654:	e00c      	b.n	8005670 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4619      	mov	r1, r3
 8005660:	4610      	mov	r0, r2
 8005662:	f000 f93a 	bl	80058da <TIM_ITRx_SetConfig>
      break;
 8005666:	e003      	b.n	8005670 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	73fb      	strb	r3, [r7, #15]
      break;
 800566c:	e000      	b.n	8005670 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800566e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005680:	7bfb      	ldrb	r3, [r7, #15]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800568a:	b480      	push	{r7}
 800568c:	b083      	sub	sp, #12
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005692:	bf00      	nop
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056a6:	bf00      	nop
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056ba:	bf00      	nop
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056ce:	bf00      	nop
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
	...

080056dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a40      	ldr	r2, [pc, #256]	; (80057f0 <TIM_Base_SetConfig+0x114>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d013      	beq.n	800571c <TIM_Base_SetConfig+0x40>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fa:	d00f      	beq.n	800571c <TIM_Base_SetConfig+0x40>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a3d      	ldr	r2, [pc, #244]	; (80057f4 <TIM_Base_SetConfig+0x118>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d00b      	beq.n	800571c <TIM_Base_SetConfig+0x40>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a3c      	ldr	r2, [pc, #240]	; (80057f8 <TIM_Base_SetConfig+0x11c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d007      	beq.n	800571c <TIM_Base_SetConfig+0x40>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a3b      	ldr	r2, [pc, #236]	; (80057fc <TIM_Base_SetConfig+0x120>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d003      	beq.n	800571c <TIM_Base_SetConfig+0x40>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a3a      	ldr	r2, [pc, #232]	; (8005800 <TIM_Base_SetConfig+0x124>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d108      	bne.n	800572e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a2f      	ldr	r2, [pc, #188]	; (80057f0 <TIM_Base_SetConfig+0x114>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d02b      	beq.n	800578e <TIM_Base_SetConfig+0xb2>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800573c:	d027      	beq.n	800578e <TIM_Base_SetConfig+0xb2>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a2c      	ldr	r2, [pc, #176]	; (80057f4 <TIM_Base_SetConfig+0x118>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d023      	beq.n	800578e <TIM_Base_SetConfig+0xb2>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a2b      	ldr	r2, [pc, #172]	; (80057f8 <TIM_Base_SetConfig+0x11c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d01f      	beq.n	800578e <TIM_Base_SetConfig+0xb2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a2a      	ldr	r2, [pc, #168]	; (80057fc <TIM_Base_SetConfig+0x120>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d01b      	beq.n	800578e <TIM_Base_SetConfig+0xb2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a29      	ldr	r2, [pc, #164]	; (8005800 <TIM_Base_SetConfig+0x124>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d017      	beq.n	800578e <TIM_Base_SetConfig+0xb2>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a28      	ldr	r2, [pc, #160]	; (8005804 <TIM_Base_SetConfig+0x128>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d013      	beq.n	800578e <TIM_Base_SetConfig+0xb2>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a27      	ldr	r2, [pc, #156]	; (8005808 <TIM_Base_SetConfig+0x12c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00f      	beq.n	800578e <TIM_Base_SetConfig+0xb2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a26      	ldr	r2, [pc, #152]	; (800580c <TIM_Base_SetConfig+0x130>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d00b      	beq.n	800578e <TIM_Base_SetConfig+0xb2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a25      	ldr	r2, [pc, #148]	; (8005810 <TIM_Base_SetConfig+0x134>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d007      	beq.n	800578e <TIM_Base_SetConfig+0xb2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a24      	ldr	r2, [pc, #144]	; (8005814 <TIM_Base_SetConfig+0x138>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d003      	beq.n	800578e <TIM_Base_SetConfig+0xb2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a23      	ldr	r2, [pc, #140]	; (8005818 <TIM_Base_SetConfig+0x13c>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d108      	bne.n	80057a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	4313      	orrs	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a0a      	ldr	r2, [pc, #40]	; (80057f0 <TIM_Base_SetConfig+0x114>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d003      	beq.n	80057d4 <TIM_Base_SetConfig+0xf8>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a0c      	ldr	r2, [pc, #48]	; (8005800 <TIM_Base_SetConfig+0x124>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d103      	bne.n	80057dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	691a      	ldr	r2, [r3, #16]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	615a      	str	r2, [r3, #20]
}
 80057e2:	bf00      	nop
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	40010000 	.word	0x40010000
 80057f4:	40000400 	.word	0x40000400
 80057f8:	40000800 	.word	0x40000800
 80057fc:	40000c00 	.word	0x40000c00
 8005800:	40010400 	.word	0x40010400
 8005804:	40014000 	.word	0x40014000
 8005808:	40014400 	.word	0x40014400
 800580c:	40014800 	.word	0x40014800
 8005810:	40001800 	.word	0x40001800
 8005814:	40001c00 	.word	0x40001c00
 8005818:	40002000 	.word	0x40002000

0800581c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6a1b      	ldr	r3, [r3, #32]
 800582c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	f023 0201 	bic.w	r2, r3, #1
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	011b      	lsls	r3, r3, #4
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	4313      	orrs	r3, r2
 8005850:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f023 030a 	bic.w	r3, r3, #10
 8005858:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	4313      	orrs	r3, r2
 8005860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	621a      	str	r2, [r3, #32]
}
 800586e:	bf00      	nop
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800587a:	b480      	push	{r7}
 800587c:	b087      	sub	sp, #28
 800587e:	af00      	add	r7, sp, #0
 8005880:	60f8      	str	r0, [r7, #12]
 8005882:	60b9      	str	r1, [r7, #8]
 8005884:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	f023 0210 	bic.w	r2, r3, #16
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	031b      	lsls	r3, r3, #12
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	4313      	orrs	r3, r2
 80058c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	621a      	str	r2, [r3, #32]
}
 80058ce:	bf00      	nop
 80058d0:	371c      	adds	r7, #28
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058da:	b480      	push	{r7}
 80058dc:	b085      	sub	sp, #20
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
 80058e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	f043 0307 	orr.w	r3, r3, #7
 80058fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	609a      	str	r2, [r3, #8]
}
 8005904:	bf00      	nop
 8005906:	3714      	adds	r7, #20
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800592a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	021a      	lsls	r2, r3, #8
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	431a      	orrs	r2, r3
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	4313      	orrs	r3, r2
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	4313      	orrs	r3, r2
 800593c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	609a      	str	r2, [r3, #8]
}
 8005944:	bf00      	nop
 8005946:	371c      	adds	r7, #28
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005960:	2b01      	cmp	r3, #1
 8005962:	d101      	bne.n	8005968 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005964:	2302      	movs	r3, #2
 8005966:	e05a      	b.n	8005a1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2202      	movs	r2, #2
 8005974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a21      	ldr	r2, [pc, #132]	; (8005a2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d022      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b4:	d01d      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a1d      	ldr	r2, [pc, #116]	; (8005a30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d018      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a1b      	ldr	r2, [pc, #108]	; (8005a34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d013      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a1a      	ldr	r2, [pc, #104]	; (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d00e      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a18      	ldr	r2, [pc, #96]	; (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d009      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a17      	ldr	r2, [pc, #92]	; (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d004      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a15      	ldr	r2, [pc, #84]	; (8005a44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d10c      	bne.n	8005a0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	40010000 	.word	0x40010000
 8005a30:	40000400 	.word	0x40000400
 8005a34:	40000800 	.word	0x40000800
 8005a38:	40000c00 	.word	0x40000c00
 8005a3c:	40010400 	.word	0x40010400
 8005a40:	40014000 	.word	0x40014000
 8005a44:	40001800 	.word	0x40001800

08005a48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e03f      	b.n	8005b02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d106      	bne.n	8005a9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7fb f892 	bl	8000bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2224      	movs	r2, #36	; 0x24
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68da      	ldr	r2, [r3, #12]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ab2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f9f5 	bl	8005ea4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	691a      	ldr	r2, [r3, #16]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ac8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	695a      	ldr	r2, [r3, #20]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ad8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68da      	ldr	r2, [r3, #12]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ae8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2220      	movs	r2, #32
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2220      	movs	r2, #32
 8005afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3708      	adds	r7, #8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
	...

08005b0c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b08c      	sub	sp, #48	; 0x30
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	4613      	mov	r3, r2
 8005b18:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b20      	cmp	r3, #32
 8005b24:	d165      	bne.n	8005bf2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d002      	beq.n	8005b32 <HAL_UART_Transmit_DMA+0x26>
 8005b2c:	88fb      	ldrh	r3, [r7, #6]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e05e      	b.n	8005bf4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d101      	bne.n	8005b44 <HAL_UART_Transmit_DMA+0x38>
 8005b40:	2302      	movs	r3, #2
 8005b42:	e057      	b.n	8005bf4 <HAL_UART_Transmit_DMA+0xe8>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	88fa      	ldrh	r2, [r7, #6]
 8005b56:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	88fa      	ldrh	r2, [r7, #6]
 8005b5c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2221      	movs	r2, #33	; 0x21
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b70:	4a22      	ldr	r2, [pc, #136]	; (8005bfc <HAL_UART_Transmit_DMA+0xf0>)
 8005b72:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b78:	4a21      	ldr	r2, [pc, #132]	; (8005c00 <HAL_UART_Transmit_DMA+0xf4>)
 8005b7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b80:	4a20      	ldr	r2, [pc, #128]	; (8005c04 <HAL_UART_Transmit_DMA+0xf8>)
 8005b82:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b88:	2200      	movs	r2, #0
 8005b8a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005b8c:	f107 0308 	add.w	r3, r7, #8
 8005b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b98:	6819      	ldr	r1, [r3, #0]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3304      	adds	r3, #4
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	88fb      	ldrh	r3, [r7, #6]
 8005ba4:	f7fd ffb9 	bl	8003b1a <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bb0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3314      	adds	r3, #20
 8005bc0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	e853 3f00 	ldrex	r3, [r3]
 8005bc8:	617b      	str	r3, [r7, #20]
   return(result);
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3314      	adds	r3, #20
 8005bd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bda:	627a      	str	r2, [r7, #36]	; 0x24
 8005bdc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bde:	6a39      	ldr	r1, [r7, #32]
 8005be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005be2:	e841 2300 	strex	r3, r2, [r1]
 8005be6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1e5      	bne.n	8005bba <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	e000      	b.n	8005bf4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005bf2:	2302      	movs	r3, #2
  }
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3730      	adds	r7, #48	; 0x30
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	08005c45 	.word	0x08005c45
 8005c00:	08005cdf 	.word	0x08005cdf
 8005c04:	08005cfb 	.word	0x08005cfb

08005c08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b090      	sub	sp, #64	; 0x40
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c50:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d137      	bne.n	8005cd0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c62:	2200      	movs	r2, #0
 8005c64:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3314      	adds	r3, #20
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	e853 3f00 	ldrex	r3, [r3]
 8005c74:	623b      	str	r3, [r7, #32]
   return(result);
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3314      	adds	r3, #20
 8005c84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c86:	633a      	str	r2, [r7, #48]	; 0x30
 8005c88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c8e:	e841 2300 	strex	r3, r2, [r1]
 8005c92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1e5      	bne.n	8005c66 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	330c      	adds	r3, #12
 8005ca0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	e853 3f00 	ldrex	r3, [r3]
 8005ca8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cb0:	637b      	str	r3, [r7, #52]	; 0x34
 8005cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	330c      	adds	r3, #12
 8005cb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cba:	61fa      	str	r2, [r7, #28]
 8005cbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbe:	69b9      	ldr	r1, [r7, #24]
 8005cc0:	69fa      	ldr	r2, [r7, #28]
 8005cc2:	e841 2300 	strex	r3, r2, [r1]
 8005cc6:	617b      	str	r3, [r7, #20]
   return(result);
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1e5      	bne.n	8005c9a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005cce:	e002      	b.n	8005cd6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005cd0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005cd2:	f7ff ff99 	bl	8005c08 <HAL_UART_TxCpltCallback>
}
 8005cd6:	bf00      	nop
 8005cd8:	3740      	adds	r7, #64	; 0x40
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b084      	sub	sp, #16
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f7ff ff95 	bl	8005c1c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cf2:	bf00      	nop
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b084      	sub	sp, #16
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d16:	2b80      	cmp	r3, #128	; 0x80
 8005d18:	bf0c      	ite	eq
 8005d1a:	2301      	moveq	r3, #1
 8005d1c:	2300      	movne	r3, #0
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b21      	cmp	r3, #33	; 0x21
 8005d2c:	d108      	bne.n	8005d40 <UART_DMAError+0x46>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d005      	beq.n	8005d40 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	2200      	movs	r2, #0
 8005d38:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005d3a:	68b8      	ldr	r0, [r7, #8]
 8005d3c:	f000 f827 	bl	8005d8e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d4a:	2b40      	cmp	r3, #64	; 0x40
 8005d4c:	bf0c      	ite	eq
 8005d4e:	2301      	moveq	r3, #1
 8005d50:	2300      	movne	r3, #0
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b22      	cmp	r3, #34	; 0x22
 8005d60:	d108      	bne.n	8005d74 <UART_DMAError+0x7a>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d005      	beq.n	8005d74 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005d6e:	68b8      	ldr	r0, [r7, #8]
 8005d70:	f000 f835 	bl	8005dde <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d78:	f043 0210 	orr.w	r2, r3, #16
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d80:	68b8      	ldr	r0, [r7, #8]
 8005d82:	f7ff ff55 	bl	8005c30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d86:	bf00      	nop
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b089      	sub	sp, #36	; 0x24
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	330c      	adds	r3, #12
 8005d9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	e853 3f00 	ldrex	r3, [r3]
 8005da4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005dac:	61fb      	str	r3, [r7, #28]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	330c      	adds	r3, #12
 8005db4:	69fa      	ldr	r2, [r7, #28]
 8005db6:	61ba      	str	r2, [r7, #24]
 8005db8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dba:	6979      	ldr	r1, [r7, #20]
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	e841 2300 	strex	r3, r2, [r1]
 8005dc2:	613b      	str	r3, [r7, #16]
   return(result);
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1e5      	bne.n	8005d96 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005dd2:	bf00      	nop
 8005dd4:	3724      	adds	r7, #36	; 0x24
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b095      	sub	sp, #84	; 0x54
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	330c      	adds	r3, #12
 8005dec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df0:	e853 3f00 	ldrex	r3, [r3]
 8005df4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	330c      	adds	r3, #12
 8005e04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e06:	643a      	str	r2, [r7, #64]	; 0x40
 8005e08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e0e:	e841 2300 	strex	r3, r2, [r1]
 8005e12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1e5      	bne.n	8005de6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	3314      	adds	r3, #20
 8005e20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	e853 3f00 	ldrex	r3, [r3]
 8005e28:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	f023 0301 	bic.w	r3, r3, #1
 8005e30:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	3314      	adds	r3, #20
 8005e38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e42:	e841 2300 	strex	r3, r2, [r1]
 8005e46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1e5      	bne.n	8005e1a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d119      	bne.n	8005e8a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	330c      	adds	r3, #12
 8005e5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	e853 3f00 	ldrex	r3, [r3]
 8005e64:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	f023 0310 	bic.w	r3, r3, #16
 8005e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	330c      	adds	r3, #12
 8005e74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e76:	61ba      	str	r2, [r7, #24]
 8005e78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7a:	6979      	ldr	r1, [r7, #20]
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	e841 2300 	strex	r3, r2, [r1]
 8005e82:	613b      	str	r3, [r7, #16]
   return(result);
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1e5      	bne.n	8005e56 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e98:	bf00      	nop
 8005e9a:	3754      	adds	r7, #84	; 0x54
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ea8:	b0c0      	sub	sp, #256	; 0x100
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec0:	68d9      	ldr	r1, [r3, #12]
 8005ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	ea40 0301 	orr.w	r3, r0, r1
 8005ecc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed2:	689a      	ldr	r2, [r3, #8]
 8005ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	431a      	orrs	r2, r3
 8005edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005efc:	f021 010c 	bic.w	r1, r1, #12
 8005f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f0a:	430b      	orrs	r3, r1
 8005f0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f1e:	6999      	ldr	r1, [r3, #24]
 8005f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	ea40 0301 	orr.w	r3, r0, r1
 8005f2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	4b8f      	ldr	r3, [pc, #572]	; (8006170 <UART_SetConfig+0x2cc>)
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d005      	beq.n	8005f44 <UART_SetConfig+0xa0>
 8005f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	4b8d      	ldr	r3, [pc, #564]	; (8006174 <UART_SetConfig+0x2d0>)
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d104      	bne.n	8005f4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f44:	f7ff f8fe 	bl	8005144 <HAL_RCC_GetPCLK2Freq>
 8005f48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005f4c:	e003      	b.n	8005f56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f4e:	f7ff f8e5 	bl	800511c <HAL_RCC_GetPCLK1Freq>
 8005f52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f5a:	69db      	ldr	r3, [r3, #28]
 8005f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f60:	f040 810c 	bne.w	800617c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005f72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005f76:	4622      	mov	r2, r4
 8005f78:	462b      	mov	r3, r5
 8005f7a:	1891      	adds	r1, r2, r2
 8005f7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f7e:	415b      	adcs	r3, r3
 8005f80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f86:	4621      	mov	r1, r4
 8005f88:	eb12 0801 	adds.w	r8, r2, r1
 8005f8c:	4629      	mov	r1, r5
 8005f8e:	eb43 0901 	adc.w	r9, r3, r1
 8005f92:	f04f 0200 	mov.w	r2, #0
 8005f96:	f04f 0300 	mov.w	r3, #0
 8005f9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fa6:	4690      	mov	r8, r2
 8005fa8:	4699      	mov	r9, r3
 8005faa:	4623      	mov	r3, r4
 8005fac:	eb18 0303 	adds.w	r3, r8, r3
 8005fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fb4:	462b      	mov	r3, r5
 8005fb6:	eb49 0303 	adc.w	r3, r9, r3
 8005fba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005fca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005fce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	18db      	adds	r3, r3, r3
 8005fd6:	653b      	str	r3, [r7, #80]	; 0x50
 8005fd8:	4613      	mov	r3, r2
 8005fda:	eb42 0303 	adc.w	r3, r2, r3
 8005fde:	657b      	str	r3, [r7, #84]	; 0x54
 8005fe0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005fe4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005fe8:	f7fa f908 	bl	80001fc <__aeabi_uldivmod>
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	4b61      	ldr	r3, [pc, #388]	; (8006178 <UART_SetConfig+0x2d4>)
 8005ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	011c      	lsls	r4, r3, #4
 8005ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006004:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006008:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800600c:	4642      	mov	r2, r8
 800600e:	464b      	mov	r3, r9
 8006010:	1891      	adds	r1, r2, r2
 8006012:	64b9      	str	r1, [r7, #72]	; 0x48
 8006014:	415b      	adcs	r3, r3
 8006016:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006018:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800601c:	4641      	mov	r1, r8
 800601e:	eb12 0a01 	adds.w	sl, r2, r1
 8006022:	4649      	mov	r1, r9
 8006024:	eb43 0b01 	adc.w	fp, r3, r1
 8006028:	f04f 0200 	mov.w	r2, #0
 800602c:	f04f 0300 	mov.w	r3, #0
 8006030:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006034:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006038:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800603c:	4692      	mov	sl, r2
 800603e:	469b      	mov	fp, r3
 8006040:	4643      	mov	r3, r8
 8006042:	eb1a 0303 	adds.w	r3, sl, r3
 8006046:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800604a:	464b      	mov	r3, r9
 800604c:	eb4b 0303 	adc.w	r3, fp, r3
 8006050:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006060:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006064:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006068:	460b      	mov	r3, r1
 800606a:	18db      	adds	r3, r3, r3
 800606c:	643b      	str	r3, [r7, #64]	; 0x40
 800606e:	4613      	mov	r3, r2
 8006070:	eb42 0303 	adc.w	r3, r2, r3
 8006074:	647b      	str	r3, [r7, #68]	; 0x44
 8006076:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800607a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800607e:	f7fa f8bd 	bl	80001fc <__aeabi_uldivmod>
 8006082:	4602      	mov	r2, r0
 8006084:	460b      	mov	r3, r1
 8006086:	4611      	mov	r1, r2
 8006088:	4b3b      	ldr	r3, [pc, #236]	; (8006178 <UART_SetConfig+0x2d4>)
 800608a:	fba3 2301 	umull	r2, r3, r3, r1
 800608e:	095b      	lsrs	r3, r3, #5
 8006090:	2264      	movs	r2, #100	; 0x64
 8006092:	fb02 f303 	mul.w	r3, r2, r3
 8006096:	1acb      	subs	r3, r1, r3
 8006098:	00db      	lsls	r3, r3, #3
 800609a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800609e:	4b36      	ldr	r3, [pc, #216]	; (8006178 <UART_SetConfig+0x2d4>)
 80060a0:	fba3 2302 	umull	r2, r3, r3, r2
 80060a4:	095b      	lsrs	r3, r3, #5
 80060a6:	005b      	lsls	r3, r3, #1
 80060a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060ac:	441c      	add	r4, r3
 80060ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060b2:	2200      	movs	r2, #0
 80060b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80060bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80060c0:	4642      	mov	r2, r8
 80060c2:	464b      	mov	r3, r9
 80060c4:	1891      	adds	r1, r2, r2
 80060c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80060c8:	415b      	adcs	r3, r3
 80060ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80060d0:	4641      	mov	r1, r8
 80060d2:	1851      	adds	r1, r2, r1
 80060d4:	6339      	str	r1, [r7, #48]	; 0x30
 80060d6:	4649      	mov	r1, r9
 80060d8:	414b      	adcs	r3, r1
 80060da:	637b      	str	r3, [r7, #52]	; 0x34
 80060dc:	f04f 0200 	mov.w	r2, #0
 80060e0:	f04f 0300 	mov.w	r3, #0
 80060e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80060e8:	4659      	mov	r1, fp
 80060ea:	00cb      	lsls	r3, r1, #3
 80060ec:	4651      	mov	r1, sl
 80060ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060f2:	4651      	mov	r1, sl
 80060f4:	00ca      	lsls	r2, r1, #3
 80060f6:	4610      	mov	r0, r2
 80060f8:	4619      	mov	r1, r3
 80060fa:	4603      	mov	r3, r0
 80060fc:	4642      	mov	r2, r8
 80060fe:	189b      	adds	r3, r3, r2
 8006100:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006104:	464b      	mov	r3, r9
 8006106:	460a      	mov	r2, r1
 8006108:	eb42 0303 	adc.w	r3, r2, r3
 800610c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800611c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006120:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006124:	460b      	mov	r3, r1
 8006126:	18db      	adds	r3, r3, r3
 8006128:	62bb      	str	r3, [r7, #40]	; 0x28
 800612a:	4613      	mov	r3, r2
 800612c:	eb42 0303 	adc.w	r3, r2, r3
 8006130:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006132:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006136:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800613a:	f7fa f85f 	bl	80001fc <__aeabi_uldivmod>
 800613e:	4602      	mov	r2, r0
 8006140:	460b      	mov	r3, r1
 8006142:	4b0d      	ldr	r3, [pc, #52]	; (8006178 <UART_SetConfig+0x2d4>)
 8006144:	fba3 1302 	umull	r1, r3, r3, r2
 8006148:	095b      	lsrs	r3, r3, #5
 800614a:	2164      	movs	r1, #100	; 0x64
 800614c:	fb01 f303 	mul.w	r3, r1, r3
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	00db      	lsls	r3, r3, #3
 8006154:	3332      	adds	r3, #50	; 0x32
 8006156:	4a08      	ldr	r2, [pc, #32]	; (8006178 <UART_SetConfig+0x2d4>)
 8006158:	fba2 2303 	umull	r2, r3, r2, r3
 800615c:	095b      	lsrs	r3, r3, #5
 800615e:	f003 0207 	and.w	r2, r3, #7
 8006162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4422      	add	r2, r4
 800616a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800616c:	e106      	b.n	800637c <UART_SetConfig+0x4d8>
 800616e:	bf00      	nop
 8006170:	40011000 	.word	0x40011000
 8006174:	40011400 	.word	0x40011400
 8006178:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800617c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006180:	2200      	movs	r2, #0
 8006182:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006186:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800618a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800618e:	4642      	mov	r2, r8
 8006190:	464b      	mov	r3, r9
 8006192:	1891      	adds	r1, r2, r2
 8006194:	6239      	str	r1, [r7, #32]
 8006196:	415b      	adcs	r3, r3
 8006198:	627b      	str	r3, [r7, #36]	; 0x24
 800619a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800619e:	4641      	mov	r1, r8
 80061a0:	1854      	adds	r4, r2, r1
 80061a2:	4649      	mov	r1, r9
 80061a4:	eb43 0501 	adc.w	r5, r3, r1
 80061a8:	f04f 0200 	mov.w	r2, #0
 80061ac:	f04f 0300 	mov.w	r3, #0
 80061b0:	00eb      	lsls	r3, r5, #3
 80061b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061b6:	00e2      	lsls	r2, r4, #3
 80061b8:	4614      	mov	r4, r2
 80061ba:	461d      	mov	r5, r3
 80061bc:	4643      	mov	r3, r8
 80061be:	18e3      	adds	r3, r4, r3
 80061c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80061c4:	464b      	mov	r3, r9
 80061c6:	eb45 0303 	adc.w	r3, r5, r3
 80061ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061de:	f04f 0200 	mov.w	r2, #0
 80061e2:	f04f 0300 	mov.w	r3, #0
 80061e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80061ea:	4629      	mov	r1, r5
 80061ec:	008b      	lsls	r3, r1, #2
 80061ee:	4621      	mov	r1, r4
 80061f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061f4:	4621      	mov	r1, r4
 80061f6:	008a      	lsls	r2, r1, #2
 80061f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80061fc:	f7f9 fffe 	bl	80001fc <__aeabi_uldivmod>
 8006200:	4602      	mov	r2, r0
 8006202:	460b      	mov	r3, r1
 8006204:	4b60      	ldr	r3, [pc, #384]	; (8006388 <UART_SetConfig+0x4e4>)
 8006206:	fba3 2302 	umull	r2, r3, r3, r2
 800620a:	095b      	lsrs	r3, r3, #5
 800620c:	011c      	lsls	r4, r3, #4
 800620e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006212:	2200      	movs	r2, #0
 8006214:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006218:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800621c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006220:	4642      	mov	r2, r8
 8006222:	464b      	mov	r3, r9
 8006224:	1891      	adds	r1, r2, r2
 8006226:	61b9      	str	r1, [r7, #24]
 8006228:	415b      	adcs	r3, r3
 800622a:	61fb      	str	r3, [r7, #28]
 800622c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006230:	4641      	mov	r1, r8
 8006232:	1851      	adds	r1, r2, r1
 8006234:	6139      	str	r1, [r7, #16]
 8006236:	4649      	mov	r1, r9
 8006238:	414b      	adcs	r3, r1
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	f04f 0200 	mov.w	r2, #0
 8006240:	f04f 0300 	mov.w	r3, #0
 8006244:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006248:	4659      	mov	r1, fp
 800624a:	00cb      	lsls	r3, r1, #3
 800624c:	4651      	mov	r1, sl
 800624e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006252:	4651      	mov	r1, sl
 8006254:	00ca      	lsls	r2, r1, #3
 8006256:	4610      	mov	r0, r2
 8006258:	4619      	mov	r1, r3
 800625a:	4603      	mov	r3, r0
 800625c:	4642      	mov	r2, r8
 800625e:	189b      	adds	r3, r3, r2
 8006260:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006264:	464b      	mov	r3, r9
 8006266:	460a      	mov	r2, r1
 8006268:	eb42 0303 	adc.w	r3, r2, r3
 800626c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	67bb      	str	r3, [r7, #120]	; 0x78
 800627a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800627c:	f04f 0200 	mov.w	r2, #0
 8006280:	f04f 0300 	mov.w	r3, #0
 8006284:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006288:	4649      	mov	r1, r9
 800628a:	008b      	lsls	r3, r1, #2
 800628c:	4641      	mov	r1, r8
 800628e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006292:	4641      	mov	r1, r8
 8006294:	008a      	lsls	r2, r1, #2
 8006296:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800629a:	f7f9 ffaf 	bl	80001fc <__aeabi_uldivmod>
 800629e:	4602      	mov	r2, r0
 80062a0:	460b      	mov	r3, r1
 80062a2:	4611      	mov	r1, r2
 80062a4:	4b38      	ldr	r3, [pc, #224]	; (8006388 <UART_SetConfig+0x4e4>)
 80062a6:	fba3 2301 	umull	r2, r3, r3, r1
 80062aa:	095b      	lsrs	r3, r3, #5
 80062ac:	2264      	movs	r2, #100	; 0x64
 80062ae:	fb02 f303 	mul.w	r3, r2, r3
 80062b2:	1acb      	subs	r3, r1, r3
 80062b4:	011b      	lsls	r3, r3, #4
 80062b6:	3332      	adds	r3, #50	; 0x32
 80062b8:	4a33      	ldr	r2, [pc, #204]	; (8006388 <UART_SetConfig+0x4e4>)
 80062ba:	fba2 2303 	umull	r2, r3, r2, r3
 80062be:	095b      	lsrs	r3, r3, #5
 80062c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062c4:	441c      	add	r4, r3
 80062c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062ca:	2200      	movs	r2, #0
 80062cc:	673b      	str	r3, [r7, #112]	; 0x70
 80062ce:	677a      	str	r2, [r7, #116]	; 0x74
 80062d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80062d4:	4642      	mov	r2, r8
 80062d6:	464b      	mov	r3, r9
 80062d8:	1891      	adds	r1, r2, r2
 80062da:	60b9      	str	r1, [r7, #8]
 80062dc:	415b      	adcs	r3, r3
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062e4:	4641      	mov	r1, r8
 80062e6:	1851      	adds	r1, r2, r1
 80062e8:	6039      	str	r1, [r7, #0]
 80062ea:	4649      	mov	r1, r9
 80062ec:	414b      	adcs	r3, r1
 80062ee:	607b      	str	r3, [r7, #4]
 80062f0:	f04f 0200 	mov.w	r2, #0
 80062f4:	f04f 0300 	mov.w	r3, #0
 80062f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062fc:	4659      	mov	r1, fp
 80062fe:	00cb      	lsls	r3, r1, #3
 8006300:	4651      	mov	r1, sl
 8006302:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006306:	4651      	mov	r1, sl
 8006308:	00ca      	lsls	r2, r1, #3
 800630a:	4610      	mov	r0, r2
 800630c:	4619      	mov	r1, r3
 800630e:	4603      	mov	r3, r0
 8006310:	4642      	mov	r2, r8
 8006312:	189b      	adds	r3, r3, r2
 8006314:	66bb      	str	r3, [r7, #104]	; 0x68
 8006316:	464b      	mov	r3, r9
 8006318:	460a      	mov	r2, r1
 800631a:	eb42 0303 	adc.w	r3, r2, r3
 800631e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	663b      	str	r3, [r7, #96]	; 0x60
 800632a:	667a      	str	r2, [r7, #100]	; 0x64
 800632c:	f04f 0200 	mov.w	r2, #0
 8006330:	f04f 0300 	mov.w	r3, #0
 8006334:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006338:	4649      	mov	r1, r9
 800633a:	008b      	lsls	r3, r1, #2
 800633c:	4641      	mov	r1, r8
 800633e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006342:	4641      	mov	r1, r8
 8006344:	008a      	lsls	r2, r1, #2
 8006346:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800634a:	f7f9 ff57 	bl	80001fc <__aeabi_uldivmod>
 800634e:	4602      	mov	r2, r0
 8006350:	460b      	mov	r3, r1
 8006352:	4b0d      	ldr	r3, [pc, #52]	; (8006388 <UART_SetConfig+0x4e4>)
 8006354:	fba3 1302 	umull	r1, r3, r3, r2
 8006358:	095b      	lsrs	r3, r3, #5
 800635a:	2164      	movs	r1, #100	; 0x64
 800635c:	fb01 f303 	mul.w	r3, r1, r3
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	011b      	lsls	r3, r3, #4
 8006364:	3332      	adds	r3, #50	; 0x32
 8006366:	4a08      	ldr	r2, [pc, #32]	; (8006388 <UART_SetConfig+0x4e4>)
 8006368:	fba2 2303 	umull	r2, r3, r2, r3
 800636c:	095b      	lsrs	r3, r3, #5
 800636e:	f003 020f 	and.w	r2, r3, #15
 8006372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4422      	add	r2, r4
 800637a:	609a      	str	r2, [r3, #8]
}
 800637c:	bf00      	nop
 800637e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006382:	46bd      	mov	sp, r7
 8006384:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006388:	51eb851f 	.word	0x51eb851f

0800638c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800638c:	b084      	sub	sp, #16
 800638e:	b580      	push	{r7, lr}
 8006390:	b084      	sub	sp, #16
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
 8006396:	f107 001c 	add.w	r0, r7, #28
 800639a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800639e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d122      	bne.n	80063ea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80063b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80063cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d105      	bne.n	80063de <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 faa2 	bl	8006928 <USB_CoreReset>
 80063e4:	4603      	mov	r3, r0
 80063e6:	73fb      	strb	r3, [r7, #15]
 80063e8:	e01a      	b.n	8006420 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fa96 	bl	8006928 <USB_CoreReset>
 80063fc:	4603      	mov	r3, r0
 80063fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006402:	2b00      	cmp	r3, #0
 8006404:	d106      	bne.n	8006414 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	639a      	str	r2, [r3, #56]	; 0x38
 8006412:	e005      	b.n	8006420 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006418:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006422:	2b01      	cmp	r3, #1
 8006424:	d10b      	bne.n	800643e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f043 0206 	orr.w	r2, r3, #6
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f043 0220 	orr.w	r2, r3, #32
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800643e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800644a:	b004      	add	sp, #16
 800644c:	4770      	bx	lr

0800644e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800644e:	b480      	push	{r7}
 8006450:	b083      	sub	sp, #12
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f023 0201 	bic.w	r2, r3, #1
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	460b      	mov	r3, r1
 800647a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800647c:	2300      	movs	r3, #0
 800647e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800648c:	78fb      	ldrb	r3, [r7, #3]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d115      	bne.n	80064be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800649e:	2001      	movs	r0, #1
 80064a0:	f7fd fa06 	bl	80038b0 <HAL_Delay>
      ms++;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	3301      	adds	r3, #1
 80064a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fa2e 	bl	800690c <USB_GetMode>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d01e      	beq.n	80064f4 <USB_SetCurrentMode+0x84>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2b31      	cmp	r3, #49	; 0x31
 80064ba:	d9f0      	bls.n	800649e <USB_SetCurrentMode+0x2e>
 80064bc:	e01a      	b.n	80064f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80064be:	78fb      	ldrb	r3, [r7, #3]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d115      	bne.n	80064f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80064d0:	2001      	movs	r0, #1
 80064d2:	f7fd f9ed 	bl	80038b0 <HAL_Delay>
      ms++;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	3301      	adds	r3, #1
 80064da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 fa15 	bl	800690c <USB_GetMode>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d005      	beq.n	80064f4 <USB_SetCurrentMode+0x84>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2b31      	cmp	r3, #49	; 0x31
 80064ec:	d9f0      	bls.n	80064d0 <USB_SetCurrentMode+0x60>
 80064ee:	e001      	b.n	80064f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e005      	b.n	8006500 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2b32      	cmp	r3, #50	; 0x32
 80064f8:	d101      	bne.n	80064fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e000      	b.n	8006500 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006508:	b084      	sub	sp, #16
 800650a:	b580      	push	{r7, lr}
 800650c:	b086      	sub	sp, #24
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006516:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800651a:	2300      	movs	r3, #0
 800651c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006522:	2300      	movs	r3, #0
 8006524:	613b      	str	r3, [r7, #16]
 8006526:	e009      	b.n	800653c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	3340      	adds	r3, #64	; 0x40
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	2200      	movs	r2, #0
 8006534:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	3301      	adds	r3, #1
 800653a:	613b      	str	r3, [r7, #16]
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	2b0e      	cmp	r3, #14
 8006540:	d9f2      	bls.n	8006528 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006544:	2b00      	cmp	r3, #0
 8006546:	d11c      	bne.n	8006582 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006556:	f043 0302 	orr.w	r3, r3, #2
 800655a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006560:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006578:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	639a      	str	r2, [r3, #56]	; 0x38
 8006580:	e00b      	b.n	800659a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006586:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006592:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065a0:	461a      	mov	r2, r3
 80065a2:	2300      	movs	r3, #0
 80065a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ac:	4619      	mov	r1, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b4:	461a      	mov	r2, r3
 80065b6:	680b      	ldr	r3, [r1, #0]
 80065b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d10c      	bne.n	80065da <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80065c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d104      	bne.n	80065d0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80065c6:	2100      	movs	r1, #0
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f965 	bl	8006898 <USB_SetDevSpeed>
 80065ce:	e008      	b.n	80065e2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80065d0:	2101      	movs	r1, #1
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f960 	bl	8006898 <USB_SetDevSpeed>
 80065d8:	e003      	b.n	80065e2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80065da:	2103      	movs	r1, #3
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f95b 	bl	8006898 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065e2:	2110      	movs	r1, #16
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 f8f3 	bl	80067d0 <USB_FlushTxFifo>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d001      	beq.n	80065f4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 f91f 	bl	8006838 <USB_FlushRxFifo>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660a:	461a      	mov	r2, r3
 800660c:	2300      	movs	r3, #0
 800660e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006616:	461a      	mov	r2, r3
 8006618:	2300      	movs	r3, #0
 800661a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006622:	461a      	mov	r2, r3
 8006624:	2300      	movs	r3, #0
 8006626:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006628:	2300      	movs	r3, #0
 800662a:	613b      	str	r3, [r7, #16]
 800662c:	e043      	b.n	80066b6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	015a      	lsls	r2, r3, #5
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	4413      	add	r3, r2
 8006636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006640:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006644:	d118      	bne.n	8006678 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10a      	bne.n	8006662 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4413      	add	r3, r2
 8006654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006658:	461a      	mov	r2, r3
 800665a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	e013      	b.n	800668a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	4413      	add	r3, r2
 800666a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800666e:	461a      	mov	r2, r3
 8006670:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006674:	6013      	str	r3, [r2, #0]
 8006676:	e008      	b.n	800668a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	015a      	lsls	r2, r3, #5
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4413      	add	r3, r2
 8006680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006684:	461a      	mov	r2, r3
 8006686:	2300      	movs	r3, #0
 8006688:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	4413      	add	r3, r2
 8006692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006696:	461a      	mov	r2, r3
 8006698:	2300      	movs	r3, #0
 800669a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	015a      	lsls	r2, r3, #5
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4413      	add	r3, r2
 80066a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a8:	461a      	mov	r2, r3
 80066aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	3301      	adds	r3, #1
 80066b4:	613b      	str	r3, [r7, #16]
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d3b7      	bcc.n	800662e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066be:	2300      	movs	r3, #0
 80066c0:	613b      	str	r3, [r7, #16]
 80066c2:	e043      	b.n	800674c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066da:	d118      	bne.n	800670e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10a      	bne.n	80066f8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	015a      	lsls	r2, r3, #5
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ee:	461a      	mov	r2, r3
 80066f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066f4:	6013      	str	r3, [r2, #0]
 80066f6:	e013      	b.n	8006720 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	015a      	lsls	r2, r3, #5
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	4413      	add	r3, r2
 8006700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006704:	461a      	mov	r2, r3
 8006706:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800670a:	6013      	str	r3, [r2, #0]
 800670c:	e008      	b.n	8006720 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	4413      	add	r3, r2
 8006716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800671a:	461a      	mov	r2, r3
 800671c:	2300      	movs	r3, #0
 800671e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4413      	add	r3, r2
 8006728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800672c:	461a      	mov	r2, r3
 800672e:	2300      	movs	r3, #0
 8006730:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	015a      	lsls	r2, r3, #5
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	4413      	add	r3, r2
 800673a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800673e:	461a      	mov	r2, r3
 8006740:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006744:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	3301      	adds	r3, #1
 800674a:	613b      	str	r3, [r7, #16]
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	429a      	cmp	r2, r3
 8006752:	d3b7      	bcc.n	80066c4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006762:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006766:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006774:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006778:	2b00      	cmp	r3, #0
 800677a:	d105      	bne.n	8006788 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	f043 0210 	orr.w	r2, r3, #16
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	699a      	ldr	r2, [r3, #24]
 800678c:	4b0f      	ldr	r3, [pc, #60]	; (80067cc <USB_DevInit+0x2c4>)
 800678e:	4313      	orrs	r3, r2
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006796:	2b00      	cmp	r3, #0
 8006798:	d005      	beq.n	80067a6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	f043 0208 	orr.w	r2, r3, #8
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80067a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d107      	bne.n	80067bc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067b4:	f043 0304 	orr.w	r3, r3, #4
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80067bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3718      	adds	r7, #24
 80067c2:	46bd      	mov	sp, r7
 80067c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067c8:	b004      	add	sp, #16
 80067ca:	4770      	bx	lr
 80067cc:	803c3800 	.word	0x803c3800

080067d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067da:	2300      	movs	r3, #0
 80067dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	3301      	adds	r3, #1
 80067e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	4a13      	ldr	r2, [pc, #76]	; (8006834 <USB_FlushTxFifo+0x64>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d901      	bls.n	80067f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e01b      	b.n	8006828 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	daf2      	bge.n	80067de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	019b      	lsls	r3, r3, #6
 8006800:	f043 0220 	orr.w	r2, r3, #32
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	3301      	adds	r3, #1
 800680c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	4a08      	ldr	r2, [pc, #32]	; (8006834 <USB_FlushTxFifo+0x64>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d901      	bls.n	800681a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e006      	b.n	8006828 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	f003 0320 	and.w	r3, r3, #32
 8006822:	2b20      	cmp	r3, #32
 8006824:	d0f0      	beq.n	8006808 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3714      	adds	r7, #20
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	00030d40 	.word	0x00030d40

08006838 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006840:	2300      	movs	r3, #0
 8006842:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	3301      	adds	r3, #1
 8006848:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	4a11      	ldr	r2, [pc, #68]	; (8006894 <USB_FlushRxFifo+0x5c>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d901      	bls.n	8006856 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e018      	b.n	8006888 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	daf2      	bge.n	8006844 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800685e:	2300      	movs	r3, #0
 8006860:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2210      	movs	r2, #16
 8006866:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	3301      	adds	r3, #1
 800686c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	4a08      	ldr	r2, [pc, #32]	; (8006894 <USB_FlushRxFifo+0x5c>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d901      	bls.n	800687a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e006      	b.n	8006888 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	f003 0310 	and.w	r3, r3, #16
 8006882:	2b10      	cmp	r3, #16
 8006884:	d0f0      	beq.n	8006868 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr
 8006894:	00030d40 	.word	0x00030d40

08006898 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	460b      	mov	r3, r1
 80068a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	78fb      	ldrb	r3, [r7, #3]
 80068b2:	68f9      	ldr	r1, [r7, #12]
 80068b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068b8:	4313      	orrs	r3, r2
 80068ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b085      	sub	sp, #20
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80068e4:	f023 0303 	bic.w	r3, r3, #3
 80068e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068f8:	f043 0302 	orr.w	r3, r3, #2
 80068fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	695b      	ldr	r3, [r3, #20]
 8006918:	f003 0301 	and.w	r3, r3, #1
}
 800691c:	4618      	mov	r0, r3
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006930:	2300      	movs	r3, #0
 8006932:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	3301      	adds	r3, #1
 8006938:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	4a13      	ldr	r2, [pc, #76]	; (800698c <USB_CoreReset+0x64>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d901      	bls.n	8006946 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e01b      	b.n	800697e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	2b00      	cmp	r3, #0
 800694c:	daf2      	bge.n	8006934 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800694e:	2300      	movs	r3, #0
 8006950:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	f043 0201 	orr.w	r2, r3, #1
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	3301      	adds	r3, #1
 8006962:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4a09      	ldr	r2, [pc, #36]	; (800698c <USB_CoreReset+0x64>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d901      	bls.n	8006970 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e006      	b.n	800697e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	2b01      	cmp	r3, #1
 800697a:	d0f0      	beq.n	800695e <USB_CoreReset+0x36>

  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	00030d40 	.word	0x00030d40

08006990 <realloc>:
 8006990:	4b02      	ldr	r3, [pc, #8]	; (800699c <realloc+0xc>)
 8006992:	460a      	mov	r2, r1
 8006994:	4601      	mov	r1, r0
 8006996:	6818      	ldr	r0, [r3, #0]
 8006998:	f000 b802 	b.w	80069a0 <_realloc_r>
 800699c:	20000058 	.word	0x20000058

080069a0 <_realloc_r>:
 80069a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069a4:	4680      	mov	r8, r0
 80069a6:	4614      	mov	r4, r2
 80069a8:	460e      	mov	r6, r1
 80069aa:	b921      	cbnz	r1, 80069b6 <_realloc_r+0x16>
 80069ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069b0:	4611      	mov	r1, r2
 80069b2:	f000 b8d3 	b.w	8006b5c <_malloc_r>
 80069b6:	b92a      	cbnz	r2, 80069c4 <_realloc_r+0x24>
 80069b8:	f000 f864 	bl	8006a84 <_free_r>
 80069bc:	4625      	mov	r5, r4
 80069be:	4628      	mov	r0, r5
 80069c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069c4:	f000 f956 	bl	8006c74 <_malloc_usable_size_r>
 80069c8:	4284      	cmp	r4, r0
 80069ca:	4607      	mov	r7, r0
 80069cc:	d802      	bhi.n	80069d4 <_realloc_r+0x34>
 80069ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80069d2:	d812      	bhi.n	80069fa <_realloc_r+0x5a>
 80069d4:	4621      	mov	r1, r4
 80069d6:	4640      	mov	r0, r8
 80069d8:	f000 f8c0 	bl	8006b5c <_malloc_r>
 80069dc:	4605      	mov	r5, r0
 80069de:	2800      	cmp	r0, #0
 80069e0:	d0ed      	beq.n	80069be <_realloc_r+0x1e>
 80069e2:	42bc      	cmp	r4, r7
 80069e4:	4622      	mov	r2, r4
 80069e6:	4631      	mov	r1, r6
 80069e8:	bf28      	it	cs
 80069ea:	463a      	movcs	r2, r7
 80069ec:	f000 f83c 	bl	8006a68 <memcpy>
 80069f0:	4631      	mov	r1, r6
 80069f2:	4640      	mov	r0, r8
 80069f4:	f000 f846 	bl	8006a84 <_free_r>
 80069f8:	e7e1      	b.n	80069be <_realloc_r+0x1e>
 80069fa:	4635      	mov	r5, r6
 80069fc:	e7df      	b.n	80069be <_realloc_r+0x1e>

080069fe <memset>:
 80069fe:	4402      	add	r2, r0
 8006a00:	4603      	mov	r3, r0
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d100      	bne.n	8006a08 <memset+0xa>
 8006a06:	4770      	bx	lr
 8006a08:	f803 1b01 	strb.w	r1, [r3], #1
 8006a0c:	e7f9      	b.n	8006a02 <memset+0x4>
	...

08006a10 <__errno>:
 8006a10:	4b01      	ldr	r3, [pc, #4]	; (8006a18 <__errno+0x8>)
 8006a12:	6818      	ldr	r0, [r3, #0]
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	20000058 	.word	0x20000058

08006a1c <__libc_init_array>:
 8006a1c:	b570      	push	{r4, r5, r6, lr}
 8006a1e:	4d0d      	ldr	r5, [pc, #52]	; (8006a54 <__libc_init_array+0x38>)
 8006a20:	4c0d      	ldr	r4, [pc, #52]	; (8006a58 <__libc_init_array+0x3c>)
 8006a22:	1b64      	subs	r4, r4, r5
 8006a24:	10a4      	asrs	r4, r4, #2
 8006a26:	2600      	movs	r6, #0
 8006a28:	42a6      	cmp	r6, r4
 8006a2a:	d109      	bne.n	8006a40 <__libc_init_array+0x24>
 8006a2c:	4d0b      	ldr	r5, [pc, #44]	; (8006a5c <__libc_init_array+0x40>)
 8006a2e:	4c0c      	ldr	r4, [pc, #48]	; (8006a60 <__libc_init_array+0x44>)
 8006a30:	f000 f938 	bl	8006ca4 <_init>
 8006a34:	1b64      	subs	r4, r4, r5
 8006a36:	10a4      	asrs	r4, r4, #2
 8006a38:	2600      	movs	r6, #0
 8006a3a:	42a6      	cmp	r6, r4
 8006a3c:	d105      	bne.n	8006a4a <__libc_init_array+0x2e>
 8006a3e:	bd70      	pop	{r4, r5, r6, pc}
 8006a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a44:	4798      	blx	r3
 8006a46:	3601      	adds	r6, #1
 8006a48:	e7ee      	b.n	8006a28 <__libc_init_array+0xc>
 8006a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a4e:	4798      	blx	r3
 8006a50:	3601      	adds	r6, #1
 8006a52:	e7f2      	b.n	8006a3a <__libc_init_array+0x1e>
 8006a54:	08006fe0 	.word	0x08006fe0
 8006a58:	08006fe0 	.word	0x08006fe0
 8006a5c:	08006fe0 	.word	0x08006fe0
 8006a60:	08006fe8 	.word	0x08006fe8

08006a64 <__retarget_lock_acquire_recursive>:
 8006a64:	4770      	bx	lr

08006a66 <__retarget_lock_release_recursive>:
 8006a66:	4770      	bx	lr

08006a68 <memcpy>:
 8006a68:	440a      	add	r2, r1
 8006a6a:	4291      	cmp	r1, r2
 8006a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a70:	d100      	bne.n	8006a74 <memcpy+0xc>
 8006a72:	4770      	bx	lr
 8006a74:	b510      	push	{r4, lr}
 8006a76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a7e:	4291      	cmp	r1, r2
 8006a80:	d1f9      	bne.n	8006a76 <memcpy+0xe>
 8006a82:	bd10      	pop	{r4, pc}

08006a84 <_free_r>:
 8006a84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a86:	2900      	cmp	r1, #0
 8006a88:	d044      	beq.n	8006b14 <_free_r+0x90>
 8006a8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a8e:	9001      	str	r0, [sp, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f1a1 0404 	sub.w	r4, r1, #4
 8006a96:	bfb8      	it	lt
 8006a98:	18e4      	addlt	r4, r4, r3
 8006a9a:	f000 f8df 	bl	8006c5c <__malloc_lock>
 8006a9e:	4a1e      	ldr	r2, [pc, #120]	; (8006b18 <_free_r+0x94>)
 8006aa0:	9801      	ldr	r0, [sp, #4]
 8006aa2:	6813      	ldr	r3, [r2, #0]
 8006aa4:	b933      	cbnz	r3, 8006ab4 <_free_r+0x30>
 8006aa6:	6063      	str	r3, [r4, #4]
 8006aa8:	6014      	str	r4, [r2, #0]
 8006aaa:	b003      	add	sp, #12
 8006aac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ab0:	f000 b8da 	b.w	8006c68 <__malloc_unlock>
 8006ab4:	42a3      	cmp	r3, r4
 8006ab6:	d908      	bls.n	8006aca <_free_r+0x46>
 8006ab8:	6825      	ldr	r5, [r4, #0]
 8006aba:	1961      	adds	r1, r4, r5
 8006abc:	428b      	cmp	r3, r1
 8006abe:	bf01      	itttt	eq
 8006ac0:	6819      	ldreq	r1, [r3, #0]
 8006ac2:	685b      	ldreq	r3, [r3, #4]
 8006ac4:	1949      	addeq	r1, r1, r5
 8006ac6:	6021      	streq	r1, [r4, #0]
 8006ac8:	e7ed      	b.n	8006aa6 <_free_r+0x22>
 8006aca:	461a      	mov	r2, r3
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	b10b      	cbz	r3, 8006ad4 <_free_r+0x50>
 8006ad0:	42a3      	cmp	r3, r4
 8006ad2:	d9fa      	bls.n	8006aca <_free_r+0x46>
 8006ad4:	6811      	ldr	r1, [r2, #0]
 8006ad6:	1855      	adds	r5, r2, r1
 8006ad8:	42a5      	cmp	r5, r4
 8006ada:	d10b      	bne.n	8006af4 <_free_r+0x70>
 8006adc:	6824      	ldr	r4, [r4, #0]
 8006ade:	4421      	add	r1, r4
 8006ae0:	1854      	adds	r4, r2, r1
 8006ae2:	42a3      	cmp	r3, r4
 8006ae4:	6011      	str	r1, [r2, #0]
 8006ae6:	d1e0      	bne.n	8006aaa <_free_r+0x26>
 8006ae8:	681c      	ldr	r4, [r3, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	6053      	str	r3, [r2, #4]
 8006aee:	440c      	add	r4, r1
 8006af0:	6014      	str	r4, [r2, #0]
 8006af2:	e7da      	b.n	8006aaa <_free_r+0x26>
 8006af4:	d902      	bls.n	8006afc <_free_r+0x78>
 8006af6:	230c      	movs	r3, #12
 8006af8:	6003      	str	r3, [r0, #0]
 8006afa:	e7d6      	b.n	8006aaa <_free_r+0x26>
 8006afc:	6825      	ldr	r5, [r4, #0]
 8006afe:	1961      	adds	r1, r4, r5
 8006b00:	428b      	cmp	r3, r1
 8006b02:	bf04      	itt	eq
 8006b04:	6819      	ldreq	r1, [r3, #0]
 8006b06:	685b      	ldreq	r3, [r3, #4]
 8006b08:	6063      	str	r3, [r4, #4]
 8006b0a:	bf04      	itt	eq
 8006b0c:	1949      	addeq	r1, r1, r5
 8006b0e:	6021      	streq	r1, [r4, #0]
 8006b10:	6054      	str	r4, [r2, #4]
 8006b12:	e7ca      	b.n	8006aaa <_free_r+0x26>
 8006b14:	b003      	add	sp, #12
 8006b16:	bd30      	pop	{r4, r5, pc}
 8006b18:	20001360 	.word	0x20001360

08006b1c <sbrk_aligned>:
 8006b1c:	b570      	push	{r4, r5, r6, lr}
 8006b1e:	4e0e      	ldr	r6, [pc, #56]	; (8006b58 <sbrk_aligned+0x3c>)
 8006b20:	460c      	mov	r4, r1
 8006b22:	6831      	ldr	r1, [r6, #0]
 8006b24:	4605      	mov	r5, r0
 8006b26:	b911      	cbnz	r1, 8006b2e <sbrk_aligned+0x12>
 8006b28:	f000 f8ac 	bl	8006c84 <_sbrk_r>
 8006b2c:	6030      	str	r0, [r6, #0]
 8006b2e:	4621      	mov	r1, r4
 8006b30:	4628      	mov	r0, r5
 8006b32:	f000 f8a7 	bl	8006c84 <_sbrk_r>
 8006b36:	1c43      	adds	r3, r0, #1
 8006b38:	d00a      	beq.n	8006b50 <sbrk_aligned+0x34>
 8006b3a:	1cc4      	adds	r4, r0, #3
 8006b3c:	f024 0403 	bic.w	r4, r4, #3
 8006b40:	42a0      	cmp	r0, r4
 8006b42:	d007      	beq.n	8006b54 <sbrk_aligned+0x38>
 8006b44:	1a21      	subs	r1, r4, r0
 8006b46:	4628      	mov	r0, r5
 8006b48:	f000 f89c 	bl	8006c84 <_sbrk_r>
 8006b4c:	3001      	adds	r0, #1
 8006b4e:	d101      	bne.n	8006b54 <sbrk_aligned+0x38>
 8006b50:	f04f 34ff 	mov.w	r4, #4294967295
 8006b54:	4620      	mov	r0, r4
 8006b56:	bd70      	pop	{r4, r5, r6, pc}
 8006b58:	20001364 	.word	0x20001364

08006b5c <_malloc_r>:
 8006b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b60:	1ccd      	adds	r5, r1, #3
 8006b62:	f025 0503 	bic.w	r5, r5, #3
 8006b66:	3508      	adds	r5, #8
 8006b68:	2d0c      	cmp	r5, #12
 8006b6a:	bf38      	it	cc
 8006b6c:	250c      	movcc	r5, #12
 8006b6e:	2d00      	cmp	r5, #0
 8006b70:	4607      	mov	r7, r0
 8006b72:	db01      	blt.n	8006b78 <_malloc_r+0x1c>
 8006b74:	42a9      	cmp	r1, r5
 8006b76:	d905      	bls.n	8006b84 <_malloc_r+0x28>
 8006b78:	230c      	movs	r3, #12
 8006b7a:	603b      	str	r3, [r7, #0]
 8006b7c:	2600      	movs	r6, #0
 8006b7e:	4630      	mov	r0, r6
 8006b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006c58 <_malloc_r+0xfc>
 8006b88:	f000 f868 	bl	8006c5c <__malloc_lock>
 8006b8c:	f8d8 3000 	ldr.w	r3, [r8]
 8006b90:	461c      	mov	r4, r3
 8006b92:	bb5c      	cbnz	r4, 8006bec <_malloc_r+0x90>
 8006b94:	4629      	mov	r1, r5
 8006b96:	4638      	mov	r0, r7
 8006b98:	f7ff ffc0 	bl	8006b1c <sbrk_aligned>
 8006b9c:	1c43      	adds	r3, r0, #1
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	d155      	bne.n	8006c4e <_malloc_r+0xf2>
 8006ba2:	f8d8 4000 	ldr.w	r4, [r8]
 8006ba6:	4626      	mov	r6, r4
 8006ba8:	2e00      	cmp	r6, #0
 8006baa:	d145      	bne.n	8006c38 <_malloc_r+0xdc>
 8006bac:	2c00      	cmp	r4, #0
 8006bae:	d048      	beq.n	8006c42 <_malloc_r+0xe6>
 8006bb0:	6823      	ldr	r3, [r4, #0]
 8006bb2:	4631      	mov	r1, r6
 8006bb4:	4638      	mov	r0, r7
 8006bb6:	eb04 0903 	add.w	r9, r4, r3
 8006bba:	f000 f863 	bl	8006c84 <_sbrk_r>
 8006bbe:	4581      	cmp	r9, r0
 8006bc0:	d13f      	bne.n	8006c42 <_malloc_r+0xe6>
 8006bc2:	6821      	ldr	r1, [r4, #0]
 8006bc4:	1a6d      	subs	r5, r5, r1
 8006bc6:	4629      	mov	r1, r5
 8006bc8:	4638      	mov	r0, r7
 8006bca:	f7ff ffa7 	bl	8006b1c <sbrk_aligned>
 8006bce:	3001      	adds	r0, #1
 8006bd0:	d037      	beq.n	8006c42 <_malloc_r+0xe6>
 8006bd2:	6823      	ldr	r3, [r4, #0]
 8006bd4:	442b      	add	r3, r5
 8006bd6:	6023      	str	r3, [r4, #0]
 8006bd8:	f8d8 3000 	ldr.w	r3, [r8]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d038      	beq.n	8006c52 <_malloc_r+0xf6>
 8006be0:	685a      	ldr	r2, [r3, #4]
 8006be2:	42a2      	cmp	r2, r4
 8006be4:	d12b      	bne.n	8006c3e <_malloc_r+0xe2>
 8006be6:	2200      	movs	r2, #0
 8006be8:	605a      	str	r2, [r3, #4]
 8006bea:	e00f      	b.n	8006c0c <_malloc_r+0xb0>
 8006bec:	6822      	ldr	r2, [r4, #0]
 8006bee:	1b52      	subs	r2, r2, r5
 8006bf0:	d41f      	bmi.n	8006c32 <_malloc_r+0xd6>
 8006bf2:	2a0b      	cmp	r2, #11
 8006bf4:	d917      	bls.n	8006c26 <_malloc_r+0xca>
 8006bf6:	1961      	adds	r1, r4, r5
 8006bf8:	42a3      	cmp	r3, r4
 8006bfa:	6025      	str	r5, [r4, #0]
 8006bfc:	bf18      	it	ne
 8006bfe:	6059      	strne	r1, [r3, #4]
 8006c00:	6863      	ldr	r3, [r4, #4]
 8006c02:	bf08      	it	eq
 8006c04:	f8c8 1000 	streq.w	r1, [r8]
 8006c08:	5162      	str	r2, [r4, r5]
 8006c0a:	604b      	str	r3, [r1, #4]
 8006c0c:	4638      	mov	r0, r7
 8006c0e:	f104 060b 	add.w	r6, r4, #11
 8006c12:	f000 f829 	bl	8006c68 <__malloc_unlock>
 8006c16:	f026 0607 	bic.w	r6, r6, #7
 8006c1a:	1d23      	adds	r3, r4, #4
 8006c1c:	1af2      	subs	r2, r6, r3
 8006c1e:	d0ae      	beq.n	8006b7e <_malloc_r+0x22>
 8006c20:	1b9b      	subs	r3, r3, r6
 8006c22:	50a3      	str	r3, [r4, r2]
 8006c24:	e7ab      	b.n	8006b7e <_malloc_r+0x22>
 8006c26:	42a3      	cmp	r3, r4
 8006c28:	6862      	ldr	r2, [r4, #4]
 8006c2a:	d1dd      	bne.n	8006be8 <_malloc_r+0x8c>
 8006c2c:	f8c8 2000 	str.w	r2, [r8]
 8006c30:	e7ec      	b.n	8006c0c <_malloc_r+0xb0>
 8006c32:	4623      	mov	r3, r4
 8006c34:	6864      	ldr	r4, [r4, #4]
 8006c36:	e7ac      	b.n	8006b92 <_malloc_r+0x36>
 8006c38:	4634      	mov	r4, r6
 8006c3a:	6876      	ldr	r6, [r6, #4]
 8006c3c:	e7b4      	b.n	8006ba8 <_malloc_r+0x4c>
 8006c3e:	4613      	mov	r3, r2
 8006c40:	e7cc      	b.n	8006bdc <_malloc_r+0x80>
 8006c42:	230c      	movs	r3, #12
 8006c44:	603b      	str	r3, [r7, #0]
 8006c46:	4638      	mov	r0, r7
 8006c48:	f000 f80e 	bl	8006c68 <__malloc_unlock>
 8006c4c:	e797      	b.n	8006b7e <_malloc_r+0x22>
 8006c4e:	6025      	str	r5, [r4, #0]
 8006c50:	e7dc      	b.n	8006c0c <_malloc_r+0xb0>
 8006c52:	605b      	str	r3, [r3, #4]
 8006c54:	deff      	udf	#255	; 0xff
 8006c56:	bf00      	nop
 8006c58:	20001360 	.word	0x20001360

08006c5c <__malloc_lock>:
 8006c5c:	4801      	ldr	r0, [pc, #4]	; (8006c64 <__malloc_lock+0x8>)
 8006c5e:	f7ff bf01 	b.w	8006a64 <__retarget_lock_acquire_recursive>
 8006c62:	bf00      	nop
 8006c64:	2000135c 	.word	0x2000135c

08006c68 <__malloc_unlock>:
 8006c68:	4801      	ldr	r0, [pc, #4]	; (8006c70 <__malloc_unlock+0x8>)
 8006c6a:	f7ff befc 	b.w	8006a66 <__retarget_lock_release_recursive>
 8006c6e:	bf00      	nop
 8006c70:	2000135c 	.word	0x2000135c

08006c74 <_malloc_usable_size_r>:
 8006c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c78:	1f18      	subs	r0, r3, #4
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	bfbc      	itt	lt
 8006c7e:	580b      	ldrlt	r3, [r1, r0]
 8006c80:	18c0      	addlt	r0, r0, r3
 8006c82:	4770      	bx	lr

08006c84 <_sbrk_r>:
 8006c84:	b538      	push	{r3, r4, r5, lr}
 8006c86:	4d06      	ldr	r5, [pc, #24]	; (8006ca0 <_sbrk_r+0x1c>)
 8006c88:	2300      	movs	r3, #0
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	4608      	mov	r0, r1
 8006c8e:	602b      	str	r3, [r5, #0]
 8006c90:	f7fa f86c 	bl	8000d6c <_sbrk>
 8006c94:	1c43      	adds	r3, r0, #1
 8006c96:	d102      	bne.n	8006c9e <_sbrk_r+0x1a>
 8006c98:	682b      	ldr	r3, [r5, #0]
 8006c9a:	b103      	cbz	r3, 8006c9e <_sbrk_r+0x1a>
 8006c9c:	6023      	str	r3, [r4, #0]
 8006c9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ca0:	20001358 	.word	0x20001358

08006ca4 <_init>:
 8006ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ca6:	bf00      	nop
 8006ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006caa:	bc08      	pop	{r3}
 8006cac:	469e      	mov	lr, r3
 8006cae:	4770      	bx	lr

08006cb0 <_fini>:
 8006cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb2:	bf00      	nop
 8006cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cb6:	bc08      	pop	{r3}
 8006cb8:	469e      	mov	lr, r3
 8006cba:	4770      	bx	lr
